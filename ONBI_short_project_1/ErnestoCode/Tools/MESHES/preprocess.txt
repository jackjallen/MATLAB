# 1 "IntersectMeshes_OK2.cpp"
# 1 "/extra/disco1/miaTools/MESHES_VTK//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "IntersectMeshes_OK2.cpp"
# 14 "IntersectMeshes_OK2.cpp"
# 1 "/extra/disco1/miaTools/Tools/myMEX.h" 1
# 1 "/usr/local/MATLAB/R2012a/extern/include/mex.h" 1
# 20 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
        
# 56 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
typedef struct impl_info_tag *MEX_impl_info;

# 1 "/usr/local/MATLAB/R2012a/extern/include/matrix.h" 1
# 67 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
        
# 294 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 150 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 295 "/usr/local/MATLAB/R2012a/extern/include/matrix.h" 2
# 1 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h" 1
# 12 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
        
# 43 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 27 "/usr/include/limits.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/limits.h" 2 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 158 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 170 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 44 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h" 2
# 61 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/float.h" 1 3 4
# 62 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h" 2
# 86 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
typedef unsigned char uchar_T;
typedef unsigned short ushort_T;
typedef unsigned long ulong_T;
# 210 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef signed char int8_T;
# 225 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef unsigned char uint8_T;
# 241 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef short int16_T;
# 257 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef unsigned short uint16_T;
# 273 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef int int32_T;
# 289 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef unsigned int uint32_T;
# 350 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef float real32_T;
# 364 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef double real64_T;
# 406 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
  __extension__

 typedef long int64_T;
# 442 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
  __extension__

 typedef unsigned long uint64_T;
# 500 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef real64_T real_T;
# 509 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
 typedef real_T time_T;
# 521 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
typedef unsigned char boolean_T;





typedef char char_T;





typedef int int_T;





typedef unsigned uint_T;





typedef unsigned char byte_T;
# 555 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
    typedef struct {
      real32_T re, im;
    } creal32_T;






    typedef struct {
      real64_T re, im;
    } creal64_T;






    typedef struct {
      real_T re, im;
    } creal_T;
# 584 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
    typedef struct {
      int8_T re, im;
    } cint8_T;






    typedef struct {
      uint8_T re, im;
    } cuint8_T;






    typedef struct {
      int16_T re, im;
    } cint16_T;






    typedef struct {
      uint16_T re, im;
    } cuint16_T;






    typedef struct {
      int32_T re, im;
    } cint32_T;






    typedef struct {
      uint32_T re, im;
    } cuint32_T;






    typedef struct {
      int64_T re, im;
    } cint64_T;






    typedef struct {
      uint64_T re, im;
    } cuint64_T;
# 789 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 790 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h" 2


typedef int mwSize;
typedef int mwIndex;
typedef int mwSignedIndex;
# 823 "/usr/local/MATLAB/R2012a/extern/include/tmwtypes.h"
typedef unsigned short CHAR16_T;
# 296 "/usr/local/MATLAB/R2012a/extern/include/matrix.h" 2




typedef struct mxArray_tag mxArray;




typedef void (*mxFunctionPtr) (int nlhs, mxArray *plhs[], int nrhs, mxArray *prhs[]);
# 315 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
typedef bool mxLogical;




typedef CHAR16_T mxChar;




typedef enum
{
    mxUNKNOWN_CLASS = 0,
    mxCELL_CLASS,
    mxSTRUCT_CLASS,
    mxLOGICAL_CLASS,
    mxCHAR_CLASS,
    mxVOID_CLASS,
    mxDOUBLE_CLASS,
    mxSINGLE_CLASS,
    mxINT8_CLASS,
    mxUINT8_CLASS,
    mxINT16_CLASS,
    mxUINT16_CLASS,
    mxINT32_CLASS,
    mxUINT32_CLASS,
    mxINT64_CLASS,
    mxUINT64_CLASS,
    mxFUNCTION_CLASS,
    mxOPAQUE_CLASS,
    mxOBJECT_CLASS,

    mxINDEX_CLASS = mxUINT64_CLASS,




    mxSPARSE_CLASS = mxVOID_CLASS
}
mxClassID;




typedef enum
{
    mxREAL,
    mxCOMPLEX
}
mxComplexity;




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 370 "/usr/local/MATLAB/R2012a/extern/include/matrix.h" 2





extern "C" void *mxMalloc(
    size_t n
    );





extern "C" void *mxCalloc(
    size_t n,
    size_t size
    );





extern "C" void mxFree(void *ptr) ;





extern "C" void *mxRealloc(void *ptr, size_t size);





extern "C" mxClassID mxGetClassID(const mxArray *pa);





extern "C" void *mxGetData(
    const mxArray *pa
    );





extern "C" void mxSetData(
    mxArray *pa,
    void *newdata
    );






extern "C" bool mxIsNumeric(const mxArray *pa);





extern "C" bool mxIsCell(const mxArray *pa);





extern "C" bool mxIsLogical(const mxArray *pa);





extern "C" bool mxIsChar(const mxArray *pa);





extern "C" bool mxIsStruct(const mxArray *pa);





extern "C" bool mxIsOpaque(const mxArray *pa);





extern "C" bool mxIsFunctionHandle(const mxArray *pa);







extern "C" bool mxIsObject(
    const mxArray *pa
    );





extern "C" void *mxGetImagData(
    const mxArray *pa
    );





extern "C" void mxSetImagData(
    mxArray *pa,
    void *newdata
    );





extern "C" bool mxIsComplex(const mxArray *pa);





extern "C" bool mxIsSparse(const mxArray *pa);






extern "C" bool mxIsDouble(const mxArray *pa);






extern "C" bool mxIsSingle(const mxArray *pa);






extern "C" bool mxIsInt8(const mxArray *pa);






extern "C" bool mxIsUint8(const mxArray *pa);






extern "C" bool mxIsInt16(const mxArray *pa);






extern "C" bool mxIsUint16(const mxArray *pa);






extern "C" bool mxIsInt32(const mxArray *pa);






extern "C" bool mxIsUint32(const mxArray *pa);






extern "C" bool mxIsInt64(const mxArray *pa);






extern "C" bool mxIsUint64(const mxArray *pa);





extern "C" mwSize mxGetNumberOfDimensions(const mxArray *pa);





extern "C" const mwSize *mxGetDimensions(const mxArray *pa);





extern "C" size_t mxGetNumberOfElements(
    const mxArray *pa
    );





extern "C" double *mxGetPr(
    const mxArray *pa
    );





extern "C" void mxSetPr(
    mxArray *pa,
    double *pr
    );





extern "C" double *mxGetPi(
    const mxArray *pa
    );





extern "C" void mxSetPi(
    mxArray *pa,
    double *pi
    );





extern "C" mxChar *mxGetChars(
    const mxArray *pa
    );







extern "C" int mxGetUserBits(
    const mxArray *pa
    );







extern "C" void mxSetUserBits(
 mxArray *pa,
 int value
    );





extern "C" double mxGetScalar(const mxArray *pa);
# 677 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" bool mxIsFromGlobalWS(const mxArray *pa);





extern "C" void mxSetFromGlobalWS(mxArray *pa, bool global);





extern "C" size_t mxGetM(const mxArray *pa);





extern "C" void mxSetM(mxArray *pa, mwSize m);





extern "C" size_t mxGetN(const mxArray *pa);





extern "C" bool mxIsEmpty(
    const mxArray *pa
    );





extern "C" mwIndex *mxGetIr(const mxArray *pa);





extern "C" void mxSetIr(mxArray *pa, mwIndex *newir);





extern "C" mwIndex *mxGetJc(const mxArray *pa);





extern "C" void mxSetJc(mxArray *pa, mwIndex *newjc);





extern "C" mwSize mxGetNzmax(const mxArray *pa);





extern "C" void mxSetNzmax(mxArray *pa, mwSize nzmax);





extern "C" size_t mxGetElementSize(const mxArray *pa);






extern "C" mwIndex mxCalcSingleSubscript(const mxArray *pa, mwSize nsubs, const mwIndex *subs);






extern "C" int mxGetNumberOfFields(
    const mxArray *pa
    );





extern "C" mxArray *mxGetCell(const mxArray *pa, mwIndex i);





extern "C" void mxSetCell(mxArray *pa, mwIndex i, mxArray *value);





extern "C" const char *mxGetFieldNameByNumber(const mxArray *pa, int n);





extern "C" int mxGetFieldNumber(const mxArray *pa, const char *name);






extern "C" mxArray *mxGetFieldByNumber(const mxArray *pa, mwIndex i, int fieldnum);





extern "C" void mxSetFieldByNumber(mxArray *pa, mwIndex i, int fieldnum, mxArray *value);







extern "C" mxArray *mxGetField(const mxArray *pa, mwIndex i, const char *fieldname);






extern "C" void mxSetField(mxArray *pa, mwIndex i, const char *fieldname, mxArray *value);
# 829 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxGetProperty(const mxArray *pa, const mwIndex i, const char *propname);







extern "C" void mxSetProperty(mxArray *pa, mwIndex i, const char *propname, const mxArray *value);





extern "C" const char *mxGetClassName(const mxArray *pa);





extern "C" bool mxIsClass(const mxArray *pa, const char *name);


# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 236 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 237 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 31 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 97 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 107 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 221 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));
# 64 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
}
# 224 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4
}
# 853 "/usr/local/MATLAB/R2012a/extern/include/matrix.h" 2
# 870 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" void mxSetN(mxArray *pa, mwSize n);






extern "C" int mxSetDimensions(mxArray *pa, const mwSize *size, mwSize ndims);





extern "C" void mxDestroyArray(mxArray *pa);





extern "C" mxArray *mxCreateNumericArray(mwSize ndim, const mwSize *dims, mxClassID classid, mxComplexity flag);







extern "C" mxArray *mxCreateCharArray(mwSize ndim, const mwSize *dims);





extern "C" mxArray *mxCreateDoubleMatrix(mwSize m, mwSize n, mxComplexity flag);





extern "C" mxLogical *mxGetLogicals(const mxArray *pa);







extern "C" mxArray *mxCreateLogicalArray(mwSize ndim, const mwSize *dims);
# 940 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateLogicalScalar(bool value);





extern "C" bool mxIsLogicalScalar(const mxArray *pa);





extern "C" bool mxIsLogicalScalarTrue(const mxArray *pa);
# 961 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateDoubleScalar(double value);
# 984 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateSparse(mwSize m, mwSize n, mwSize nzmax, mxComplexity flag);







extern "C" mxArray *mxCreateSparseLogicalMatrix(mwSize m, mwSize n, mwSize nzmax);







extern "C" void mxGetNChars(const mxArray *pa, char *buf, mwSize nChars);
# 1011 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" int mxGetString(const mxArray *pa, char *buf, mwSize buflen);







extern "C" char *mxArrayToString(const mxArray *pa);
# 1029 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateStringFromNChars(const char *str, mwSize n);
# 1040 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateString(const char *str);







extern "C" mxArray *mxCreateCharMatrixFromStrings(mwSize m, const char **str);







extern "C" mxArray *mxCreateCellMatrix(mwSize m, mwSize n);
# 1065 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateCellArray(mwSize ndim, const mwSize *dims);







extern "C" mxArray *mxCreateStructMatrix(size_t m, size_t n, int nfields, const char **fieldnames);
# 1082 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" mxArray *mxCreateStructArray(mwSize ndim, const mwSize *dims, int nfields,
        const char **fieldnames);







extern "C" mxArray *mxDuplicateArray(const mxArray *in);







extern "C" int mxSetClassName(mxArray *pa, const char *classname);






extern "C" int mxAddField(mxArray *pa, const char *fieldname);






extern "C" void mxRemoveField(mxArray *pa, int field);





extern "C" double mxGetEps(void);





extern "C" double mxGetInf(void);





extern "C" double mxGetNaN(void);
# 1148 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" bool mxIsFinite(
    double x
    );





extern "C" bool mxIsInf(
    double x
    );





extern "C" bool mxIsNaN(
    double x
    );
# 1198 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" void mexPrintAssertion(const char *test,
         const char *fname,
         int linenum,
         const char *message);
# 1228 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
extern "C" {
# 1251 "/usr/local/MATLAB/R2012a/extern/include/matrix.h"
void mxSetProperty_700(mxArray *, int, const char *, const mxArray *);




mxArray *mxGetProperty_700(const mxArray *, int, const char *);




void mxSetField_700(mxArray *, int, const char *, mxArray *);




void mxSetFieldByNumber_700(mxArray *, int, int, mxArray *);




mxArray *mxGetFieldByNumber_700(const mxArray *, int, int);




mxArray *mxGetField_700(const mxArray *, int, const char *);




mxArray *mxCreateStructMatrix_700(int, int, int, const char **);




mxArray *mxCreateCellMatrix_700(int, int);




mxArray *mxCreateCharMatrixFromStrings_700(int, const char **);




int mxGetString_700(const mxArray *, char *, int);




int mxGetNumberOfDimensions_700(const mxArray *);




const int *mxGetDimensions_700(const mxArray *);




int mxSetDimensions_700(mxArray *, const int *, int);




void mxSetIr_700(mxArray *, int *);




int *mxGetIr_700(const mxArray *);




void mxSetJc_700(mxArray *, int *);




int *mxGetJc_700(const mxArray *);




mxArray *mxCreateStructArray_700(int, const int *, int, const char **);




mxArray *mxCreateCharArray_700(int, const int *);




mxArray *mxCreateNumericArray_700(int, const int *, mxClassID, mxComplexity);




mxArray *mxCreateCellArray_700(int, const int *);




mxArray *mxCreateLogicalArray_700(int, const int *);




mxArray *mxGetCell_700(const mxArray *, int);




void mxSetCell_700(mxArray *, int, mxArray *);




void mxSetNzmax_700(mxArray *, int);




void mxSetN_700(mxArray *, int);




void mxSetM_700(mxArray *, int);




int mxGetNzmax_700(const mxArray *);




mxArray *mxCreateDoubleMatrix_700(int, int, mxComplexity);




mxArray *mxCreateNumericMatrix_700(int, int, mxClassID, int);




mxArray *mxCreateLogicalMatrix_700(unsigned int, unsigned int);




mxArray *mxCreateSparse_700(int, int, int, mxComplexity);




mxArray *mxCreateSparseLogicalMatrix_700(int, int, int);




void mxGetNChars_700(const mxArray *, char *, int);




mxArray *mxCreateStringFromNChars_700(const char *, int);




int mxCalcSingleSubscript_700(const mxArray *, int, const int *);


}
# 59 "/usr/local/MATLAB/R2012a/extern/include/mex.h" 2


extern "C"
{

typedef void (*mex_exit_fn)(void);

}


typedef struct mexGlobalTableEntry_Tag
{
    const char *name;
    mxArray **variable;
} mexGlobalTableEntry, *mexGlobalTable;
# 82 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
typedef struct mexFunctionTableEntry_tag {
  const char * name;
  mxFunctionPtr f;
  int nargin;
  int nargout;
  struct _mexLocalFunctionTable *local_function_table;
} mexFunctionTableEntry, *mexFunctionTable;

typedef struct _mexLocalFunctionTable {
  size_t length;
  mexFunctionTable entries;
} _mexLocalFunctionTable, *mexLocalFunctionTable;

typedef struct {
  void (*initialize)(void);
  void (*terminate)(void);
} _mexInitTermTableEntry, *mexInitTermTableEntry;



typedef struct {
  int version;
  int file_function_table_length;
  mexFunctionTable file_function_table;
  int global_variable_table_length;
  mexGlobalTable global_variable_table;
  int npaths;
  const char ** paths;
  int init_term_table_length;
  mexInitTermTableEntry init_term_table;
} _mex_information, *mex_information;

typedef mex_information(*fn_mex_file)(void);

typedef void (*fn_clean_up_after_error)(void);
typedef const char *(*fn_simple_function_to_string)(mxFunctionPtr f);

typedef void (*fn_mex_enter_mex_library)(mex_information x);
typedef fn_mex_enter_mex_library fn_mex_exit_mex_library;

typedef mexLocalFunctionTable (*fn_mex_get_local_function_table)(void);
typedef mexLocalFunctionTable (*fn_mex_set_local_function_table)(mexLocalFunctionTable);
# 140 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
extern "C"




void mexFunction(
    int nlhs,
    mxArray *plhs[],
    int nrhs,
    const mxArray *prhs[]
);
# 161 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 554 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 109 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 253 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 263 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 296 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 567 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 600 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 646 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 723 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 734 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 770 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 789 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 812 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 940 "/usr/include/stdio.h" 3 4
}
# 162 "/usr/local/MATLAB/R2012a/extern/include/mex.h" 2






extern "C" void mexErrMsgTxt(
    const char *error_msg
    );






extern "C" void mexErrMsgIdAndTxt(
    const char * identifier,
    const char * err_msg,
    ...
    );






extern "C" void mexWarnMsgTxt(
    const char *warn_msg
    );
# 199 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
extern "C" void mexWarnMsgIdAndTxt(
    const char * identifier,
    const char * warn_msg,
    ...
    );





extern "C" int mexPrintf(
    const char *fmt,
    ...
    );
# 224 "/usr/local/MATLAB/R2012a/extern/include/mex.h"
extern "C" void mexMakeArrayPersistent(
    mxArray *pa
    );







extern "C" void mexMakeMemoryPersistent(void *ptr);





extern "C" int mexSet(double handle, const char *property, mxArray *value);



extern "C" const mxArray *mexGet(double handle, const char *property);





extern "C" int mexCallMATLAB(
    int nlhs,
    mxArray *plhs[],
    int nrhs,
    mxArray *prhs[],
    const char *fcn_name
    );





extern "C" mxArray *mexCallMATLABWithTrap(
    int nlhs,
    mxArray *plhs[],
    int nrhs,
    mxArray *prhs[],
    const char *fcn_name
    );







extern "C" void mexSetTrapFlag(int flag);






extern "C" void mexPrintAssertion(
  const char *test,
  const char *fname,
  int linenum,
  const char *message);





extern "C" bool mexIsGlobal(const mxArray *pA);






extern "C" int mexPutVariable(
    const char *workspace,
    const char *name,
    const mxArray *parray
    );






extern "C" const mxArray *mexGetVariablePtr(
    const char *workspace,
    const char *name
    );






extern "C" mxArray *mexGetVariable(
    const char *workspace,
    const char *name
    );





extern "C" void mexLock(void);





extern "C" void mexUnlock(void);





extern "C" bool mexIsLocked(void);





extern "C" const char *mexFunctionName(void);






extern "C" int mexEvalString(
   const char *str
);






extern "C" mxArray* mexEvalStringWithTrap(
   const char *str
);





extern "C" int mexAtExit(mex_exit_fn exit_fcn );
# 2 "/extra/disco1/miaTools/Tools/myMEX.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void
 sincosf
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw (); extern void
 __sincosf
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 146 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void
 sincosl
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw (); extern void
 __sincosl
# 82 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 147 "/usr/include/math.h" 2 3 4
# 162 "/usr/include/math.h" 3 4
extern int signgam;
# 203 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 296 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 319 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 483 "/usr/include/math.h" 3 4
}
# 3 "/extra/disco1/miaTools/Tools/myMEX.h" 2
# 11 "/extra/disco1/miaTools/Tools/myMEX.h"
char *uneval( double x ){

  mxArray *X[1], *STR[1];
  char *string;

  X[0] = mxCreateDoubleScalar( x );
  mexCallMATLAB( 1 , STR , 1 , X , "uneval" );


  string = mxArrayToString( STR[0] );

  mxDestroyArray( X[0] );
  mxDestroyArray( STR[0] );


  return( string );
}
# 51 "/extra/disco1/miaTools/Tools/myMEX.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 268 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 335 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 346 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 377 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 405 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 433 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 445 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 470 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 512 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 611 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 647 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 673 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 690 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 894 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 895 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 980 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 1018 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1030 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1050 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1061 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1105 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1136 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__libc_block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1174 "/usr/include/unistd.h" 3 4
}
# 52 "/extra/disco1/miaTools/Tools/myMEX.h" 2



    extern "C" bool utIsInterruptPending();






mxArray *myCreateDoubleMatrix_E( mwSize m, mwSize n, mxComplexity ComplexFlag ){
  mxArray *M;

  M = mxCreateDoubleMatrix_700( 0, 0, ComplexFlag);
  mxSetM_700( M , m );
  mxSetN_700( M , n );

  mxSetData( M , mxRealloc( mxGetData( M ) , (m*n) << 3 ) );
  if( ComplexFlag == mxCOMPLEX ){
    mxSetImagData( M , mxRealloc( mxGetImagData( M ) , (m*n) << 3 ) );
  }

  return( M );
}


mxArray *myCreateNumericArray_E(mwSize ndim, const mwSize *dims, mxClassID classid, mxComplexity ComplexFlag){
  mxArray *M;
  int numel;

  M = mxCreateNumericArray_700( 0 , 0 , classid , ComplexFlag );
  mxSetDimensions_700( M , dims , ndim );
# 92 "/extra/disco1/miaTools/Tools/myMEX.h"
  numel = mxGetElementSize(M)*mxGetNumberOfElements(M);

  mxSetData( M , mxRealloc( mxGetData( M ) , numel ) );

  if( ComplexFlag == mxCOMPLEX ){
    mxSetImagData( M , mxRealloc( mxGetImagData( M ) , numel ) );
  }

  return( M );
}


mxArray *myDuplicateArray_E(const mxArray *A){
  mxArray *M;
  int numel;

  M = mxCreateNumericArray_700( 0 , 0 , mxGetClassID(A) , ( mxIsComplex(A) ) ? mxCOMPLEX : mxREAL );
  mxSetDimensions_700( M , mxGetDimensions_700(A) , mxGetNumberOfDimensions_700(A) );

  numel = mxGetElementSize(A)*mxGetNumberOfElements(A);

  mxSetData( M , mxMalloc( numel ) );

  if( mxIsComplex(A) ){
    mxSetImagData( M , mxMalloc( numel ) );
  }

  return( M );
}
# 133 "/extra/disco1/miaTools/Tools/myMEX.h"
const union { int bits[2]; double value; } myNANp = {0, -524288};
# 149 "/extra/disco1/miaTools/Tools/myMEX.h"
const union { int bits[2]; double value; } myNANn = {0,2146959360};





const union { int bits[2]; double value; } myINFp = {0,2146435072};
# 170 "/extra/disco1/miaTools/Tools/myMEX.h"
const union { int bits[2]; double value; } myINFn = {0, -1048576};
# 185 "/extra/disco1/miaTools/Tools/myMEX.h"
double myEPS( double x ){
  double y;

  union { unsigned int bits[2]; double value; } ud;
  union { unsigned short bits[2]; float value; } uf;

  if( sizeof(double) == 8 ) {

    ud.value = x;
    ud.bits[1] &= 0x7fffffff;
    y = ud.value;

    if( ud.bits[0] == 0xffffffff ){
      ud.bits[1] += 1;
      ud.bits[0] = 0x00000000;
    } else {
      ud.bits[0] += 1;
    }

    return( ud.value - y );

  } else {

    uf.value = x;
    uf.bits[1] &= 0x7fff;
    y = uf.value;

    if( uf.bits[0] == 0xffff ){
      uf.bits[1] += 1;
      uf.bits[0] = 0x0000;
    } else {
      uf.bits[0] += 1;
    }

    return( uf.value - y );

  }

}
# 255 "/extra/disco1/miaTools/Tools/myMEX.h"
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 86 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  long int offset;
  long int freq;
  long int maxerror;
  long int esterror;
  int status;
  long int constant;
  long int precision;
  long int tolerance;
  struct timeval time;
  long int tick;

  long int ppsfreq;
  long int jitter;
  int shift;
  long int stabil;
  long int jitcnt;
  long int calcnt;
  long int errcnt;
  long int stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 256 "/extra/disco1/miaTools/Tools/myMEX.h" 2
# 269 "/extra/disco1/miaTools/Tools/myMEX.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdint.h" 1 3 4


# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 123 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 4 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdint.h" 2 3 4
# 270 "/extra/disco1/miaTools/Tools/myMEX.h" 2
# 326 "/extra/disco1/miaTools/Tools/myMEX.h"
int myGetSizes( mxArray *M , int *D ){
  int n, N;
  N = mxGetNumberOfDimensions_700( M );
  for( n = 0 ; n < N ; n++ ){
    D[n] = (int) *( mxGetDimensions_700( M ) + n );
  }
  for( ; n<50 ; n++ ){ D[n] = -1; }
  return( N );
}

struct myALLOCS {
    int n;
    double *pointers[100];
}; typedef struct myALLOCS myALLOCS;

int GetInterval( double , double * , int , int );
double *DualGrid( double *, int );
int checkEqualSpaced( double *, int );
double myGetValue( const mxArray *);
double *myGetPr_( const mxArray *, myALLOCS *);
void myFreeALLOCATES_( myALLOCS *);
double myGetValueIth(const mxArray * , int );






int myStrcmpi( char *str1, char *str2 ){
  int nn;
  for( nn = 0 ; str1[nn] && str2[nn] ; nn++){
    if( ((( (str1[nn])>='A') && ( (str1[nn]) <='Z') ) ? (str1[nn])-'A' + 'a': (str1[nn])) != ((( (str2[nn])>='A') && ( (str2[nn]) <='Z') ) ? (str2[nn])-'A' + 'a': (str2[nn])) ){
      return(1);
    }
  }
  if( str1[nn] || str2[nn] ){ return(1); }
  return( 0 );
}


double *myGetPr_(const mxArray *p, myALLOCS *ALLOCATES){

  long n,N;
  mxClassID CLASS;
  double *P;

  double *dataD;
  float *dataF;
  unsigned char *dataUC;
  char *dataC;
  unsigned short *dataUS;
  short *dataS;
  unsigned int *dataUI;
  int *dataI;


  CLASS = mxGetClassID(p);
  if( CLASS == mxDOUBLE_CLASS && sizeof(double) == sizeof(double) ){
    return( (double *) mxGetData( p ) );
  }
  if( CLASS == mxSINGLE_CLASS && sizeof(double) == sizeof(float ) ){
    return( (double *) mxGetData( p ) );
  }

  N = mxGetNumberOfElements( p );
  P = (double *) mxMalloc( sizeof(double)* N );
  if( P == __null ){
    mexPrintf("Insuficient Memory to copy array\n");
  }

  switch( CLASS ){
    case mxDOUBLE_CLASS:
      dataD = (double *) mxGetData( p );

      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataD[n]; }


      break;

    case mxSINGLE_CLASS:
      dataF = (float *) mxGetData( p );

      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataF[n]; }


      break;


    case mxUINT8_CLASS:
      dataUC = (unsigned char *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataUC[n]; }
      break;

    case mxINT8_CLASS:
      dataC = (char *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataC[n]; }
      break;

    case mxUINT16_CLASS:
      dataUS = (unsigned short *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataUS[n]; }
      break;

    case mxINT16_CLASS:
      dataS = (short *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataS[n]; }
      break;

    case mxUINT32_CLASS:
      dataUI = (unsigned int *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataUI[n]; }
      break;

    case mxINT32_CLASS:
      dataI = (int *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataI[n]; }
      break;

    case mxLOGICAL_CLASS:
      dataUC = (unsigned char *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataUC[n]; }
      break;

    case mxCHAR_CLASS:
      dataC = (char *) mxGetData( p );
      for( n=0 ; n<N ; n++ ){ P[n] = (double) dataC[n]; }
      break;
  }

  ALLOCATES->pointers[ALLOCATES->n] = P;
  ALLOCATES->n++;
  return( P );
}

void myFreeALLOCATES_(myALLOCS *ALLOCATES){
  int n;
  for( n = 0 ; n < ALLOCATES->n ; n++ ){
    mxFree( ALLOCATES->pointers[n] );
  }
}

double myGetValueIth(const mxArray *p , int offset ){
  switch( mxGetClassID(p) ){
    case mxDOUBLE_CLASS: return( (double) *( offset + (double *) mxGetData(p) ));
    case mxSINGLE_CLASS: return( (double) *( offset + (float *) mxGetData(p) ));
    case mxLOGICAL_CLASS: return( (double) *( offset + (unsigned char *) mxGetData(p) ));
    case mxCHAR_CLASS: return( (double) *( offset + (char *) mxGetData(p) ));
    case mxUINT8_CLASS: return( (double) *( offset + (unsigned char *) mxGetData(p) ));
    case mxINT8_CLASS: return( (double) *( offset + (char *) mxGetData(p) ));
    case mxUINT16_CLASS: return( (double) *( offset + (unsigned short *) mxGetData(p) ));
    case mxINT16_CLASS: return( (double) *( offset + (short *) mxGetData(p) ));
    case mxUINT32_CLASS: return( (double) *( offset + (unsigned int *) mxGetData(p) ));
    case mxINT32_CLASS: return( (double) *( offset + (int *) mxGetData(p) ));
    case mxUINT64_CLASS: return( (double) *( offset + (unsigned long *) mxGetData(p) ));
    case mxINT64_CLASS: return( (double) *( offset + (long *) mxGetData(p) ));
  }
  return(0);
}


double myGetValue(const mxArray *p ){
  switch( mxGetClassID(p) ){
    case mxDOUBLE_CLASS: return( (double) *(double *) mxGetData(p) );
    case mxSINGLE_CLASS: return( (double) *(float *) mxGetData(p) );
    case mxLOGICAL_CLASS: return( (double) *(unsigned char *) mxGetData(p) );
    case mxCHAR_CLASS: return( (double) *(char *) mxGetData(p) );
    case mxUINT8_CLASS: return( (double) *(unsigned char *) mxGetData(p) );
    case mxINT8_CLASS: return( (double) *(char *) mxGetData(p) );
    case mxUINT16_CLASS: return( (double) *(unsigned short *) mxGetData(p) );
    case mxINT16_CLASS: return( (double) *(short *) mxGetData(p) );
    case mxUINT32_CLASS: return( (double) *(unsigned int *) mxGetData(p) );
    case mxINT32_CLASS: return( (double) *(int *) mxGetData(p) );
    case mxUINT64_CLASS: return( (double) *(unsigned long *) mxGetData(p) );
    case mxINT64_CLASS: return( (double) *(long *) mxGetData(p) );
  }
  return(0);
}


mxArray * myDuplicateArrayWithClass( const mxArray *A , mxClassID classid , mxComplexity ComplexFlag ){
  mxArray *M;
  int numel;
  int sz;

   M = mxCreateNumericArray_700( mxGetNumberOfDimensions_700(A) , mxGetDimensions_700(A) , classid , ComplexFlag );
# 527 "/extra/disco1/miaTools/Tools/myMEX.h"
  return( M );
}
# 541 "/extra/disco1/miaTools/Tools/myMEX.h"
int GetInterval( double x , double *G , int I , int lid ){
  int id, iid, im, s;
  double xm;

  if( x<G[0] ){ return( -2 ); }
  if( x==G[0] ){ return( 0 ); }
  I--;
  if( x>G[I] ){ return(-101); }
  if( x==G[I] ){ return( I-1); }

  if( lid < 0 ){ lid = (I+1) >> 1; }

  s = 1;
  id = lid;
  while( G[id] > x ){
    id -= s;
    if( id <= 0 ){
      id = 0;
      break;
    }
    s <<= 1;
  }
  if( G[id] == x ){ return(id); }

  s = 1;
  iid = lid + 1;
  while( G[iid] < x ){
    iid += s;
    if( iid >= I ){
      iid = I;
      break;
    }
    s <<= 1;
  }
  if( G[iid] == x ){ return(iid); }

  while( iid-id > 1 ){
    im = (id+iid) >> 1;
    xm = G[im];

    if( x < xm ){
      iid = im;
    } else if( x > xm ){
      id = im;
    } else {
      return(im);
    }
  }
  return(id);
}


double *DualGrid( double *X , int I){
  double *DX;
  int i;

  DX = (double *) mxMalloc( (I+1)*sizeof(double) );


  if( I == 1 ){
    DX[0] = X[0] - 0.5*0.1;
    DX[1] = X[0] + 0.5*0.1;
  } else {
    DX[0] = X[0] - (X[1]-X[0])/2;
    for( i = 1 ; i < I ; i++ ){
      DX[i] = (X[i-1]+X[i])/2;
    }
    DX[I] = X[I-1] + ( X[I-1]-X[I-2] )/2;
  }

  return( DX );
}

int checkEqualSpaced( double *G, int I ){
  int i;
  double d, eps;

  if( I <= 1 ){ return(1); }
  d = G[1]-G[0];
  eps = d/1000.0;
  I -= 1;
  for( i = 1 ; i < I ; i++ ){
    if( fabs( G[i+1]-G[i] - d ) > eps ){
      return(0);
    }
  }
  return(1);
}


double MAX( double x, double y ){ if(x>y){ return(x); } return(y); }
double MIN( double x, double y ){ if(y>x){ return(x); } return(y); }

double MAX3( double x, double y , double z ){ return( MAX( MAX(x,y) , z ) ); }
double MIN3( double x, double y , double z ){ return( MIN( MIN(x,y) , z ) ); }


int checkIsSorted( double *G, int I ){
  int i;

  if( I <= 1 ){ return(1); }
  for( i = 1 ; i < I ; i++ ){
    if( G[i-1] > G[i] ){
      return(0);
    }
  }
  return(1);
}
# 15 "IntersectMeshes_OK2.cpp" 2







# 1 "/usr/local/include/vtk-5.10/vtkSignedCharArray.h" 1
# 29 "/usr/local/include/vtk-5.10/vtkSignedCharArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataArray.h" 1
# 37 "/usr/local/include/vtk-5.10/vtkDataArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkAbstractArray.h" 1
# 44 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkObject.h" 1
# 41 "/usr/local/include/vtk-5.10/vtkObject.h"
# 1 "/usr/local/include/vtk-5.10/vtkObjectBase.h" 1
# 43 "/usr/local/include/vtk-5.10/vtkObjectBase.h"
# 1 "/usr/local/include/vtk-5.10/vtkIndent.h" 1
# 24 "/usr/local/include/vtk-5.10/vtkIndent.h"
# 1 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 1
# 30 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h"
# 1 "/usr/local/include/vtk-5.10/vtkWin32Header.h" 1
# 27 "/usr/local/include/vtk-5.10/vtkWin32Header.h"
# 1 "/usr/local/include/vtk-5.10/vtkConfigure.h" 1
# 194 "/usr/local/include/vtk-5.10/vtkConfigure.h"
  typedef bool vtkstd_bool;
# 28 "/usr/local/include/vtk-5.10/vtkWin32Header.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkABI.h" 1
# 29 "/usr/local/include/vtk-5.10/vtkWin32Header.h" 2
# 31 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2
# 40 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h"
# 1 "/usr/local/include/vtk-5.10/vtkIOStream.h" 1
# 35 "/usr/local/include/vtk-5.10/vtkIOStream.h"
# 1 "/usr/include/c++/4.6/iostream" 1 3
# 37 "/usr/include/c++/4.6/iostream" 3
       
# 38 "/usr/include/c++/4.6/iostream" 3

# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 1 3
# 153 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 393 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/os_defines.h" 1 3
# 394 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/cpu_defines.h" 1 3
# 397 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h" 2 3
# 40 "/usr/include/c++/4.6/iostream" 2 3
# 1 "/usr/include/c++/4.6/ostream" 1 3
# 38 "/usr/include/c++/4.6/ostream" 3
       
# 39 "/usr/include/c++/4.6/ostream" 3

# 1 "/usr/include/c++/4.6/ios" 1 3
# 37 "/usr/include/c++/4.6/ios" 3
       
# 38 "/usr/include/c++/4.6/ios" 3

# 1 "/usr/include/c++/4.6/iosfwd" 1 3
# 38 "/usr/include/c++/4.6/iosfwd" 3
       
# 39 "/usr/include/c++/4.6/iosfwd" 3


# 1 "/usr/include/c++/4.6/bits/stringfwd.h" 1 3
# 39 "/usr/include/c++/4.6/bits/stringfwd.h" 3
       
# 40 "/usr/include/c++/4.6/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 85 "/usr/include/c++/4.6/bits/stringfwd.h" 3

}
# 42 "/usr/include/c++/4.6/iosfwd" 2 3
# 1 "/usr/include/c++/4.6/bits/postypes.h" 1 3
# 40 "/usr/include/c++/4.6/bits/postypes.h" 3
       
# 41 "/usr/include/c++/4.6/bits/postypes.h" 3

# 1 "/usr/include/c++/4.6/cwchar" 1 3
# 41 "/usr/include/c++/4.6/cwchar" 3
       
# 42 "/usr/include/c++/4.6/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 40 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 52 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 353 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 129 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcspbrk (__const wchar_t *__wcs,
           __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsstr (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcswcs (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 303 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c,
           size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 402 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 527 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;
# 677 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 733 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 798 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 824 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 834 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 888 "/usr/include/wchar.h" 3 4
}
# 47 "/usr/include/c++/4.6/cwchar" 2 3
# 64 "/usr/include/c++/4.6/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 137 "/usr/include/c++/4.6/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/4.6/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 259 "/usr/include/c++/4.6/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 43 "/usr/include/c++/4.6/bits/postypes.h" 2 3
# 70 "/usr/include/c++/4.6/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 90 "/usr/include/c++/4.6/bits/postypes.h" 3
  typedef long streamoff;
# 100 "/usr/include/c++/4.6/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 113 "/usr/include/c++/4.6/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 135 "/usr/include/c++/4.6/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 241 "/usr/include/c++/4.6/bits/postypes.h" 3

}
# 43 "/usr/include/c++/4.6/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 76 "/usr/include/c++/4.6/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 40 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/exception" 1 3
# 35 "/usr/include/c++/4.6/exception" 3
       
# 36 "/usr/include/c++/4.6/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 61 "/usr/include/c++/4.6/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 118 "/usr/include/c++/4.6/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 143 "/usr/include/c++/4.6/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/bits/char_traits.h" 1 3
# 39 "/usr/include/c++/4.6/bits/char_traits.h" 3
       
# 40 "/usr/include/c++/4.6/bits/char_traits.h" 3

# 1 "/usr/include/c++/4.6/bits/stl_algobase.h" 1 3
# 61 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/4.6/bits/functexcept.h" 1 3
# 41 "/usr/include/c++/4.6/bits/functexcept.h" 3
# 1 "/usr/include/c++/4.6/bits/exception_defines.h" 1 3
# 42 "/usr/include/c++/4.6/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 422 "/usr/include/c++/4.6/bits/cpp_type_traits.h" 3

}
# 63 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/ext/type_traits.h" 1 3
# 33 "/usr/include/c++/4.6/ext/type_traits.h" 3
       
# 34 "/usr/include/c++/4.6/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/4.6/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/4.6/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_pair.h" 1 3
# 60 "/usr/include/c++/4.6/bits/stl_pair.h" 3
# 1 "/usr/include/c++/4.6/bits/move.h" 1 3
# 34 "/usr/include/c++/4.6/bits/move.h" 3
# 1 "/usr/include/c++/4.6/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/4.6/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/4.6/bits/concept_check.h" 3
# 35 "/usr/include/c++/4.6/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 109 "/usr/include/c++/4.6/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 120 "/usr/include/c++/4.6/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/usr/include/c++/4.6/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 86 "/usr/include/c++/4.6/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 196 "/usr/include/c++/4.6/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 270 "/usr/include/c++/4.6/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }



}
# 66 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
       
# 64 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 90 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 117 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 163 "/usr/include/c++/4.6/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
       
# 64 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 111 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 169 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 200 "/usr/include/c++/4.6/bits/stl_iterator_base_funcs.h" 3

}
# 68 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_iterator.h" 1 3
# 68 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 96 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 395 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 422 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 445 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 512 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 535 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 623 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 649 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 699 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/usr/include/c++/4.6/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 69 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/4.6/debug/debug.h" 1 3
# 47 "/usr/include/c++/4.6/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/usr/include/c++/4.6/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;


     

     

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 319 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 357 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 494 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 522 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 552 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 669 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1008 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;


     
     
      ;
      ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/usr/include/c++/4.6/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 42 "/usr/include/c++/4.6/bits/char_traits.h" 2 3

# 1 "/usr/include/c++/4.6/cwchar" 1 3
# 41 "/usr/include/c++/4.6/cwchar" 3
       
# 42 "/usr/include/c++/4.6/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 47 "/usr/include/c++/4.6/cwchar" 2 3
# 44 "/usr/include/c++/4.6/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 59 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 84 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 228 "/usr/include/c++/4.6/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}
# 42 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/bits/localefwd.h" 1 3
# 39 "/usr/include/c++/4.6/bits/localefwd.h" 3
       
# 40 "/usr/include/c++/4.6/bits/localefwd.h" 3


# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++locale.h" 1 3
# 40 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++locale.h" 3
       
# 41 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++locale.h" 3

# 1 "/usr/include/c++/4.6/clocale" 1 3
# 41 "/usr/include/c++/4.6/clocale" 3
       
# 42 "/usr/include/c++/4.6/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, __const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 152 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, __const char *__locale,
        __locale_t __base) throw ();
# 187 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 45 "/usr/include/c++/4.6/clocale" 2 3
# 53 "/usr/include/c++/4.6/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 43 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 89 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 43 "/usr/include/c++/4.6/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/4.6/cctype" 1 3
# 41 "/usr/include/c++/4.6/cctype" 3
       
# 42 "/usr/include/c++/4.6/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4
extern "C" {
# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const));
# 106 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 273 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 349 "/usr/include/ctype.h" 3 4
}
# 45 "/usr/include/c++/4.6/cctype" 2 3
# 64 "/usr/include/c++/4.6/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 45 "/usr/include/c++/4.6/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/4.6/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 43 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/bits/ios_base.h" 1 3
# 39 "/usr/include/c++/4.6/bits/ios_base.h" 3
       
# 40 "/usr/include/c++/4.6/bits/ios_base.h" 3

# 1 "/usr/include/c++/4.6/ext/atomicity.h" 1 3
# 34 "/usr/include/c++/4.6/ext/atomicity.h" 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr.h" 1 3
# 30 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr.h" 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 1 3
# 41 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 30 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 31 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 74 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 120 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 203 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 44 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 26 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 30 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 31 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 115 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 147 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 182 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 220 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, __const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 478 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 490 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 524 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 726 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        __const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 790 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 872 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 984 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1028 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1095 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1129 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1143 "/usr/include/pthread.h" 3 4
}
# 42 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 2 3


typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &







 __gthrw_pthread_cancel;
  return __gthread_active_ptr != 0;
}
# 659 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 802 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/usr/include/c++/4.6/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/atomic_word.h" 1 3
# 32 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/usr/include/c++/4.6/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/usr/include/c++/4.6/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 42 "/usr/include/c++/4.6/bits/ios_base.h" 2 3

# 1 "/usr/include/c++/4.6/bits/locale_classes.h" 1 3
# 39 "/usr/include/c++/4.6/bits/locale_classes.h" 3
       
# 40 "/usr/include/c++/4.6/bits/locale_classes.h" 3


# 1 "/usr/include/c++/4.6/string" 1 3
# 38 "/usr/include/c++/4.6/string" 3
       
# 39 "/usr/include/c++/4.6/string" 3




# 1 "/usr/include/c++/4.6/bits/allocator.h" 1 3
# 48 "/usr/include/c++/4.6/bits/allocator.h" 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++allocator.h" 1 3
# 34 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++allocator.h" 3
# 1 "/usr/include/c++/4.6/ext/new_allocator.h" 1 3
# 34 "/usr/include/c++/4.6/ext/new_allocator.h" 3
# 1 "/usr/include/c++/4.6/new" 1 3
# 39 "/usr/include/c++/4.6/new" 3
       
# 40 "/usr/include/c++/4.6/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 93 "/usr/include/c++/4.6/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/usr/include/c++/4.6/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/usr/include/c++/4.6/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 117 "/usr/include/c++/4.6/ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++allocator.h" 2 3
# 49 "/usr/include/c++/4.6/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 65 "/usr/include/c++/4.6/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/usr/include/c++/4.6/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 236 "/usr/include/c++/4.6/bits/allocator.h" 3

}
# 44 "/usr/include/c++/4.6/string" 2 3


# 1 "/usr/include/c++/4.6/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/4.6/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/4.6/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/4.6/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/4.6/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 47 "/usr/include/c++/4.6/string" 2 3



# 1 "/usr/include/c++/4.6/bits/stl_function.h" 1 3
# 60 "/usr/include/c++/4.6/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 101 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
# 508 "/usr/include/c++/4.6/bits/stl_function.h" 3
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/usr/include/c++/4.6/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/4.6/backward/binders.h" 1 3
# 60 "/usr/include/c++/4.6/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 99 "/usr/include/c++/4.6/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/usr/include/c++/4.6/bits/stl_function.h" 2 3
# 51 "/usr/include/c++/4.6/string" 2 3


# 1 "/usr/include/c++/4.6/bits/range_access.h" 1 3
# 33 "/usr/include/c++/4.6/bits/range_access.h" 3
       
# 34 "/usr/include/c++/4.6/bits/range_access.h" 3
# 54 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_string.h" 1 3
# 39 "/usr/include/c++/4.6/bits/basic_string.h" 3
       
# 40 "/usr/include/c++/4.6/bits/basic_string.h" 3



# 1 "/usr/include/c++/4.6/initializer_list" 1 3
# 33 "/usr/include/c++/4.6/initializer_list" 3
       
# 34 "/usr/include/c++/4.6/initializer_list" 3
# 44 "/usr/include/c++/4.6/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 143 "/usr/include/c++/4.6/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 168 "/usr/include/c++/4.6/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

       ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
    ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 478 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 526 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 559 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 599 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 705 "/usr/include/c++/4.6/bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 734 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 747 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 767 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 788 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 817 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 834 "/usr/include/c++/4.6/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 855 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 908 "/usr/include/c++/4.6/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 964 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 979 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 1011 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 1033 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1089 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1105 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1117 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1133 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1145 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1173 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1188 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1219 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1241 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1264 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1282 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1305 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1322 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1346 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1362 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1382 "/usr/include/c++/4.6/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1401 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1423 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1447 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1466 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1489 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1507 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1525 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1546 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1567 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1589 "/usr/include/c++/4.6/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                            ;
   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1664 "/usr/include/c++/4.6/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1745 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1755 "/usr/include/c++/4.6/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1765 "/usr/include/c++/4.6/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1797 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1810 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1824 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1841 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1854 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1869 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1882 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1899 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1912 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1927 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1940 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1959 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1973 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1988 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2001 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2020 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2034 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2049 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2063 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2080 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2093 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2109 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2122 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2139 "/usr/include/c++/4.6/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2154 "/usr/include/c++/4.6/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2172 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2202 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2226 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2244 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2267 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2292 "/usr/include/c++/4.6/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2304 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2425 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2471 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2508 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2545 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2582 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2619 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2656 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2673 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2691 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2714 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2732 "/usr/include/c++/4.6/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}
# 55 "/usr/include/c++/4.6/string" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/4.6/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 242 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {
      
                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 579 "/usr/include/c++/4.6/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 56 "/usr/include/c++/4.6/string" 2 3
# 43 "/usr/include/c++/4.6/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 100 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 119 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale() throw();
# 128 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 138 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 153 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 166 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 178 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 192 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 207 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 226 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 254 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 270 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 305 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 339 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 370 "/usr/include/c++/4.6/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 437 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 583 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 600 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 617 "/usr/include/c++/4.6/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 644 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 658 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 675 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 694 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 708 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 737 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 753 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 766 "/usr/include/c++/4.6/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/4.6/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/4.6/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/4.6/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 824 "/usr/include/c++/4.6/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/4.6/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 201 "/usr/include/c++/4.6/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 257 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 332 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 363 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 395 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 421 "/usr/include/c++/4.6/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 438 "/usr/include/c++/4.6/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 450 "/usr/include/c++/4.6/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 563 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 579 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 596 "/usr/include/c++/4.6/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 622 "/usr/include/c++/4.6/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 673 "/usr/include/c++/4.6/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 685 "/usr/include/c++/4.6/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 696 "/usr/include/c++/4.6/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 707 "/usr/include/c++/4.6/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 726 "/usr/include/c++/4.6/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 742 "/usr/include/c++/4.6/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 763 "/usr/include/c++/4.6/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 780 "/usr/include/c++/4.6/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 44 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/streambuf" 1 3
# 37 "/usr/include/c++/4.6/streambuf" 3
       
# 38 "/usr/include/c++/4.6/streambuf" 3
# 46 "/usr/include/c++/4.6/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 116 "/usr/include/c++/4.6/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 182 "/usr/include/c++/4.6/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 206 "/usr/include/c++/4.6/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 223 "/usr/include/c++/4.6/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 236 "/usr/include/c++/4.6/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 263 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 277 "/usr/include/c++/4.6/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 295 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 317 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 336 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 351 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 376 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 403 "/usr/include/c++/4.6/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 429 "/usr/include/c++/4.6/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 443 "/usr/include/c++/4.6/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 461 "/usr/include/c++/4.6/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 477 "/usr/include/c++/4.6/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 488 "/usr/include/c++/4.6/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 508 "/usr/include/c++/4.6/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 524 "/usr/include/c++/4.6/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 534 "/usr/include/c++/4.6/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 555 "/usr/include/c++/4.6/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 570 "/usr/include/c++/4.6/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 581 "/usr/include/c++/4.6/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 593 "/usr/include/c++/4.6/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 606 "/usr/include/c++/4.6/streambuf" 3
      virtual int
      sync() { return 0; }
# 628 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 644 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 666 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 679 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 703 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 721 "/usr/include/c++/4.6/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 747 "/usr/include/c++/4.6/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 762 "/usr/include/c++/4.6/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}

# 1 "/usr/include/c++/4.6/bits/streambuf.tcc" 1 3
# 38 "/usr/include/c++/4.6/bits/streambuf.tcc" 3
       
# 39 "/usr/include/c++/4.6/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 809 "/usr/include/c++/4.6/streambuf" 2 3
# 45 "/usr/include/c++/4.6/ios" 2 3
# 1 "/usr/include/c++/4.6/bits/basic_ios.h" 1 3
# 35 "/usr/include/c++/4.6/bits/basic_ios.h" 3
       
# 36 "/usr/include/c++/4.6/bits/basic_ios.h" 3



# 1 "/usr/include/c++/4.6/bits/locale_facets.h" 1 3
# 39 "/usr/include/c++/4.6/bits/locale_facets.h" 3
       
# 40 "/usr/include/c++/4.6/bits/locale_facets.h" 3

# 1 "/usr/include/c++/4.6/cwctype" 1 3
# 41 "/usr/include/c++/4.6/cwctype" 3
       
# 42 "/usr/include/c++/4.6/cwctype" 3
# 52 "/usr/include/c++/4.6/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 34 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 35 "/usr/include/wctype.h" 2 3 4
# 50 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 72 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 172 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (__const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef __const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 214 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (__const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (__const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (__const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 53 "/usr/include/c++/4.6/cwctype" 2 3
# 82 "/usr/include/c++/4.6/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 42 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.6/cctype" 1 3
# 41 "/usr/include/c++/4.6/cctype" 3
       
# 42 "/usr/include/c++/4.6/cctype" 3
# 43 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/ctype_base.h" 1 3
# 37 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 44 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 1 3
# 35 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3
       
# 36 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 51 "/usr/include/c++/4.6/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 51 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 144 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 162 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 179 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 195 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 211 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 225 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 240 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 254 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 269 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 286 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 305 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 324 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 346 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 371 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 390 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 409 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 428 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 446 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 463 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 479 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 496 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 515 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 536 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 558 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 582 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 605 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 674 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 711 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 724 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 737 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 752 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 766 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 780 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 795 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 812 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 828 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 845 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 865 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 892 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 923 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 956 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1005 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1022 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1038 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1055 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1075 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1098 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1124 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1150 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1175 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1208 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1219 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1243 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1262 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1280 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1298 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1315 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1332 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1348 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1365 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1385 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1407 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1430 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1456 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1513 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1641 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1679 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1693 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1707 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1720 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1751 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1764 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1777 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1794 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1806 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1819 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1832 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1845 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1915 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1936 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1962 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1998 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2057 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2099 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2170 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2235 "/usr/include/c++/4.6/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2253 "/usr/include/c++/4.6/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2274 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2292 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2334 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2397 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2422 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2470 "/usr/include/c++/4.6/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/4.6/bits/locale_facets.tcc" 1 3
# 35 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
       
# 36 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 138 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 732 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 968 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1029 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1154 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1191 "/usr/include/c++/4.6/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2609 "/usr/include/c++/4.6/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/4.6/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 63 "/usr/include/c++/4.6/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 128 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 139 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 192 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 213 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 248 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 286 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 298 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 338 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 352 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 381 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 401 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 421 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 440 "/usr/include/c++/4.6/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/4.6/bits/basic_ios.tcc" 1 3
# 34 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3
       
# 35 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 147 "/usr/include/c++/4.6/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 474 "/usr/include/c++/4.6/bits/basic_ios.h" 2 3
# 46 "/usr/include/c++/4.6/ios" 2 3
# 41 "/usr/include/c++/4.6/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/4.6/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 109 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 166 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 251 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 284 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 312 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 325 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      flush();
# 336 "/usr/include/c++/4.6/ostream" 3
      pos_type
      tellp();
# 347 "/usr/include/c++/4.6/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 359 "/usr/include/c++/4.6/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 378 "/usr/include/c++/4.6/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 397 "/usr/include/c++/4.6/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 407 "/usr/include/c++/4.6/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 428 "/usr/include/c++/4.6/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 449 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 491 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 541 "/usr/include/c++/4.6/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 585 "/usr/include/c++/4.6/ostream" 3

}

# 1 "/usr/include/c++/4.6/bits/ostream.tcc" 1 3
# 39 "/usr/include/c++/4.6/bits/ostream.tcc" 3
       
# 40 "/usr/include/c++/4.6/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 589 "/usr/include/c++/4.6/ostream" 2 3
# 41 "/usr/include/c++/4.6/iostream" 2 3
# 1 "/usr/include/c++/4.6/istream" 1 3
# 38 "/usr/include/c++/4.6/istream" 3
       
# 39 "/usr/include/c++/4.6/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 92 "/usr/include/c++/4.6/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 121 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 168 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 240 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 250 "/usr/include/c++/4.6/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 282 "/usr/include/c++/4.6/istream" 3
      int_type
      get();
# 296 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type& __c);
# 323 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 334 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 357 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 367 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 396 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 407 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 431 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 448 "/usr/include/c++/4.6/istream" 3
      int_type
      peek();
# 466 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 485 "/usr/include/c++/4.6/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 502 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      putback(char_type __c);
# 518 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      unget();
# 536 "/usr/include/c++/4.6/istream" 3
      int
      sync();
# 551 "/usr/include/c++/4.6/istream" 3
      pos_type
      tellg();
# 566 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      seekg(pos_type);
# 582 "/usr/include/c++/4.6/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 637 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 673 "/usr/include/c++/4.6/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 686 "/usr/include/c++/4.6/istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 703 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 745 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 773 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 834 "/usr/include/c++/4.6/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 856 "/usr/include/c++/4.6/istream" 3

}

# 1 "/usr/include/c++/4.6/bits/istream.tcc" 1 3
# 39 "/usr/include/c++/4.6/bits/istream.tcc" 3
       
# 40 "/usr/include/c++/4.6/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 515 "/usr/include/c++/4.6/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 860 "/usr/include/c++/4.6/istream" 2 3
# 42 "/usr/include/c++/4.6/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/4.6/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 36 "/usr/local/include/vtk-5.10/vtkIOStream.h" 2
# 1 "/usr/include/c++/4.6/fstream" 1 3
# 38 "/usr/include/c++/4.6/fstream" 3
       
# 39 "/usr/include/c++/4.6/fstream" 3



# 1 "/usr/include/c++/4.6/bits/codecvt.h" 1 3
# 40 "/usr/include/c++/4.6/bits/codecvt.h" 3
       
# 41 "/usr/include/c++/4.6/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 68 "/usr/include/c++/4.6/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 116 "/usr/include/c++/4.6/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 155 "/usr/include/c++/4.6/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 196 "/usr/include/c++/4.6/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 237 "/usr/include/c++/4.6/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 276 "/usr/include/c++/4.6/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 43 "/usr/include/c++/4.6/fstream" 2 3
# 1 "/usr/include/c++/4.6/cstdio" 1 3
# 41 "/usr/include/c++/4.6/cstdio" 3
       
# 42 "/usr/include/c++/4.6/cstdio" 3
# 92 "/usr/include/c++/4.6/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 148 "/usr/include/c++/4.6/cstdio" 3
namespace __gnu_cxx
{
# 166 "/usr/include/c++/4.6/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/4.6/fstream" 2 3
# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/basic_file.h" 1 3
# 38 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/basic_file.h" 3
       
# 39 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/basic_file.h" 3


# 1 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++io.h" 1 3
# 36 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++io.h" 3
# 1 "/usr/include/c++/4.6/cstdio" 1 3
# 41 "/usr/include/c++/4.6/cstdio" 3
       
# 42 "/usr/include/c++/4.6/cstdio" 3
# 37 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 42 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 45 "/usr/include/c++/4.6/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/4.6/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 130 "/usr/include/c++/4.6/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 266 "/usr/include/c++/4.6/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 293 "/usr/include/c++/4.6/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 325 "/usr/include/c++/4.6/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 345 "/usr/include/c++/4.6/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 391 "/usr/include/c++/4.6/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 419 "/usr/include/c++/4.6/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 446 "/usr/include/c++/4.6/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 459 "/usr/include/c++/4.6/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 491 "/usr/include/c++/4.6/fstream" 3
      ~basic_ifstream()
      { }
# 501 "/usr/include/c++/4.6/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 530 "/usr/include/c++/4.6/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 568 "/usr/include/c++/4.6/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 587 "/usr/include/c++/4.6/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 614 "/usr/include/c++/4.6/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 628 "/usr/include/c++/4.6/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 662 "/usr/include/c++/4.6/fstream" 3
      ~basic_ofstream()
      { }
# 672 "/usr/include/c++/4.6/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 701 "/usr/include/c++/4.6/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 741 "/usr/include/c++/4.6/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 760 "/usr/include/c++/4.6/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 788 "/usr/include/c++/4.6/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 800 "/usr/include/c++/4.6/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 831 "/usr/include/c++/4.6/fstream" 3
      ~basic_fstream()
      { }
# 841 "/usr/include/c++/4.6/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 870 "/usr/include/c++/4.6/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 910 "/usr/include/c++/4.6/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}

# 1 "/usr/include/c++/4.6/bits/fstream.tcc" 1 3
# 39 "/usr/include/c++/4.6/bits/fstream.tcc" 3
       
# 40 "/usr/include/c++/4.6/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             );
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                                );
         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 702 "/usr/include/c++/4.6/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 922 "/usr/include/c++/4.6/fstream" 2 3
# 37 "/usr/local/include/vtk-5.10/vtkIOStream.h" 2
# 1 "/usr/include/c++/4.6/iomanip" 1 3
# 38 "/usr/include/c++/4.6/iomanip" 3
       
# 39 "/usr/include/c++/4.6/iomanip" 3
# 48 "/usr/include/c++/4.6/iomanip" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  struct _Resetiosflags { ios_base::fmtflags _M_mask; };
# 64 "/usr/include/c++/4.6/iomanip" 3
  inline _Resetiosflags
  resetiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)
    {
      __is.setf(ios_base::fmtflags(0), __f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
    {
      __os.setf(ios_base::fmtflags(0), __f._M_mask);
      return __os;
    }


  struct _Setiosflags { ios_base::fmtflags _M_mask; };
# 94 "/usr/include/c++/4.6/iomanip" 3
  inline _Setiosflags
  setiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)
    {
      __is.setf(__f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
    {
      __os.setf(__f._M_mask);
      return __os;
    }


  struct _Setbase { int _M_base; };
# 125 "/usr/include/c++/4.6/iomanip" 3
  inline _Setbase
  setbase(int __base)
  { return { __base }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)
    {
      __is.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
    {
      __os.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __os;
    }


  template<typename _CharT>
    struct _Setfill { _CharT _M_c; };
# 162 "/usr/include/c++/4.6/iomanip" 3
  template<typename _CharT>
    inline _Setfill<_CharT>
    setfill(_CharT __c)
    { return { __c }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)
    {
      __is.fill(__f._M_c);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
    {
      __os.fill(__f._M_c);
      return __os;
    }


  struct _Setprecision { int _M_n; };
# 193 "/usr/include/c++/4.6/iomanip" 3
  inline _Setprecision
  setprecision(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)
    {
      __is.precision(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
    {
      __os.precision(__f._M_n);
      return __os;
    }


  struct _Setw { int _M_n; };
# 223 "/usr/include/c++/4.6/iomanip" 3
  inline _Setw
  setw(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)
    {
      __is.width(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
    {
      __os.width(__f._M_n);
      return __os;
    }
# 320 "/usr/include/c++/4.6/iomanip" 3
  extern template ostream& operator<<(ostream&, _Setfill<char>);
  extern template ostream& operator<<(ostream&, _Setiosflags);
  extern template ostream& operator<<(ostream&, _Resetiosflags);
  extern template ostream& operator<<(ostream&, _Setbase);
  extern template ostream& operator<<(ostream&, _Setprecision);
  extern template ostream& operator<<(ostream&, _Setw);
  extern template istream& operator>>(istream&, _Setfill<char>);
  extern template istream& operator>>(istream&, _Setiosflags);
  extern template istream& operator>>(istream&, _Resetiosflags);
  extern template istream& operator>>(istream&, _Setbase);
  extern template istream& operator>>(istream&, _Setprecision);
  extern template istream& operator>>(istream&, _Setw);


  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);
  extern template wostream& operator<<(wostream&, _Setiosflags);
  extern template wostream& operator<<(wostream&, _Resetiosflags);
  extern template wostream& operator<<(wostream&, _Setbase);
  extern template wostream& operator<<(wostream&, _Setprecision);
  extern template wostream& operator<<(wostream&, _Setw);
  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);
  extern template wistream& operator>>(wistream&, _Setiosflags);
  extern template wistream& operator>>(wistream&, _Resetiosflags);
  extern template wistream& operator>>(wistream&, _Setbase);
  extern template wistream& operator>>(wistream&, _Setprecision);
  extern template wistream& operator>>(wistream&, _Setw);




}
# 38 "/usr/local/include/vtk-5.10/vtkIOStream.h" 2



using std::dec;
using std::hex;
using std::setw;
using std::setfill;
using std::setprecision;
using std::cerr;
using std::cout;
using std::cin;
using std::ios;
using std::endl;
using std::ends;
using std::ostream;
using std::istream;
using std::ofstream;
using std::ifstream;
using std::fstream;
# 108 "/usr/local/include/vtk-5.10/vtkIOStream.h"
# 1 "/usr/include/c++/4.6/backward/strstream" 1 3
# 52 "/usr/include/c++/4.6/backward/strstream" 3
# 1 "/usr/include/c++/4.6/backward/backward_warning.h" 1 3
# 53 "/usr/include/c++/4.6/backward/strstream" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{




  class strstreambuf : public basic_streambuf<char, char_traits<char> >
  {
  public:

    typedef char_traits<char> _Traits;
    typedef basic_streambuf<char, _Traits> _Base;

  public:

    explicit strstreambuf(streamsize __initial_capacity = 0);
    strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));

    strstreambuf(char* __get, streamsize __n, char* __put = 0) throw ();
    strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0) throw ();
    strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0) throw ();

    strstreambuf(const char* __get, streamsize __n) throw ();
    strstreambuf(const signed char* __get, streamsize __n) throw ();
    strstreambuf(const unsigned char* __get, streamsize __n) throw ();

    virtual ~strstreambuf();

  public:
    void freeze(bool = true) throw ();
    char* str() throw ();
    __attribute__ ((__pure__)) int pcount() const throw ();

  protected:
    virtual int_type overflow(int_type __c = _Traits::eof());
    virtual int_type pbackfail(int_type __c = _Traits::eof());
    virtual int_type underflow();
    virtual _Base* setbuf(char* __buf, streamsize __n);
    virtual pos_type seekoff(off_type __off, ios_base::seekdir __dir,
        ios_base::openmode __mode
        = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode
        = ios_base::in | ios_base::out);

  private:
    strstreambuf&
    operator=(const strstreambuf&);

    strstreambuf(const strstreambuf&);


    char* _M_alloc(size_t);
    void _M_free(char*);


    void _M_setup(char* __get, char* __put, streamsize __n) throw ();

  private:

    void* (*_M_alloc_fun)(size_t);
    void (*_M_free_fun)(void*);

    bool _M_dynamic : 1;
    bool _M_frozen : 1;
    bool _M_constant : 1;
  };


  class istrstream : public basic_istream<char>
  {
  public:
    explicit istrstream(char*);
    explicit istrstream(const char*);
    istrstream(char* , streamsize);
    istrstream(const char*, streamsize);
    virtual ~istrstream();

    __attribute__ ((__const__)) strstreambuf* rdbuf() const throw ();
    char* str() throw ();

  private:
    strstreambuf _M_buf;
  };


  class ostrstream : public basic_ostream<char>
  {
  public:
    ostrstream();
    ostrstream(char*, int, ios_base::openmode = ios_base::out);
    virtual ~ostrstream();

    __attribute__ ((__const__)) strstreambuf* rdbuf() const throw ();
    void freeze(bool = true) throw();
    char* str() throw ();
    __attribute__ ((__pure__)) int pcount() const throw ();

  private:
    strstreambuf _M_buf;
  };


  class strstream : public basic_iostream<char>
  {
  public:
    typedef char char_type;
    typedef char_traits<char>::int_type int_type;
    typedef char_traits<char>::pos_type pos_type;
    typedef char_traits<char>::off_type off_type;

    strstream();
    strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);
    virtual ~strstream();

    __attribute__ ((__const__)) strstreambuf* rdbuf() const throw ();
    void freeze(bool = true) throw ();
    __attribute__ ((__pure__)) int pcount() const throw ();
    char* str() throw ();

  private:
    strstreambuf _M_buf;
  };


}
# 109 "/usr/local/include/vtk-5.10/vtkIOStream.h" 2

using std::ostrstream;
using std::istrstream;
using std::strstream;
# 41 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2



# 1 "/usr/local/include/vtk-5.10/vtkType.h" 1
# 158 "/usr/local/include/vtk-5.10/vtkType.h"
typedef unsigned char vtkTypeUInt8;
typedef signed char vtkTypeInt8;
# 172 "/usr/local/include/vtk-5.10/vtkType.h"
typedef unsigned short vtkTypeUInt16;
typedef signed short vtkTypeInt16;
# 187 "/usr/local/include/vtk-5.10/vtkType.h"
typedef unsigned int vtkTypeUInt32;
typedef signed int vtkTypeInt32;
# 202 "/usr/local/include/vtk-5.10/vtkType.h"
typedef unsigned long long vtkTypeUInt64;
typedef signed long long vtkTypeInt64;
# 222 "/usr/local/include/vtk-5.10/vtkType.h"
typedef float vtkTypeFloat32;







typedef double vtkTypeFloat64;
# 245 "/usr/local/include/vtk-5.10/vtkType.h"
typedef long long vtkIdType;
# 266 "/usr/local/include/vtk-5.10/vtkType.h"
typedef double vtkFloatingPointType;
# 45 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2





# 1 "/usr/local/include/vtk-5.10/vtkOStreamWrapper.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkOStreamWrapper.h"
class vtkIndent;
class vtkObjectBase;
class vtkLargeInteger;
class vtkSmartPointerBase;
class vtkStdString;

class __attribute__ ((visibility("default"))) vtkOStreamWrapper
{
public:



  vtkOStreamWrapper(ostream& os);
  vtkOStreamWrapper(vtkOStreamWrapper& r);


  virtual ~vtkOStreamWrapper();



  struct EndlType {};



  vtkOStreamWrapper& operator << (const EndlType&);
  vtkOStreamWrapper& operator << (const vtkIndent&);
  vtkOStreamWrapper& operator << (vtkObjectBase&);
  vtkOStreamWrapper& operator << (const vtkLargeInteger&);
  vtkOStreamWrapper& operator << (const vtkSmartPointerBase&);
  vtkOStreamWrapper& operator << (const vtkStdString&);
  vtkOStreamWrapper& operator << (ostream&);
  vtkOStreamWrapper& operator << (const char*);
  vtkOStreamWrapper& operator << (void*);
  vtkOStreamWrapper& operator << (char);
  vtkOStreamWrapper& operator << (short);
  vtkOStreamWrapper& operator << (int);
  vtkOStreamWrapper& operator << (long);
  vtkOStreamWrapper& operator << (unsigned char);
  vtkOStreamWrapper& operator << (unsigned short);
  vtkOStreamWrapper& operator << (unsigned int);
  vtkOStreamWrapper& operator << (unsigned long);
  vtkOStreamWrapper& operator << (float);
  vtkOStreamWrapper& operator << (double);

  vtkOStreamWrapper& operator << (long long);
  vtkOStreamWrapper& operator << (unsigned long long);
# 87 "/usr/local/include/vtk-5.10/vtkOStreamWrapper.h"
  vtkOStreamWrapper& operator << (bool);
# 101 "/usr/local/include/vtk-5.10/vtkOStreamWrapper.h"
  vtkOStreamWrapper& operator << (void (*)(void*));
  vtkOStreamWrapper& operator << (void* (*)(void*));
  vtkOStreamWrapper& operator << (int (*)(void*));
  vtkOStreamWrapper& operator << (int* (*)(void*));
  vtkOStreamWrapper& operator << (float* (*)(void*));
  vtkOStreamWrapper& operator << (const char* (*)(void*));
  vtkOStreamWrapper& operator << (void (*)(void*, int*));



  vtkOStreamWrapper& write(const char*, unsigned long);



  ostream& GetOStream();





  operator ostream&();



  operator int();



  void flush();




  static void UseEndl(const EndlType&) {}
protected:

  ostream& ostr;
private:
  vtkOStreamWrapper& operator=(const vtkOStreamWrapper& r);
};
# 51 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkOStrStreamWrapper.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkOStrStreamWrapper.h"
class __attribute__ ((visibility("default"))) vtkOStrStreamWrapper: public vtkOStreamWrapper
{
public:


  vtkOStrStreamWrapper();



  ~vtkOStrStreamWrapper();





  char* str();




  vtkOStrStreamWrapper* rdbuf();




  void freeze();
  void freeze(int);
protected:

  char* Result;


  int Frozen;
private:
  vtkOStrStreamWrapper(const vtkOStrStreamWrapper& r);
  vtkOStrStreamWrapper& operator=(const vtkOStrStreamWrapper&);
};
# 52 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2





# 1 "/usr/include/string.h" 1 3 4
# 29 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));

# 165 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4
}
# 58 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 2
# 25 "/usr/local/include/vtk-5.10/vtkIndent.h" 2

class vtkIndent;
__attribute__ ((visibility("default"))) ostream& operator<<(ostream& os, const vtkIndent& o);

class __attribute__ ((visibility("default"))) vtkIndent
{
public:
  void Delete() {delete this;};
  explicit vtkIndent(int ind=0) {this->Indent=ind;};
  static vtkIndent *New();




  vtkIndent GetNextIndent();




  friend __attribute__ ((visibility("default"))) ostream& operator<<(ostream& os, const vtkIndent& o);


protected:
  int Indent;

};
# 44 "/usr/local/include/vtk-5.10/vtkObjectBase.h" 2


class vtkGarbageCollector;
class vtkGarbageCollectorToObjectBaseFriendship;
class vtkWeakPointerBase;
class vtkWeakPointerBaseToObjectBaseFriendship;

class __attribute__ ((visibility("default"))) vtkObjectBase
{
  virtual const char* GetClassNameInternal() const { return "vtkObjectBase"; }
public:
# 66 "/usr/local/include/vtk-5.10/vtkObjectBase.h"
  const char* GetClassName() const;
# 82 "/usr/local/include/vtk-5.10/vtkObjectBase.h"
  static int IsTypeOf(const char *name);





  virtual int IsA(const char *name);





  virtual void Delete();







  virtual void FastDelete();




  static vtkObjectBase *New()
    {return new vtkObjectBase;}
# 119 "/usr/local/include/vtk-5.10/vtkObjectBase.h"
  void Print(ostream& os);






  virtual void PrintSelf(ostream& os, vtkIndent indent);
  virtual void PrintHeader(ostream& os, vtkIndent indent);
  virtual void PrintTrailer(ostream& os, vtkIndent indent);



  virtual void Register(vtkObjectBase* o);





  virtual void UnRegister(vtkObjectBase* o);



  int GetReferenceCount()
    {return this->ReferenceCount;}



  void SetReferenceCount(int);
# 156 "/usr/local/include/vtk-5.10/vtkObjectBase.h"
  void PrintRevisions(ostream& os);

protected:
  vtkObjectBase();
  virtual ~vtkObjectBase();

  virtual void CollectRevisions(ostream& os);

  int ReferenceCount;
  vtkWeakPointerBase **WeakPointers;




  virtual void RegisterInternal(vtkObjectBase*, int check);
  virtual void UnRegisterInternal(vtkObjectBase*, int check);


  virtual void ReportReferences(vtkGarbageCollector*);

private:

  friend __attribute__ ((visibility("default"))) ostream& operator<<(ostream& os, vtkObjectBase& o);
  friend class vtkGarbageCollectorToObjectBaseFriendship;
  friend class vtkWeakPointerBaseToObjectBaseFriendship;

protected:

  vtkObjectBase(const vtkObjectBase&) {}
  void operator=(const vtkObjectBase&) {}

};
# 42 "/usr/local/include/vtk-5.10/vtkObject.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkSetGet.h" 1
# 428 "/usr/local/include/vtk-5.10/vtkSetGet.h"
extern __attribute__ ((visibility("default"))) void vtkOutputWindowDisplayText(const char*);
extern __attribute__ ((visibility("default"))) void vtkOutputWindowDisplayErrorText(const char*);
extern __attribute__ ((visibility("default"))) void vtkOutputWindowDisplayWarningText(const char*);
extern __attribute__ ((visibility("default"))) void vtkOutputWindowDisplayGenericWarningText(const char*);
extern __attribute__ ((visibility("default"))) void vtkOutputWindowDisplayDebugText(const char*);
# 43 "/usr/local/include/vtk-5.10/vtkObject.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkTimeStamp.h" 1
# 28 "/usr/local/include/vtk-5.10/vtkTimeStamp.h"
class __attribute__ ((visibility("default"))) vtkTimeStamp
{
public:
  vtkTimeStamp() {this->ModifiedTime = 0;};
  static vtkTimeStamp *New();
  void Delete() {delete this;};
# 44 "/usr/local/include/vtk-5.10/vtkTimeStamp.h"
  void Modified();



  unsigned long GetMTime() const {return this->ModifiedTime;};



  bool operator>(vtkTimeStamp& ts) {
    return (this->ModifiedTime > ts.ModifiedTime);};
  bool operator<(vtkTimeStamp& ts) {
    return (this->ModifiedTime < ts.ModifiedTime);};



  operator unsigned long() const {return this->ModifiedTime;};

private:
  unsigned long ModifiedTime;
};
# 44 "/usr/local/include/vtk-5.10/vtkObject.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkWeakPointerBase.h" 1
# 27 "/usr/local/include/vtk-5.10/vtkWeakPointerBase.h"
class vtkObjectBaseToWeakPointerBaseFriendship;

class __attribute__ ((visibility("default"))) vtkWeakPointerBase
{
public:


  vtkWeakPointerBase() : Object(0) {};



  vtkWeakPointerBase(vtkObjectBase* r);



  vtkWeakPointerBase(const vtkWeakPointerBase& r);



  ~vtkWeakPointerBase();




  vtkWeakPointerBase& operator=(vtkObjectBase* r);
  vtkWeakPointerBase& operator=(const vtkWeakPointerBase& r);



  vtkObjectBase* GetPointer() const
    {


    return this->Object;
    }

private:
  friend class vtkObjectBaseToWeakPointerBaseFriendship;

protected:


  class NoReference {};
  vtkWeakPointerBase(vtkObjectBase* r, const NoReference&);


  vtkObjectBase* Object;
};
# 96 "/usr/local/include/vtk-5.10/vtkWeakPointerBase.h"
inline bool operator == (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) == static_cast<void*>(r.GetPointer())); } inline bool operator == (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) == static_cast<void*>(r.GetPointer())); } inline bool operator == (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) == static_cast<void*>(r)); }
inline bool operator != (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) != static_cast<void*>(r.GetPointer())); } inline bool operator != (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) != static_cast<void*>(r.GetPointer())); } inline bool operator != (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) != static_cast<void*>(r)); }
inline bool operator < (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) < static_cast<void*>(r.GetPointer())); } inline bool operator < (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) < static_cast<void*>(r.GetPointer())); } inline bool operator < (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) < static_cast<void*>(r)); }
inline bool operator <= (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) <= static_cast<void*>(r.GetPointer())); } inline bool operator <= (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) <= static_cast<void*>(r.GetPointer())); } inline bool operator <= (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) <= static_cast<void*>(r)); }
inline bool operator > (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) > static_cast<void*>(r.GetPointer())); } inline bool operator > (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) > static_cast<void*>(r.GetPointer())); } inline bool operator > (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) > static_cast<void*>(r)); }
inline bool operator >= (const vtkWeakPointerBase& l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l.GetPointer()) >= static_cast<void*>(r.GetPointer())); } inline bool operator >= (vtkObjectBase* l, const vtkWeakPointerBase& r) { return (static_cast<void*>(l) >= static_cast<void*>(r.GetPointer())); } inline bool operator >= (const vtkWeakPointerBase& l, vtkObjectBase* r) { return (static_cast<void*>(l.GetPointer()) >= static_cast<void*>(r)); }





__attribute__ ((visibility("default"))) ostream& operator << (ostream& os,
                                        const vtkWeakPointerBase& p);
# 45 "/usr/local/include/vtk-5.10/vtkObject.h" 2

class vtkSubjectHelper;
class vtkCommand;

class __attribute__ ((visibility("default"))) vtkObject : public vtkObjectBase
{
public:
  typedef vtkObjectBase Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkObject"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkObject",type) ) { return 1; } return vtkObjectBase::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkObject::IsTypeOf(type); } static vtkObject* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkObject") ) { return static_cast<vtkObject *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkObject::New(); } public: vtkObject *NewInstance() const { return vtkObject::SafeDownCast(this->NewInstanceInternal()); };




  static vtkObject *New();
# 67 "/usr/local/include/vtk-5.10/vtkObject.h"
  virtual void DebugOn();



  virtual void DebugOff();



  unsigned char GetDebug();



  void SetDebug(unsigned char debugFlag);




  static void BreakOnError();






  virtual void Modified();



  virtual unsigned long GetMTime();






  virtual void PrintSelf(ostream& os, vtkIndent indent);




  static void SetGlobalWarningDisplay(int val);
  static void GlobalWarningDisplayOn(){vtkObject::SetGlobalWarningDisplay(1);};
  static void GlobalWarningDisplayOff()
    {vtkObject::SetGlobalWarningDisplay(0);};
  static int GetGlobalWarningDisplay();
# 125 "/usr/local/include/vtk-5.10/vtkObject.h"
  unsigned long AddObserver(unsigned long event, vtkCommand *,
                            float priority=0.0f);
  unsigned long AddObserver(const char *event, vtkCommand *,
                            float priority=0.0f);
  vtkCommand *GetCommand(unsigned long tag);
  void RemoveObserver(vtkCommand*);
  void RemoveObservers(unsigned long event, vtkCommand *);
  void RemoveObservers(const char *event, vtkCommand *);
  int HasObserver(unsigned long event, vtkCommand *);
  int HasObserver(const char *event, vtkCommand *);

  void RemoveObserver(unsigned long tag);
  void RemoveObservers(unsigned long event);
  void RemoveObservers(const char *event);
  void RemoveAllObservers();
  int HasObserver(unsigned long event);
  int HasObserver(const char *event);
# 168 "/usr/local/include/vtk-5.10/vtkObject.h"
  template <class U, class T>
  unsigned long AddObserver(unsigned long event,
    U observer, void (T::*callback)(), float priority=0.0f)
    {
    vtkClassMemberCallback<T> *callable =
      new vtkClassMemberCallback<T>(observer, callback);


    return this->AddTemplatedObserver(event, callable, priority);
    }
  template <class U, class T>
  unsigned long AddObserver(unsigned long event,
    U observer, void (T::*callback)(vtkObject*, unsigned long, void*),
    float priority=0.0f)
    {
    vtkClassMemberCallback<T> *callable =
      new vtkClassMemberCallback<T>(observer, callback);


    return this->AddTemplatedObserver(event, callable, priority);
    }




  template <class U, class T>
  unsigned long AddObserver(unsigned long event,
    U observer, bool (T::*callback)(vtkObject*, unsigned long, void*),
    float priority=0.0f)
    {
    vtkClassMemberCallback<T> *callable =
      new vtkClassMemberCallback<T>(observer, callback);


    return this->AddTemplatedObserver(event, callable, priority);
    }







  int InvokeEvent(unsigned long event, void *callData);
  int InvokeEvent(const char *event, void *callData);

  int InvokeEvent(unsigned long event) { return this->InvokeEvent(event, __null); };
  int InvokeEvent(const char *event) { return this->InvokeEvent(event, __null); };

protected:
  vtkObject();
  virtual ~vtkObject();


  virtual void RegisterInternal(vtkObjectBase*, int check);
  virtual void UnRegisterInternal(vtkObjectBase*, int check);

  unsigned char Debug;
  vtkTimeStamp MTime;
  vtkSubjectHelper *SubjectHelper;
# 237 "/usr/local/include/vtk-5.10/vtkObject.h"
  void InternalGrabFocus(vtkCommand *mouseEvents, vtkCommand *keypressEvents=__null);
  void InternalReleaseFocus();


private:
  vtkObject(const vtkObject&);
  void operator=(const vtkObject&);







  class vtkClassMemberCallbackBase
    {
  public:


    virtual bool operator()(vtkObject*, unsigned long, void*) = 0;
    virtual ~vtkClassMemberCallbackBase(){}
    };




  template<class T>
    class vtkClassMemberHandlerPointer
      {
    public:
      void operator=(vtkObjectBase *o)
        {


        if ((this->VoidPointer = dynamic_cast<T*>(o)) == 0)
          {

          this->VoidPointer = o;
          }
        this->WeakPointer = o;
        this->UseWeakPointer = true;
        }
      void operator=(void *o)
        {
        this->VoidPointer = o;
        this->WeakPointer = 0;
        this->UseWeakPointer = false;
        }
      T *GetPointer()
        {
        if (this->UseWeakPointer && !this->WeakPointer.GetPointer())
          {
          return 0;
          }
        return static_cast<T*>(this->VoidPointer);
        }
    private:
      vtkWeakPointerBase WeakPointer;
      void *VoidPointer;
      bool UseWeakPointer;
      };



  template <class T>
    class vtkClassMemberCallback : public vtkClassMemberCallbackBase
      {
      vtkClassMemberHandlerPointer<T> Handler;
      void (T::*Method1)();
      void (T::*Method2)(vtkObject*, unsigned long, void*);
      bool (T::*Method3)(vtkObject*, unsigned long, void*);

    public:
      vtkClassMemberCallback(T* handler, void (T::*method)())
        {
        this->Handler = handler;
        this->Method1 = method;
        this->Method2 = __null;
        this->Method3 = __null;
        }

      vtkClassMemberCallback(
        T* handler, void (T::*method)(vtkObject*, unsigned long, void*))
        {
        this->Handler = handler;
        this->Method1 = __null;
        this->Method2 = method;
        this->Method3 = __null;
        }

      vtkClassMemberCallback(
        T* handler, bool (T::*method)(vtkObject*, unsigned long, void*))
        {
        this->Handler = handler;
        this->Method1 = __null;
        this->Method2 = __null;
        this->Method3 = method;
        }
      virtual ~vtkClassMemberCallback() { }


      virtual bool operator()(
        vtkObject* caller, unsigned long event, void* calldata)
        {
        T *handler = this->Handler.GetPointer();
        if (handler)
          {
          if (this->Method1)
            {
            (handler->*this->Method1)();
            }
          else if (this->Method2)
            {
            (handler->*this->Method2)(caller, event, calldata);
            }
          else if (this->Method3)
            {
            return (handler->*this->Method3)(caller, event, calldata);
            }
          }
        return false;
        }
      };



  unsigned long AddTemplatedObserver(
    unsigned long event, vtkClassMemberCallbackBase* callable, float priority);

  friend class vtkObjectCommandInternal;

};
# 45 "/usr/local/include/vtk-5.10/vtkAbstractArray.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkVariant.h" 1
# 35 "/usr/local/include/vtk-5.10/vtkVariant.h"
# 1 "/usr/local/include/vtk-5.10/vtkStdString.h" 1
# 27 "/usr/local/include/vtk-5.10/vtkStdString.h"
class vtkStdString;
__attribute__ ((visibility("default"))) ostream& operator<<(ostream&, const vtkStdString&);
# 37 "/usr/local/include/vtk-5.10/vtkStdString.h"
class vtkStdString : public std::string

{
public:
  typedef std::string StdString;
  typedef StdString::value_type value_type;
  typedef StdString::pointer pointer;
  typedef StdString::reference reference;
  typedef StdString::const_reference const_reference;
  typedef StdString::size_type size_type;
  typedef StdString::difference_type difference_type;
  typedef StdString::iterator iterator;
  typedef StdString::const_iterator const_iterator;
  typedef StdString::reverse_iterator reverse_iterator;
  typedef StdString::const_reverse_iterator const_reverse_iterator;

  vtkStdString(): StdString() {}
  vtkStdString(const value_type* s): StdString(s) {}
  vtkStdString(const value_type* s, size_type n): StdString(s, n) {}
  vtkStdString(const StdString& s, size_type pos=0, size_type n=npos):
    StdString(s, pos, n) {}

  operator const char *() { return this->c_str(); }
};
# 36 "/usr/local/include/vtk-5.10/vtkVariant.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkUnicodeString.h" 1
# 47 "/usr/local/include/vtk-5.10/vtkUnicodeString.h"
# 1 "/usr/local/include/vtk-5.10/vtkSystemIncludes.h" 1
# 48 "/usr/local/include/vtk-5.10/vtkUnicodeString.h" 2

# 1 "/usr/include/c++/4.6/vector" 1 3
# 59 "/usr/include/c++/4.6/vector" 3
       
# 60 "/usr/include/c++/4.6/vector" 3



# 1 "/usr/include/c++/4.6/bits/stl_construct.h" 1 3
# 64 "/usr/include/c++/4.6/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 78 "/usr/include/c++/4.6/bits/stl_construct.h" 3
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }





  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 64 "/usr/include/c++/4.6/vector" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 1 3
# 61 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 652 "/usr/include/c++/4.6/bits/stl_uninitialized.h" 3

}
# 65 "/usr/include/c++/4.6/vector" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_vector.h" 1 3
# 65 "/usr/include/c++/4.6/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 141 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/usr/include/c++/4.6/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 262 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 333 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 411 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 454 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 569 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 628 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 649 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 694 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 801 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      pointer

      data()
      { return std::__addressof(front()); }




      const_pointer

      data() const
      { return std::__addressof(front()); }
# 825 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }
# 856 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 892 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 942 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1006 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1018 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1073 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
# 1229 "/usr/include/c++/4.6/bits/stl_vector.h" 3
      void
      _M_insert_aux(iterator __position, const value_type& __x);







      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/usr/include/c++/4.6/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/usr/include/c++/4.6/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 66 "/usr/include/c++/4.6/vector" 2 3
# 1 "/usr/include/c++/4.6/bits/stl_bvector.h" 1 3
# 62 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 431 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 478 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;





  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 547 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 596 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }







    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 664 "/usr/include/c++/4.6/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }






    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }







    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}
# 67 "/usr/include/c++/4.6/vector" 2 3



# 1 "/usr/include/c++/4.6/bits/vector.tcc" 1 3
# 60 "/usr/include/c++/4.6/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   (this->_M_impl._M_start),
   (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 106 "/usr/include/c++/4.6/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 128 "/usr/include/c++/4.6/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::copy(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 298 "/usr/include/c++/4.6/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      (*(this->_M_impl._M_finish - 1))
             );
   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                  ;

   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       this->_M_impl.construct(__new_start + __elems_before,



                               __x);

       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }
# 519 "/usr/include/c++/4.6/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}
# 71 "/usr/include/c++/4.6/vector" 2 3
# 50 "/usr/local/include/vtk-5.10/vtkUnicodeString.h" 2

class vtkUnicodeString;

typedef vtkTypeUInt32 vtkUnicodeStringValueType;
# 65 "/usr/local/include/vtk-5.10/vtkUnicodeString.h"
class __attribute__ ((visibility("default"))) vtkUnicodeString
{
public:
  typedef vtkUnicodeStringValueType value_type;
  typedef std::string::size_type size_type;

  class __attribute__ ((visibility("default"))) const_iterator
  {
  public:
    typedef std::bidirectional_iterator_tag iterator_category;
    typedef vtkUnicodeStringValueType value_type;
    typedef std::string::difference_type difference_type;
    typedef value_type* pointer;
    typedef value_type& reference;

    const_iterator();

    value_type operator*() const;
    bool operator==(const const_iterator&) const;
    bool operator!=(const const_iterator&) const;
    const_iterator& operator++();
    const_iterator operator++(int);
    const_iterator& operator--();
    const_iterator operator--(int);

  private:
    const_iterator(std::string::const_iterator);
    friend class vtkUnicodeString;
    std::string::const_iterator Position;
  };



  vtkUnicodeString();


  vtkUnicodeString(const vtkUnicodeString&);



  vtkUnicodeString(size_type count, value_type character);


  vtkUnicodeString(const_iterator begin, const_iterator end);



  static bool is_utf8(const char*);
  static bool is_utf8(const std::string&);



  static vtkUnicodeString from_utf8(const char*);

  static vtkUnicodeString from_utf8(const char* begin, const char* end);

  static vtkUnicodeString from_utf8(const std::string&);


  static vtkUnicodeString from_utf16(const vtkTypeUInt16*);



  vtkUnicodeString& operator=(const vtkUnicodeString&);




  const_iterator begin() const;


  const_iterator end() const;




  value_type at(size_type offset) const;



  value_type operator[](size_type offset) const;



  const char* utf8_str() const;



  void utf8_str(std::string& result) const;


  std::vector<vtkTypeUInt16> utf16_str() const;



  void utf16_str(std::vector<vtkTypeUInt16>& result) const;



  size_type byte_count() const;


  size_type character_count() const;


  bool empty() const;



  static const size_type npos;



  vtkUnicodeString& operator+=(value_type);


  vtkUnicodeString& operator+=(const vtkUnicodeString& rhs);



  void push_back(value_type);



  void append(const vtkUnicodeString& value);
  void append(size_type count, value_type character);
  void append(const_iterator begin, const_iterator end);



  void assign(const vtkUnicodeString& value);
  void assign(size_type count, value_type character);
  void assign(const_iterator begin, const_iterator end);



  void clear();
# 210 "/usr/local/include/vtk-5.10/vtkUnicodeString.h"
  vtkUnicodeString fold_case() const;







  int compare(const vtkUnicodeString&) const;




  vtkUnicodeString substr(size_type offset = 0, size_type count = npos) const;



  void swap(vtkUnicodeString&);

private:
  std::string Storage;
  class back_insert_iterator;
};

__attribute__ ((visibility("default"))) bool operator==(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
__attribute__ ((visibility("default"))) bool operator!=(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
__attribute__ ((visibility("default"))) bool operator<(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
__attribute__ ((visibility("default"))) bool operator<=(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
__attribute__ ((visibility("default"))) bool operator>=(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
__attribute__ ((visibility("default"))) bool operator>(const vtkUnicodeString& lhs, const vtkUnicodeString& rhs);
# 37 "/usr/local/include/vtk-5.10/vtkVariant.h" 2
# 54 "/usr/local/include/vtk-5.10/vtkVariant.h"
class vtkStdString;
class vtkUnicodeString;
class vtkObjectBase;
class vtkAbstractArray;
class vtkVariant;
struct vtkVariantLessThan;


__attribute__ ((visibility("default"))) ostream& operator << ( ostream& os, const vtkVariant& val );


class __attribute__ ((visibility("default"))) vtkVariant
{
public:



  vtkVariant();



  ~vtkVariant();



  vtkVariant(const vtkVariant & other);



  vtkVariant(bool value);



  vtkVariant(char value);



  vtkVariant(unsigned char value);



  vtkVariant(signed char value);



  vtkVariant(short value);



  vtkVariant(unsigned short value);



  vtkVariant(int value);



  vtkVariant(unsigned int value);



  vtkVariant(long value);



  vtkVariant(unsigned long value);
# 133 "/usr/local/include/vtk-5.10/vtkVariant.h"
  vtkVariant(long long value);



  vtkVariant(unsigned long long value);




  vtkVariant(float value);



  vtkVariant(double value);



  vtkVariant(const char* value);



  vtkVariant(vtkStdString value);



  vtkVariant(const vtkUnicodeString& value);



  vtkVariant(vtkObjectBase* value);



  vtkVariant(const vtkVariant &other, unsigned int type);



  const vtkVariant & operator= (const vtkVariant & other);



  bool IsValid() const;



  bool IsString() const;



  bool IsUnicodeString() const;



  bool IsNumeric() const;



  bool IsFloat() const;



  bool IsDouble() const;



  bool IsChar() const;



  bool IsUnsignedChar() const;



  bool IsSignedChar() const;



  bool IsShort() const;



  bool IsUnsignedShort() const;



  bool IsInt() const;



  bool IsUnsignedInt() const;



  bool IsLong() const;



  bool IsUnsignedLong() const;



  bool Is__Int64() const;



  bool IsUnsigned__Int64() const;



  bool IsLongLong() const;



  bool IsUnsignedLongLong() const;



  bool IsVTKObject() const;



  bool IsArray() const;



  unsigned int GetType() const;



  const char* GetTypeAsString() const;



  vtkStdString ToString() const;



  vtkUnicodeString ToUnicodeString() const;
# 280 "/usr/local/include/vtk-5.10/vtkVariant.h"
  float ToFloat(bool *valid) const;
  float ToFloat() const {
    return this->ToFloat(0); };
  double ToDouble(bool *valid) const;
  double ToDouble() const {
    return this->ToDouble(0); };
  char ToChar(bool *valid) const;
  char ToChar() const {
    return this->ToChar(0); };
  unsigned char ToUnsignedChar(bool *valid) const;
  unsigned char ToUnsignedChar() const {
    return this->ToUnsignedChar(0); };
  signed char ToSignedChar(bool *valid) const;
  signed char ToSignedChar() const {
    return this->ToSignedChar(0); };
  short ToShort(bool *valid) const;
  short ToShort() const {
    return this->ToShort(0); };
  unsigned short ToUnsignedShort(bool *valid) const;
  unsigned short ToUnsignedShort() const {
    return this->ToUnsignedShort(0); };
  int ToInt(bool *valid) const;
  int ToInt() const {
    return this->ToInt(0); };
  unsigned int ToUnsignedInt(bool *valid) const;
  unsigned int ToUnsignedInt() const {
    return this->ToUnsignedInt(0); };
  long ToLong(bool *valid) const;
  long ToLong() const {
    return this->ToLong(0); };
  unsigned long ToUnsignedLong(bool *valid) const;
  unsigned long ToUnsignedLong() const {
    return this->ToUnsignedLong(0); };
# 322 "/usr/local/include/vtk-5.10/vtkVariant.h"
  long long ToLongLong(bool *valid) const;
  long long ToLongLong() const {
    return this->ToLongLong(0); };
  unsigned long long ToUnsignedLongLong(bool *valid) const;
  unsigned long long ToUnsignedLongLong() const {
    return this->ToUnsignedLongLong(0); };

  vtkTypeInt64 ToTypeInt64(bool *valid) const;
  vtkTypeInt64 ToTypeInt64() const {
    return this->ToTypeInt64(0); };
  vtkTypeUInt64 ToTypeUInt64(bool *valid) const;
  vtkTypeUInt64 ToTypeUInt64() const {
    return this->ToTypeUInt64(0); };



  vtkObjectBase* ToVTKObject() const;



  vtkAbstractArray* ToArray() const;


  template <typename T>
  T ToNumeric(bool *valid, T* ) const;
# 358 "/usr/local/include/vtk-5.10/vtkVariant.h"
  bool IsEqual(const vtkVariant& other) const;
# 389 "/usr/local/include/vtk-5.10/vtkVariant.h"
  bool operator==(const vtkVariant &other) const;
  bool operator!=(const vtkVariant &other) const;
  bool operator<(const vtkVariant &other) const;
  bool operator>(const vtkVariant &other) const;
  bool operator<=(const vtkVariant &other) const;
  bool operator>=(const vtkVariant &other) const;


  friend __attribute__ ((visibility("default"))) ostream& operator << ( ostream& os, const vtkVariant& val );


private:

  union
  {
    vtkStdString* String;
    vtkUnicodeString* UnicodeString;
    float Float;
    double Double;
    char Char;
    unsigned char UnsignedChar;
    signed char SignedChar;
    short Short;
    unsigned short UnsignedShort;
    int Int;
    unsigned int UnsignedInt;
    long Long;
    unsigned long UnsignedLong;





    long long LongLong;
    unsigned long long UnsignedLongLong;

    vtkObjectBase* VTKObject;
  } Data;

  unsigned char Valid;
  unsigned char Type;

  friend struct vtkVariantLessThan;
  friend struct vtkVariantEqual;
  friend struct vtkVariantStrictWeakOrder;
  friend struct vtkVariantStrictEquality;

};



# 1 "/usr/local/include/vtk-5.10/vtkVariantInlineOperators.h" 1
# 1 "/usr/include/c++/4.6/climits" 1 3
# 41 "/usr/include/c++/4.6/climits" 3
       
# 42 "/usr/include/c++/4.6/climits" 3

# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 44 "/usr/include/c++/4.6/climits" 2 3
# 2 "/usr/local/include/vtk-5.10/vtkVariantInlineOperators.h" 2







inline bool
IsSigned64Bit(int VariantType)
{
# 23 "/usr/local/include/vtk-5.10/vtkVariantInlineOperators.h"
  return (VariantType == 16);

}

inline bool
IsSigned(int VariantType)
{


  return ((VariantType == 2) ||
          (VariantType == 15) ||
          (VariantType == 4) ||
          (VariantType == 6) ||
          (VariantType == 8) ||
          (VariantType == 12) ||
          IsSigned64Bit(VariantType));
# 48 "/usr/local/include/vtk-5.10/vtkVariantInlineOperators.h"
}



inline bool
IsFloatingPoint(int VariantType)
{
  return ((VariantType == 10) ||
          (VariantType == 11));
}



inline bool
CompareSignedUnsignedEqual(const vtkVariant &SignedVariant,
                           const vtkVariant &UnsignedVariant)
{


  vtkTypeInt64 A = SignedVariant.ToTypeInt64();
  return (A >= 0) && (A == UnsignedVariant.ToTypeInt64());
}



inline bool
CompareSignedUnsignedLessThan(const vtkVariant &SignedVariant,
                              const vtkVariant &UnsignedVariant)
{
  vtkTypeInt64 A = SignedVariant.ToTypeInt64();
  return ((A < 0) ||
          (static_cast<vtkTypeUInt64>(A) < UnsignedVariant.ToTypeUInt64()));
}



inline bool
CompareUnsignedSignedLessThan(const vtkVariant &UnsignedVariant,
                              const vtkVariant &SignedVariant)
{
  vtkTypeInt64 B = SignedVariant.ToTypeInt64();
  return ((B > 0) &&
          (UnsignedVariant.ToTypeUInt64() < static_cast<vtkTypeUInt64>(B)));
}



inline bool
CompareSignedLessThan(const vtkVariant &A,
                      const vtkVariant &B)
{
  return (A.ToTypeInt64() < B.ToTypeInt64());
}



inline bool
CompareUnsignedLessThan(const vtkVariant &A,
                        const vtkVariant &B)
{
  return (A.ToTypeUInt64() < B.ToTypeUInt64());
}



inline bool
vtkVariant::operator==(const vtkVariant &other) const
{


  if (! (this->Valid && other.Valid))
    {
    return (!(this->Valid || other.Valid));
    }



  if ((this->Type == 21) || (other.Type == 21))
    {
    return ((this->Type == 21) &&
            (other.Type == 21) &&
            (this->Data.VTKObject == other.Data.VTKObject));
    }



  if ((this->Type == 13) ||
      (other.Type == 13))
    {
    return (this->ToString() == other.ToString());
    }



  if ((this->Type == 22) ||
      (other.Type == 22))
    {
    return (this->ToUnicodeString() == other.ToUnicodeString());
    }



  if (IsFloatingPoint(this->Type) || IsFloatingPoint(other.Type))
    {
    return (this->ToDouble() == other.ToDouble());
    }





  bool thisSigned = IsSigned(this->Type);
  bool otherSigned = IsSigned(other.Type);

  if (thisSigned ^ otherSigned)
    {
    if (thisSigned)
      {
      return CompareSignedUnsignedEqual(*this, other);
      }
    else
      {
      return CompareSignedUnsignedEqual(other, *this);
      }
    }
  else


    {
    return (this->ToTypeInt64() == other.ToTypeInt64());
    }
}



inline bool
vtkVariant::operator<(const vtkVariant &other) const
{


  if (! (this->Valid && other.Valid))
    {
    return ((!this->Valid) && (other.Valid));
    }



  if ((this->Type == 21) || (other.Type == 21))
    {
    return ((this->Type == 21) &&
            (other.Type == 21) &&
            (this->Data.VTKObject < other.Data.VTKObject));
    }



  if ((this->Type == 13) ||
      (other.Type == 13))
    {
    return (this->ToString() < other.ToString());
    }



  if ((this->Type == 22) ||
      (other.Type == 22))
    {
    return (this->ToUnicodeString() < other.ToUnicodeString());
    }


  if (IsFloatingPoint(this->Type) || IsFloatingPoint(other.Type))
    {
    return (this->ToDouble() < other.ToDouble());
    }





  bool thisSigned = IsSigned(this->Type);
  bool otherSigned = IsSigned(other.Type);

  if (thisSigned ^ otherSigned)
    {
    if (thisSigned)
      {
      return CompareSignedUnsignedLessThan(*this, other);
      }
    else
      {
      return CompareUnsignedSignedLessThan(*this, other);
      }
    }
  else if (thisSigned)
    {
    return CompareSignedLessThan(*this, other);
    }
  else
    {
    return CompareUnsignedLessThan(*this, other);
    }
}
# 261 "/usr/local/include/vtk-5.10/vtkVariantInlineOperators.h"
inline bool
vtkVariant::operator!=(const vtkVariant &other) const
{
  return ! (this->operator==(other));
}

inline bool
vtkVariant::operator>(const vtkVariant &other) const
{
  return (!(this->operator==(other) ||
            this->operator<(other)));
}

inline bool
vtkVariant::operator<=(const vtkVariant &other) const
{
  return (this->operator==(other) ||
          this->operator<(other));
}

inline bool
vtkVariant::operator>=(const vtkVariant &other) const
{
  return (!this->operator<(other));
}
# 441 "/usr/local/include/vtk-5.10/vtkVariant.h" 2







struct __attribute__ ((visibility("default"))) vtkVariantLessThan
{
public:
  bool operator()(const vtkVariant &s1, const vtkVariant &s2) const;
};

struct __attribute__ ((visibility("default"))) vtkVariantEqual
{
public:
  bool operator()(const vtkVariant &s1, const vtkVariant &s2) const;
};

struct __attribute__ ((visibility("default"))) vtkVariantStrictWeakOrder
{
public:
  bool operator()(const vtkVariant& s1, const vtkVariant& s2) const;
};




struct __attribute__ ((visibility("default"))) vtkVariantStrictEquality
{
public:
  bool operator()(const vtkVariant &s1, const vtkVariant &s2) const;
};
# 46 "/usr/local/include/vtk-5.10/vtkAbstractArray.h" 2

class vtkArrayIterator;
class vtkDataArray;
class vtkIdList;
class vtkIdTypeArray;
class vtkInformation;
class vtkInformationIntegerKey;

class __attribute__ ((visibility("default"))) vtkAbstractArray : public vtkObject
{
public:
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkAbstractArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkAbstractArray",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkAbstractArray::IsTypeOf(type); } static vtkAbstractArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkAbstractArray") ) { return static_cast<vtkAbstractArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkAbstractArray::New(); } public: vtkAbstractArray *NewInstance() const { return vtkAbstractArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  virtual int Allocate(vtkIdType sz, vtkIdType ext=1000) = 0;



  virtual void Initialize() = 0;




  virtual int GetDataType() =0;





  virtual int GetDataTypeSize() = 0;
  static int GetDataTypeSize(int type);







  virtual int GetElementComponentSize() = 0;




  virtual void SetNumberOfComponents (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractArray.h" ", line " << 92 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "NumberOfComponents" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->NumberOfComponents != (_arg<1?1:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg))) { this->NumberOfComponents = (_arg<1?1:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg)); this->Modified(); } } virtual int GetNumberOfComponentsMinValue () { return 1; } virtual int GetNumberOfComponentsMaxValue () { return static_cast< int >(~0u >> 1); };
  int GetNumberOfComponents() { return this->NumberOfComponents; }



  void SetComponentName( vtkIdType component, const char *name );




  const char* GetComponentName( vtkIdType component );



  bool HasAComponentName();




  int CopyComponentNames( vtkAbstractArray *da );







  virtual void SetNumberOfTuples(vtkIdType number) = 0;



  vtkIdType GetNumberOfTuples()
    {return (this->MaxId + 1)/this->NumberOfComponents;}






  virtual void SetTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source) = 0;




  virtual void InsertTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source) = 0;





  virtual vtkIdType InsertNextTuple(vtkIdType j, vtkAbstractArray* source) = 0;





  virtual void GetTuples(vtkIdList *ptIds, vtkAbstractArray* output);





  virtual void GetTuples(vtkIdType p1, vtkIdType p2, vtkAbstractArray *output);




  virtual void *GetVoidPointer(vtkIdType id) = 0;
# 168 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual void DeepCopy(vtkAbstractArray* da);







  virtual void InterpolateTuple(vtkIdType i, vtkIdList *ptIndices,
    vtkAbstractArray* source, double* weights) = 0;
# 186 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual void InterpolateTuple(vtkIdType i,
    vtkIdType id1, vtkAbstractArray* source1,
    vtkIdType id2, vtkAbstractArray* source2, double t) =0;





  virtual void Squeeze() = 0;




  virtual int Resize(vtkIdType numTuples) = 0;



  void Reset()
    {this->MaxId = -1;}



  vtkIdType GetSize()
  {return this->Size;}



  vtkIdType GetMaxId()
    {return this->MaxId;}
# 223 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual void SetVoidArray(void *,
                            vtkIdType ,
                            int ) =0;





  virtual void ExportToVoidPointer(void *) {}
# 240 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual unsigned long GetActualMemorySize() = 0;



  virtual void SetName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractArray.h" ", line " << 244 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Name" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->Name == __null && _arg == __null) { return;} if ( this->Name && _arg && (!strcmp(this->Name,_arg))) { return;} if (this->Name) { delete [] this->Name; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->Name = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->Name = __null; } this->Modified(); };
  virtual char* GetName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractArray.h" ", line " << 245 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Name" " of " << (this->Name?this->Name:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Name; };



  virtual const char *GetDataTypeAsString( void )
    { return (((this->GetDataType()) == 0) ? "void" : (((this->GetDataType()) == 1) ? "bit" : (((this->GetDataType()) == 2) ? "char" : (((this->GetDataType()) == 15) ? "signed char" : (((this->GetDataType()) == 3) ? "unsigned char" : (((this->GetDataType()) == 4) ? "short" : (((this->GetDataType()) == 5) ? "unsigned short" : (((this->GetDataType()) == 6) ? "int" : (((this->GetDataType()) == 7) ? "unsigned int" : (((this->GetDataType()) == 8) ? "long" : (((this->GetDataType()) == 9) ? "unsigned long" : (((this->GetDataType()) == 16) ? "long long" : (((this->GetDataType()) == 17) ? "unsigned long long" : (((this->GetDataType()) == 18) ? "__int64" : (((this->GetDataType()) == 19) ? "unsigned __int64" : (((this->GetDataType()) == 10) ? "float" : (((this->GetDataType()) == 11) ? "double" : (((this->GetDataType()) == 12) ? "idtype" : (((this->GetDataType()) == 13) ? "string" : (((this->GetDataType()) == 22) ? "unicode string" : (((this->GetDataType()) == 20) ? "variant" : (((this->GetDataType()) == 21) ? "object" : "Undefined")))))))))))))))))))))); }
# 260 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  static vtkAbstractArray* CreateArray(int dataType);




  virtual int IsNumeric() = 0;




  virtual vtkArrayIterator* NewIterator() = 0;






  virtual vtkIdType GetDataSize()
    {
    return this->GetNumberOfComponents() * this->GetNumberOfTuples();
    }



  virtual vtkIdType LookupValue(vtkVariant value) = 0;
  virtual void LookupValue(vtkVariant value, vtkIdList* ids) = 0;



  virtual vtkVariant GetVariantValue(vtkIdType idx);




  virtual void InsertVariantValue(vtkIdType idx, vtkVariant value);




  virtual void SetVariantValue(vtkIdType idx, vtkVariant value) = 0;
# 308 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual void DataChanged() = 0;





  virtual void ClearLookup() = 0;
# 326 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  vtkInformation* GetInformation();



  bool HasInformation(){ return this->Information!=0; }
# 342 "/usr/local/include/vtk-5.10/vtkAbstractArray.h"
  virtual int CopyInformation(vtkInformation *infoFrom, int deep=1);





  static vtkInformationIntegerKey* GUI_HIDE();

protected:




  virtual void SetInformation( vtkInformation* );


  vtkAbstractArray(vtkIdType numComp=1);
  ~vtkAbstractArray();

  vtkIdType Size;
  vtkIdType MaxId;
  int NumberOfComponents;

  char* Name;

  bool RebuildArray;

  vtkInformation* Information;


  class vtkInternalComponentNames;
  vtkInternalComponentNames* ComponentNames;


private:
  vtkAbstractArray(const vtkAbstractArray&);
  void operator=(const vtkAbstractArray&);
};
# 38 "/usr/local/include/vtk-5.10/vtkDataArray.h" 2

class vtkDoubleArray;
class vtkIdList;
class vtkInformationDoubleVectorKey;
class vtkInformationInformationVectorKey;
class vtkLookupTable;

class __attribute__ ((visibility("default"))) vtkDataArray : public vtkAbstractArray
{
public:
  typedef vtkAbstractArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDataArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDataArray",type) ) { return 1; } return vtkAbstractArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDataArray::IsTypeOf(type); } static vtkDataArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDataArray") ) { return static_cast<vtkDataArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDataArray::New(); } public: vtkDataArray *NewInstance() const { return vtkDataArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);






  virtual int IsNumeric()
    { return 1; }





  virtual int GetElementComponentSize()
    { return this->GetDataTypeSize(); }






  virtual void SetTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source) = 0;






  virtual void InsertTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source) = 0;







  virtual vtkIdType InsertNextTuple(vtkIdType j, vtkAbstractArray* source) = 0;





  virtual void GetTuples(vtkIdList *ptIds, vtkAbstractArray *output);





  virtual void GetTuples(vtkIdType p1, vtkIdType p2, vtkAbstractArray *output);
# 107 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  virtual void InterpolateTuple(vtkIdType i, vtkIdList *ptIndices,
    vtkAbstractArray* source, double* weights);
# 117 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  virtual void InterpolateTuple(vtkIdType i,
    vtkIdType id1, vtkAbstractArray* source1,
    vtkIdType id2, vtkAbstractArray* source2, double t);





  virtual double *GetTuple(vtkIdType i) = 0;





  virtual void GetTuple(vtkIdType i, double * tuple) = 0;





  double GetTuple1(vtkIdType i);
  double* GetTuple2(vtkIdType i);
  double* GetTuple3(vtkIdType i);
  double* GetTuple4(vtkIdType i);
  double* GetTuple9(vtkIdType i);





  virtual void SetTuple(vtkIdType i, const float * tuple) = 0;
  virtual void SetTuple(vtkIdType i, const double * tuple) = 0;





  void SetTuple1(vtkIdType i, double value);
  void SetTuple2(vtkIdType i, double val0, double val1);
  void SetTuple3(vtkIdType i, double val0, double val1, double val2);
  void SetTuple4(vtkIdType i, double val0, double val1, double val2,
                 double val3);
  void SetTuple9(vtkIdType i, double val0, double val1, double val2,
                 double val3, double val4, double val5, double val6,
                 double val7, double val8);




  virtual void InsertTuple(vtkIdType i, const float * tuple) = 0;
  virtual void InsertTuple(vtkIdType i, const double * tuple) = 0;





  void InsertTuple1(vtkIdType i, double value);
  void InsertTuple2(vtkIdType i, double val0, double val1);
  void InsertTuple3(vtkIdType i, double val0, double val1, double val2);
  void InsertTuple4(vtkIdType i, double val0, double val1, double val2,
                    double val3);
  void InsertTuple9(vtkIdType i, double val0, double val1, double val2,
                    double val3, double val4, double val5, double val6,
                    double val7, double val8);





  virtual vtkIdType InsertNextTuple(const float * tuple) = 0;
  virtual vtkIdType InsertNextTuple(const double * tuple) = 0;





  void InsertNextTuple1(double value);
  void InsertNextTuple2(double val0, double val1);
  void InsertNextTuple3(double val0, double val1, double val2);
  void InsertNextTuple4(double val0, double val1, double val2,
                        double val3);
  void InsertNextTuple9(double val0, double val1, double val2,
                        double val3, double val4, double val5, double val6,
                        double val7, double val8);





  virtual void RemoveTuple(vtkIdType id) = 0;
  virtual void RemoveFirstTuple() = 0;
  virtual void RemoveLastTuple() = 0;





  virtual double GetComponent(vtkIdType i, int j);






  virtual void SetComponent(vtkIdType i, int j, double c);




  virtual void InsertComponent(vtkIdType i, int j, double c);
# 235 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  virtual void GetData(vtkIdType tupleMin, vtkIdType tupleMax, int compMin,
                       int compMax, vtkDoubleArray* data);




  virtual void DeepCopy(vtkAbstractArray *aa);
  virtual void DeepCopy(vtkDataArray *da);






  virtual void FillComponent(int j, double c);
# 258 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  virtual void CopyComponent(int j, vtkDataArray *from,
                             int fromComponent);





  virtual void* WriteVoidPointer(vtkIdType id, vtkIdType number) = 0;
# 274 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  virtual unsigned long GetActualMemorySize();




  void CreateDefaultLookupTable();



  void SetLookupTable(vtkLookupTable *lut);
  virtual vtkLookupTable *GetLookupTable () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataArray.h" ", line " << 284 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "LookupTable" " address " << this->LookupTable << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->LookupTable; };







  void GetRange(double range[2], int comp)
    {
    this->ComputeRange(comp);
    memcpy(range, this->Range, 2*sizeof(double));
    }
  double* GetRange(int comp)
    {
    this->ComputeRange(comp);
    return this->Range;
    }



  double* GetRange()
    {
    this->ComputeRange(0);
    return this->Range;
    }
  void GetRange(double range[2])
    {
    this->GetRange(range,0);
    }




  void GetDataTypeRange(double range[2]);
  double GetDataTypeMin();
  double GetDataTypeMax();
  static void GetDataTypeRange(int type, double range[2]);
  static double GetDataTypeMin(int type);
  static double GetDataTypeMax(int type);




  virtual double GetMaxNorm();
# 337 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  static vtkDataArray* CreateDataArray(int dataType);
# 350 "/usr/local/include/vtk-5.10/vtkDataArray.h"
  static vtkInformationInformationVectorKey* PER_COMPONENT();






  static vtkInformationDoubleVectorKey* COMPONENT_RANGE();






  static vtkInformationDoubleVectorKey* L2_NORM_RANGE();







  virtual int CopyInformation(vtkInformation *infoFrom, int deep=1);

protected:




  virtual void ComputeRange(int comp);


  virtual void ComputeScalarRange(int comp);
  virtual void ComputeVectorRange();


  vtkDataArray(vtkIdType numComp=1);
  ~vtkDataArray();

  vtkLookupTable *LookupTable;
  double Range[2];

private:
  double* GetTupleN(vtkIdType i, int n);

private:
  vtkDataArray(const vtkDataArray&);
  void operator=(const vtkDataArray&);
};
# 30 "/usr/local/include/vtk-5.10/vtkSignedCharArray.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h" 1
# 26 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h"
template <class T>
class vtkDataArrayTemplateLookup;

template <class T>
class __attribute__ ((visibility("default"))) vtkDataArrayTemplate: public vtkDataArray
{
public:
  typedef vtkDataArray Superclass;
  void PrintSelf(ostream& os, vtkIndent indent);




  int Allocate(vtkIdType sz, vtkIdType ext=1000);



  void Initialize();



  int GetDataTypeSize() { return static_cast<int>(sizeof(T)); }



  void SetNumberOfTuples(vtkIdType number);






  virtual void SetTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source);




  virtual void InsertTuple(vtkIdType i, vtkIdType j, vtkAbstractArray* source);





  virtual vtkIdType InsertNextTuple(vtkIdType j, vtkAbstractArray* source);




  double* GetTuple(vtkIdType i);



  void GetTuple(vtkIdType i, double* tuple);
  void GetTupleValue(vtkIdType i, T* tuple);



  void SetTuple(vtkIdType i, const float* tuple);
  void SetTuple(vtkIdType i, const double* tuple);
  void SetTupleValue(vtkIdType i, const T* tuple);




  void InsertTuple(vtkIdType i, const float* tuple);
  void InsertTuple(vtkIdType i, const double* tuple);
  void InsertTupleValue(vtkIdType i, const T* tuple);



  vtkIdType InsertNextTuple(const float* tuple);
  vtkIdType InsertNextTuple(const double* tuple);
  vtkIdType InsertNextTupleValue(const T* tuple);




  void GetValueRange(T range[2], int comp) {
    this->ComputeRange(comp);
    range[0] = this->ValueRange[0];
    range[1] = this->ValueRange[1]; }
  T *GetValueRange(int comp) {
    this->ComputeRange(comp);
    return this->ValueRange; }



  void Squeeze() { this->ResizeAndExtend (this->MaxId+1); }



  vtkIdType Capacity() { return this->Size; }






  virtual int Resize(vtkIdType numTuples);



  T GetValue(vtkIdType id) { return this->Array[id]; }




  void SetValue(vtkIdType id, T value)
    { this->Array[id] = value;};





  void SetNumberOfValues(vtkIdType number);



  void InsertValue(vtkIdType id, T f);



  void SetVariantValue(vtkIdType id, vtkVariant value);



  vtkIdType InsertNextValue(T f);





  virtual void RemoveTuple(vtkIdType id);
  virtual void RemoveFirstTuple();
  virtual void RemoveLastTuple();





  double GetComponent(vtkIdType i, int j);






  void SetComponent(vtkIdType i, int j, double c);




  virtual void InsertComponent(vtkIdType i, int j, double c);





  T* WritePointer(vtkIdType id, vtkIdType number);
  virtual void* WriteVoidPointer(vtkIdType id, vtkIdType number)
    { return this->WritePointer(id, number); }




  T* GetPointer(vtkIdType id) { return this->Array + id; }
  virtual void* GetVoidPointer(vtkIdType id) { return this->GetPointer(id); }



  void DeepCopy(vtkDataArray* da);
  void DeepCopy(vtkAbstractArray* aa)
    { this->Superclass::DeepCopy(aa); }


  enum DeleteMethod
  {
    VTK_DATA_ARRAY_FREE,
    VTK_DATA_ARRAY_DELETE
  };
# 218 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h"
  void SetArray(T* array, vtkIdType size, int save, int deleteMethod);
  void SetArray(T* array, vtkIdType size, int save)
    { this->SetArray(array, size, save, VTK_DATA_ARRAY_FREE); }
  virtual void SetVoidArray(void* array, vtkIdType size, int save)
    { this->SetArray(static_cast<T*>(array), size, save); }
  virtual void SetVoidArray(void* array,
                            vtkIdType size,
                            int save,
                            int deleteMethod)
    {
      this->SetArray(static_cast<T*>(array), size, save, deleteMethod);
    }





  virtual void ExportToVoidPointer(void *out_ptr);



  virtual vtkArrayIterator* NewIterator();



  virtual vtkIdType LookupValue(vtkVariant value);
  virtual void LookupValue(vtkVariant value, vtkIdList* ids);
  vtkIdType LookupValue(T value);
  void LookupValue(T value, vtkIdList* ids);
# 255 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h"
  virtual void DataChanged();





  virtual void DataElementChanged(vtkIdType id);





  virtual void ClearLookup();

protected:
  vtkDataArrayTemplate(vtkIdType numComp);
  ~vtkDataArrayTemplate();

  T* Array;
  T ValueRange[2];
  T* ResizeAndExtend(vtkIdType sz);
  T* Realloc(vtkIdType sz);

  int TupleSize;
  double* Tuple;

  int SaveUserArray;
  int DeleteMethod;

  virtual void ComputeScalarRange(int comp);
  virtual void ComputeVectorRange();
private:
  vtkDataArrayTemplate(const vtkDataArrayTemplate&);
  void operator=(const vtkDataArrayTemplate&);

  vtkDataArrayTemplateLookup<T>* Lookup;
  void UpdateLookup();

  void DeleteArray();
};
# 31 "/usr/local/include/vtk-5.10/vtkSignedCharArray.h" 2



class __attribute__ ((visibility("default"))) vtkSignedCharArray : public vtkDataArrayTemplate<signed char>

{
public:
  static vtkSignedCharArray* New();
  typedef vtkDataArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkSignedCharArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkSignedCharArray",type) ) { return 1; } return vtkDataArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkSignedCharArray::IsTypeOf(type); } static vtkSignedCharArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkSignedCharArray") ) { return static_cast<vtkSignedCharArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkSignedCharArray::New(); } public: vtkSignedCharArray *NewInstance() const { return vtkSignedCharArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataType()
    { return 15; }



  void GetTupleValue(vtkIdType i, signed char* tuple)
    { this->RealSuperclass::GetTupleValue(i, tuple); }



  void SetTupleValue(vtkIdType i, const signed char* tuple)
    { this->RealSuperclass::SetTupleValue(i, tuple); }




  void InsertTupleValue(vtkIdType i, const signed char* tuple)
    { this->RealSuperclass::InsertTupleValue(i, tuple); }



  vtkIdType InsertNextTupleValue(const signed char* tuple)
    { return this->RealSuperclass::InsertNextTupleValue(tuple); }



  signed char GetValue(vtkIdType id)
    { return this->RealSuperclass::GetValue(id); }




  void SetValue(vtkIdType id, signed char value)
    { this->RealSuperclass::SetValue(id, value); }





  void SetNumberOfValues(vtkIdType number)
    { this->RealSuperclass::SetNumberOfValues(number); }



  void InsertValue(vtkIdType id, signed char f)
    { this->RealSuperclass::InsertValue(id, f); }



  vtkIdType InsertNextValue(signed char f)
    { return this->RealSuperclass::InsertNextValue(f); }




  signed char *GetValueRange(int comp)
    { return this->RealSuperclass::GetValueRange(comp); }

  void GetValueRange(signed char range[2], int comp)
    { this->RealSuperclass::GetValueRange(range, comp); }





  signed char *GetValueRange()
    { return this->RealSuperclass::GetValueRange(0); }

  void GetValueRange(signed char range[2])
    { this->RealSuperclass::GetValueRange(range, 0); }




  static signed char GetDataTypeValueMin() { return static_cast< signed char >(0x80); }



  static signed char GetDataTypeValueMax() { return static_cast< signed char >(0x7f); }





  signed char* WritePointer(vtkIdType id, vtkIdType number)
    { return this->RealSuperclass::WritePointer(id, number); }




  signed char* GetPointer(vtkIdType id)
    { return this->RealSuperclass::GetPointer(id); }
# 144 "/usr/local/include/vtk-5.10/vtkSignedCharArray.h"
  void SetArray(signed char* array, vtkIdType size, int save)
    { this->RealSuperclass::SetArray(array, size, save); }
  void SetArray(signed char* array, vtkIdType size, int save, int deleteMethod)
    { this->RealSuperclass::SetArray(array, size, save, deleteMethod); }

protected:
  vtkSignedCharArray(vtkIdType numComp=1);
  ~vtkSignedCharArray();

private:

  typedef vtkDataArrayTemplate<signed char> RealSuperclass;

  vtkSignedCharArray(const vtkSignedCharArray&);
  void operator=(const vtkSignedCharArray&);
};
# 23 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkIntArray.h" 1
# 30 "/usr/local/include/vtk-5.10/vtkIntArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkIntArray.h" 2



class __attribute__ ((visibility("default"))) vtkIntArray : public vtkDataArrayTemplate<int>

{
public:
  static vtkIntArray* New();
  typedef vtkDataArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkIntArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkIntArray",type) ) { return 1; } return vtkDataArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkIntArray::IsTypeOf(type); } static vtkIntArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkIntArray") ) { return static_cast<vtkIntArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkIntArray::New(); } public: vtkIntArray *NewInstance() const { return vtkIntArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataType()
    { return 6; }



  void GetTupleValue(vtkIdType i, int* tuple)
    { this->RealSuperclass::GetTupleValue(i, tuple); }



  void SetTupleValue(vtkIdType i, const int* tuple)
    { this->RealSuperclass::SetTupleValue(i, tuple); }




  void InsertTupleValue(vtkIdType i, const int* tuple)
    { this->RealSuperclass::InsertTupleValue(i, tuple); }



  vtkIdType InsertNextTupleValue(const int* tuple)
    { return this->RealSuperclass::InsertNextTupleValue(tuple); }



  int GetValue(vtkIdType id)
    { return this->RealSuperclass::GetValue(id); }




  void SetValue(vtkIdType id, int value)
    { this->RealSuperclass::SetValue(id, value); }





  void SetNumberOfValues(vtkIdType number)
    { this->RealSuperclass::SetNumberOfValues(number); }



  void InsertValue(vtkIdType id, int f)
    { this->RealSuperclass::InsertValue(id, f); }



  vtkIdType InsertNextValue(int f)
    { return this->RealSuperclass::InsertNextValue(f); }




  int *GetValueRange(int comp)
    { return this->RealSuperclass::GetValueRange(comp); }

  void GetValueRange(int range[2], int comp)
    { this->RealSuperclass::GetValueRange(range, comp); }





  int *GetValueRange()
    { return this->RealSuperclass::GetValueRange(0); }

  void GetValueRange(int range[2])
    { this->RealSuperclass::GetValueRange(range, 0); }




  static int GetDataTypeValueMin() { return static_cast< int >(~(~0u >> 1)); }



  static int GetDataTypeValueMax() { return static_cast< int >(~0u >> 1); }





  int* WritePointer(vtkIdType id, vtkIdType number)
    { return this->RealSuperclass::WritePointer(id, number); }




  int* GetPointer(vtkIdType id)
    { return this->RealSuperclass::GetPointer(id); }
# 144 "/usr/local/include/vtk-5.10/vtkIntArray.h"
  void SetArray(int* array, vtkIdType size, int save)
    { this->RealSuperclass::SetArray(array, size, save); }
  void SetArray(int* array, vtkIdType size, int save, int deleteMethod)
    { this->RealSuperclass::SetArray(array, size, save, deleteMethod); }

protected:
  vtkIntArray(vtkIdType numComp=1);
  ~vtkIntArray();

private:

  typedef vtkDataArrayTemplate<int> RealSuperclass;

  vtkIntArray(const vtkIntArray&);
  void operator=(const vtkIntArray&);
};
# 24 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkTriangle.h" 1
# 23 "/usr/local/include/vtk-5.10/vtkTriangle.h"
# 1 "/usr/local/include/vtk-5.10/vtkCell.h" 1
# 42 "/usr/local/include/vtk-5.10/vtkCell.h"
# 1 "/usr/local/include/vtk-5.10/vtkIdList.h" 1
# 26 "/usr/local/include/vtk-5.10/vtkIdList.h"
class __attribute__ ((visibility("default"))) vtkIdList : public vtkObject
{
public:
  static vtkIdList *New();

  void Initialize();
  int Allocate(const vtkIdType sz, const int strategy=0);
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkIdList"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkIdList",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkIdList::IsTypeOf(type); } static vtkIdList* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkIdList") ) { return static_cast<vtkIdList *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkIdList::New(); } public: vtkIdList *NewInstance() const { return vtkIdList::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  vtkIdType GetNumberOfIds() {return this->NumberOfIds;};



  vtkIdType GetId(const vtkIdType i) {return this->Ids[i];};




  void SetNumberOfIds(const vtkIdType number);





  void SetId(const vtkIdType i, const vtkIdType vtkid) {this->Ids[i] = vtkid;};




  void InsertId(const vtkIdType i, const vtkIdType vtkid);



  vtkIdType InsertNextId(const vtkIdType vtkid);




  vtkIdType InsertUniqueId(const vtkIdType vtkid);



  vtkIdType *GetPointer(const vtkIdType i) {return this->Ids + i;};





  vtkIdType *WritePointer(const vtkIdType i, const vtkIdType number);



  void Reset() {this->NumberOfIds = 0;};



  void Squeeze() {this->Resize(this->NumberOfIds);};



  void DeepCopy(vtkIdList *ids);



  void DeleteId(vtkIdType vtkid);




  vtkIdType IsId(vtkIdType vtkid);




  void IntersectWith(vtkIdList* otherIds);



  void IntersectWith(vtkIdList& otherIds) {
    return this->IntersectWith(&otherIds); };


protected:
  vtkIdList();
  ~vtkIdList();

  vtkIdType NumberOfIds;
  vtkIdType Size;
  vtkIdType *Ids;

  vtkIdType *Resize(const vtkIdType sz);
private:
  vtkIdList(const vtkIdList&);
  void operator=(const vtkIdList&);
};


inline vtkIdType vtkIdList::InsertNextId(const vtkIdType vtkid)
{
  if ( this->NumberOfIds >= this->Size )
    {
    this->Resize(this->NumberOfIds+1);
    }
  this->Ids[this->NumberOfIds++] = vtkid;
  return this->NumberOfIds-1;
}

inline vtkIdType vtkIdList::IsId(vtkIdType vtkid)
{
  vtkIdType *ptr, i;
  for (ptr=this->Ids, i=0; i<this->NumberOfIds; i++, ptr++)
    {
    if ( vtkid == *ptr )
      {
      return i;
      }
    }
  return (-1);
}
# 43 "/usr/local/include/vtk-5.10/vtkCell.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkCellType.h" 1
# 40 "/usr/local/include/vtk-5.10/vtkCellType.h"
typedef enum {

  VTK_EMPTY_CELL = 0,
  VTK_VERTEX = 1,
  VTK_POLY_VERTEX = 2,
  VTK_LINE = 3,
  VTK_POLY_LINE = 4,
  VTK_TRIANGLE = 5,
  VTK_TRIANGLE_STRIP = 6,
  VTK_POLYGON = 7,
  VTK_PIXEL = 8,
  VTK_QUAD = 9,
  VTK_TETRA = 10,
  VTK_VOXEL = 11,
  VTK_HEXAHEDRON = 12,
  VTK_WEDGE = 13,
  VTK_PYRAMID = 14,
  VTK_PENTAGONAL_PRISM = 15,
  VTK_HEXAGONAL_PRISM = 16,


  VTK_QUADRATIC_EDGE = 21,
  VTK_QUADRATIC_TRIANGLE = 22,
  VTK_QUADRATIC_QUAD = 23,
  VTK_QUADRATIC_TETRA = 24,
  VTK_QUADRATIC_HEXAHEDRON = 25,
  VTK_QUADRATIC_WEDGE = 26,
  VTK_QUADRATIC_PYRAMID = 27,
  VTK_BIQUADRATIC_QUAD = 28,
  VTK_TRIQUADRATIC_HEXAHEDRON = 29,
  VTK_QUADRATIC_LINEAR_QUAD = 30,
  VTK_QUADRATIC_LINEAR_WEDGE = 31,
  VTK_BIQUADRATIC_QUADRATIC_WEDGE = 32,
  VTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON = 33,
  VTK_BIQUADRATIC_TRIANGLE = 34,


  VTK_CUBIC_LINE = 35,


  VTK_CONVEX_POINT_SET = 41,


  VTK_POLYHEDRON = 42,


  VTK_PARAMETRIC_CURVE = 51,
  VTK_PARAMETRIC_SURFACE = 52,
  VTK_PARAMETRIC_TRI_SURFACE = 53,
  VTK_PARAMETRIC_QUAD_SURFACE = 54,
  VTK_PARAMETRIC_TETRA_REGION = 55,
  VTK_PARAMETRIC_HEX_REGION = 56,


  VTK_HIGHER_ORDER_EDGE = 60,
  VTK_HIGHER_ORDER_TRIANGLE = 61,
  VTK_HIGHER_ORDER_QUAD = 62,
  VTK_HIGHER_ORDER_POLYGON = 63,
  VTK_HIGHER_ORDER_TETRAHEDRON = 64,
  VTK_HIGHER_ORDER_WEDGE = 65,
  VTK_HIGHER_ORDER_PYRAMID = 66,
  VTK_HIGHER_ORDER_HEXAHEDRON = 67,

  VTK_NUMBER_OF_CELL_TYPES
} VTKCellType;
# 44 "/usr/local/include/vtk-5.10/vtkCell.h" 2

class vtkCellArray;
class vtkCellData;
class vtkDataArray;
class vtkPointData;
class vtkIncrementalPointLocator;
class vtkPoints;

class __attribute__ ((visibility("default"))) vtkCell : public vtkObject
{
public:
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCell"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCell",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCell::IsTypeOf(type); } static vtkCell* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCell") ) { return static_cast<vtkCell *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCell::New(); } public: vtkCell *NewInstance() const { return vtkCell::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  void Initialize(int npts, vtkIdType *pts, vtkPoints *p);





  virtual void ShallowCopy(vtkCell *c);




  virtual void DeepCopy(vtkCell *c);



  virtual int GetCellType() = 0;



  virtual int GetCellDimension() = 0;





  virtual int IsLinear() {return 1;}




  virtual int RequiresInitialization() {return 0;}
  virtual void Initialize() {}





  virtual int IsExplicitCell() {return 0;}





  virtual int RequiresExplicitFaceRepresentation() {return 0;}
  virtual void SetFaces(vtkIdType *) {}
  virtual vtkIdType *GetFaces() {return __null;}



  vtkPoints *GetPoints() {return this->Points;}



  vtkIdType GetNumberOfPoints() {return this->PointIds->GetNumberOfIds();}



  virtual int GetNumberOfEdges() = 0;



  virtual int GetNumberOfFaces() = 0;



  vtkIdList *GetPointIds() {return this->PointIds;}



  vtkIdType GetPointId(int ptId) {return this->PointIds->GetId(ptId);}



  virtual vtkCell *GetEdge(int edgeId) = 0;



  virtual vtkCell *GetFace(int faceId) = 0;







  virtual int CellBoundary(int subId, double pcoords[3], vtkIdList *pts) = 0;
# 164 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual int EvaluatePosition(double x[3], double* closestPoint,
                               int& subId, double pcoords[3],
                               double& dist2, double *weights) = 0;





  virtual void EvaluateLocation(int& subId, double pcoords[3],
                                double x[3], double *weights) = 0;
# 187 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual void Contour(double value, vtkDataArray *cellScalars,
                       vtkIncrementalPointLocator *locator, vtkCellArray *verts,
                       vtkCellArray *lines, vtkCellArray *polys,
                       vtkPointData *inPd, vtkPointData *outPd,
                       vtkCellData *inCd, vtkIdType cellId,
                       vtkCellData *outCd) = 0;
# 205 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual void Clip(double value, vtkDataArray *cellScalars,
                    vtkIncrementalPointLocator *locator, vtkCellArray *connectivity,
                    vtkPointData *inPd, vtkPointData *outPd,
                    vtkCellData *inCd, vtkIdType cellId, vtkCellData *outCd,
                    int insideOut) = 0;





  virtual int IntersectWithLine(double p1[3], double p2[3],
                                double tol, double& t, double x[3],
                                double pcoords[3], int& subId) = 0;
# 228 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual int Triangulate(int index, vtkIdList *ptIds, vtkPoints *pts) = 0;
# 243 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual void Derivatives(int subId, double pcoords[3], double *values,
                           int dim, double *derivs) = 0;





  void GetBounds(double bounds[6]);





  double *GetBounds();




  double GetLength2();







  virtual int GetParametricCenter(double pcoords[3]);
# 278 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual double GetParametricDistance(double pcoords[3]);
# 287 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual int IsPrimaryCell() {return 1;}
# 298 "/usr/local/include/vtk-5.10/vtkCell.h"
  virtual double *GetParametricCoords();





  virtual void InterpolateFunctions(double pcoords[3], double weights[3])
    {
    (void)pcoords;
    (void)weights;
    }
  virtual void InterpolateDerivs(double pcoords[3], double derivs[3])
    {
    (void)pcoords;
    (void)derivs;
    }


  vtkPoints *Points;
  vtkIdList *PointIds;

protected:
  vtkCell();
  ~vtkCell();

  double Bounds[6];

private:
  vtkCell(const vtkCell&);
  void operator=(const vtkCell&);
};
# 24 "/usr/local/include/vtk-5.10/vtkTriangle.h" 2

# 1 "/usr/local/include/vtk-5.10/vtkMath.h" 1
# 40 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h" 1
# 51 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
class __attribute__ ((visibility("default"))) vtkPolynomialSolversUnivariate : public vtkObject
{
public:
  static vtkPolynomialSolversUnivariate *New();
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPolynomialSolversUnivariate"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPolynomialSolversUnivariate",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPolynomialSolversUnivariate::IsTypeOf(type); } static vtkPolynomialSolversUnivariate* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPolynomialSolversUnivariate") ) { return static_cast<vtkPolynomialSolversUnivariate *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPolynomialSolversUnivariate::New(); } public: vtkPolynomialSolversUnivariate *NewInstance() const { return vtkPolynomialSolversUnivariate::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);
  static ostream& PrintPolynomial( ostream& os, double* P, int degP );
# 97 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int HabichtBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol );
  static int HabichtBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol,
    int intervalType );
  static int HabichtBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol,
    int intervalType, bool divideGCD );
# 135 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int SturmBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol );
  static int SturmBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol,
    int intervalType );
  static int SturmBisectionSolve(
    double* P, int d, double* a, double* upperBnds, double tol,
    int intervalType, bool divideGCD );







  static int FilterRoots(
    double* P, int d, double *upperBnds, int rootcount, double diameter );
# 163 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int LinBairstowSolve( double* c, int d, double* r, double& tolerance );
# 174 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int FerrariSolve( double* c, double* r, int* m, double tol );
# 190 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int TartagliaCardanSolve( double* c, double* r, int* m, double tol );
# 199 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static double* SolveCubic(double c0, double c1, double c2, double c3);
# 208 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static double* SolveQuadratic(double c0, double c1, double c2);





  static double* SolveLinear(double c0, double c1);
# 228 "/usr/local/include/vtk-5.10/vtkPolynomialSolversUnivariate.h"
  static int SolveCubic(double c0, double c1, double c2, double c3,
                        double *r1, double *r2, double *r3, int *num_roots);







  static int SolveQuadratic(double c0, double c1, double c2,
                            double *r1, double *r2, int *num_roots);







  static int SolveQuadratic( double* c, double* r, int* m );






  static int SolveLinear(double c0, double c1, double *r1, int *num_roots);






  static void SetDivisionTolerance( double tol );
  static double GetDivisionTolerance();

protected:
  vtkPolynomialSolversUnivariate() {};
  ~vtkPolynomialSolversUnivariate() {};

  static double DivisionTolerance;

private:
  vtkPolynomialSolversUnivariate(const vtkPolynomialSolversUnivariate&);
  void operator=(const vtkPolynomialSolversUnivariate&);
};
# 41 "/usr/local/include/vtk-5.10/vtkMath.h" 2


# 1 "/usr/include/assert.h" 1 3 4
# 68 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (__const char *__assertion, __const char *__file,
      unsigned int __line, __const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, __const char *__file,
      unsigned int __line,
      __const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/local/include/vtk-5.10/vtkMath.h" 2
# 56 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1 "/usr/local/include/vtk-5.10/vtkMathConfigure.h" 1
# 24 "/usr/local/include/vtk-5.10/vtkMathConfigure.h"
# 1 "/usr/include/c++/4.6/cmath" 1 3
# 41 "/usr/include/c++/4.6/cmath" 3
       
# 42 "/usr/include/c++/4.6/cmath" 3
# 77 "/usr/include/c++/4.6/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 481 "/usr/include/c++/4.6/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 731 "/usr/include/c++/4.6/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 25 "/usr/local/include/vtk-5.10/vtkMathConfigure.h" 2
# 57 "/usr/local/include/vtk-5.10/vtkMath.h" 2

# 1 "/usr/include/assert.h" 1 3 4
# 59 "/usr/local/include/vtk-5.10/vtkMath.h" 2
# 68 "/usr/local/include/vtk-5.10/vtkMath.h"
class vtkDataArray;
class vtkPoints;
class vtkMathInternal;
class vtkMinimalStandardRandomSequence;
class vtkBoxMuellerRandomSequence;

class __attribute__ ((visibility("default"))) vtkMath : public vtkObject
{
public:
  static vtkMath *New();
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkMath"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkMath",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkMath::IsTypeOf(type); } static vtkMath* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkMath") ) { return static_cast<vtkMath *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkMath::New(); } public: vtkMath *NewInstance() const { return vtkMath::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  static float Pi() { return 3.14159265358979f; };




  static double DoubleTwoPi() { return 6.283185307179586; };




  static double DoublePi() { return 3.1415926535897932384626; };



  static float RadiansFromDegrees( float degrees);
  static double RadiansFromDegrees( double degrees);



  static float DegreesFromRadians( float radians);
  static double DegreesFromRadians( double radians);



  static int Round(float f) {
    return static_cast<int>( f + ( f >= 0 ? 0.5 : -0.5 ) ); }
  static int Round(double f) {
    return static_cast<int>( f + ( f >= 0 ? 0.5 : -0.5 ) ); }





  static int Floor(double x);





  static int Ceil(double x);




  static vtkTypeInt64 Factorial( int N );





  static vtkTypeInt64 Binomial( int m, int n );
# 144 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int* BeginCombination( int m, int n );
# 155 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int NextCombination( int m, int n, int* combination );



  static void FreeCombination( int* combination);
# 175 "/usr/local/include/vtk-5.10/vtkMath.h"
  static void RandomSeed(int s);
# 187 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int GetSeed();
# 201 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double Random();
# 214 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double Random( double min, double max );
# 227 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double Gaussian();
# 240 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double Gaussian( double mean, double std );



  static void Add(const float a[3], const float b[3], float c[3]) {
    for (int i = 0; i < 3; ++i)
      c[i] = a[i] + b[i];
  }



  static void Add(const double a[3], const double b[3], double c[3]) {
    for (int i = 0; i < 3; ++i)
      c[i] = a[i] + b[i];
  }



  static void Subtract(const float a[3], const float b[3], float c[3]) {
    for (int i = 0; i < 3; ++i)
      c[i] = a[i] - b[i];
  }



  static void Subtract(const double a[3], const double b[3], double c[3]) {
    for (int i = 0; i < 3; ++i)
      c[i] = a[i] - b[i];
  }




  static void MultiplyScalar(float a[3], float s) {
    for (int i = 0; i < 3; ++i)
      a[i] *= s;
  }




  static void MultiplyScalar2D(float a[2], float s) {
    for (int i = 0; i < 2; ++i)
      a[i] *= s;
  }




  static void MultiplyScalar(double a[3], double s) {
    for (int i = 0; i < 3; ++i)
      a[i] *= s;
  }




  static void MultiplyScalar2D(double a[2], double s) {
    for (int i = 0; i < 2; ++i)
      a[i] *= s;
  }



  static float Dot(const float x[3], const float y[3]) {
    return ( x[0] * y[0] + x[1] * y[1] + x[2] * y[2] );};



  static double Dot(const double x[3], const double y[3]) {
    return ( x[0] * y[0] + x[1] * y[1] + x[2] * y[2] );};



  static void Outer(const float x[3], const float y[3], float A[3][3]) {
    for (int i=0; i < 3; i++)
      for (int j=0; j < 3; j++)
        A[i][j] = x[i] * y[j];
  }


  static void Outer(const double x[3], const double y[3], double A[3][3]) {
    for (int i=0; i < 3; i++)
      for (int j=0; j < 3; j++)
        A[i][j] = x[i] * y[j];
  }



  static void Cross(const float x[3], const float y[3], float z[3]);




  static void Cross(const double x[3], const double y[3], double z[3]);



  static float Norm(const float* x, int n);
  static double Norm(const double* x, int n);



  static float Norm(const float x[3]) {
    return static_cast<float> (sqrt( x[0] * x[0] + x[1] * x[1] + x[2] * x[2] ) );};



  static double Norm(const double x[3]) {
    return sqrt( x[0] * x[0] + x[1] * x[1] + x[2] * x[2] );};



  static float Normalize(float x[3]);




  static double Normalize(double x[3]);







  static void Perpendiculars(const double x[3], double y[3], double z[3],
                             double theta);
  static void Perpendiculars(const float x[3], float y[3], float z[3],
                             double theta);





  static bool ProjectVector(const float a[3], const float b[3], float projection[3]);
  static bool ProjectVector(const double a[3], const double b[3], double projection[3]);






  static bool ProjectVector2D(const float a[2], const float b[2], float projection[2]);
  static bool ProjectVector2D(const double a[2], const double b[2], double projection[2]);



  static float Distance2BetweenPoints(const float x[3], const float y[3]);



  static double Distance2BetweenPoints(const double x[3], const double y[3]);




  static double GaussianAmplitude(const double variance, const double distanceFromMean);




  static double GaussianAmplitude(const double mean, const double variance, const double position);





  static double GaussianWeight(const double variance, const double distanceFromMean);





  static double GaussianWeight(const double mean, const double variance, const double position);



  static float Dot2D(const float x[2], const float y[2]) {
    return ( x[0] * y[0] + x[1] * y[1] );};



  static double Dot2D(const double x[2], const double y[2]) {
    return ( x[0] * y[0] + x[1] * y[1] );};



  static void Outer2D(const float x[2], const float y[2], float A[2][2])
    {
    for (int i=0; i < 2; i++)
      {
      for (int j=0; j < 2; j++)
        {
        A[i][j] = x[i] * y[j];
        }
      }
    }


  static void Outer2D(const double x[2], const double y[2], double A[2][2])
    {
    for (int i=0; i < 2; i++)
      {
      for (int j=0; j < 2; j++)
        {
        A[i][j] = x[i] * y[j];
        }
      }
    }



  static float Norm2D(const float x[2]) {
    return static_cast<float> (sqrt( x[0] * x[0] + x[1] * x[1] ) );};




  static double Norm2D(const double x[2]) {
    return sqrt( x[0] * x[0] + x[1] * x[1] );};



  static float Normalize2D(float x[2]);




  static double Normalize2D(double x[2]);



  static float Determinant2x2(const float c1[2], const float c2[2]) {
    return (c1[0] * c2[1] - c2[0] * c1[1] );};



  static double Determinant2x2(double a, double b, double c, double d) {
    return (a * d - b * c);};
  static double Determinant2x2(const double c1[2], const double c2[2]) {
    return (c1[0] * c2[1] - c2[0] * c1[1] );};



  static void LUFactor3x3(float A[3][3], int index[3]);
  static void LUFactor3x3(double A[3][3], int index[3]);



  static void LUSolve3x3(const float A[3][3], const int index[3],
                         float x[3]);
  static void LUSolve3x3(const double A[3][3], const int index[3],
                         double x[3]);




  static void LinearSolve3x3(const float A[3][3], const float x[3],
                             float y[3]);
  static void LinearSolve3x3(const double A[3][3], const double x[3],
                             double y[3]);



  static void Multiply3x3(const float A[3][3], const float in[3],
                          float out[3]);
  static void Multiply3x3(const double A[3][3], const double in[3],
                          double out[3]);



  static void Multiply3x3(const float A[3][3], const float B[3][3],
                          float C[3][3]);
  static void Multiply3x3(const double A[3][3], const double B[3][3],
                          double C[3][3]);





  static void MultiplyMatrix(const double **A, const double **B,
                             unsigned int rowA, unsigned int colA,
                             unsigned int rowB, unsigned int colB,
                             double **C);




  static void Transpose3x3(const float A[3][3], float AT[3][3]);
  static void Transpose3x3(const double A[3][3], double AT[3][3]);




  static void Invert3x3(const float A[3][3], float AI[3][3]);
  static void Invert3x3(const double A[3][3], double AI[3][3]);



  static void Identity3x3(float A[3][3]);
  static void Identity3x3(double A[3][3]);



  static double Determinant3x3(float A[3][3]);
  static double Determinant3x3(double A[3][3]);



  static float Determinant3x3(const float c1[3],
                              const float c2[3],
                              const float c3[3]);



  static double Determinant3x3(const double c1[3],
                               const double c2[3],
                               const double c3[3]);






  static double Determinant3x3(double a1, double a2, double a3,
                               double b1, double b2, double b3,
                               double c1, double c2, double c3);




  static void QuaternionToMatrix3x3(const float quat[4], float A[3][3]);
  static void QuaternionToMatrix3x3(const double quat[4], double A[3][3]);





  static void Matrix3x3ToQuaternion(const float A[3][3], float quat[4]);
  static void Matrix3x3ToQuaternion(const double A[3][3], double quat[4]);



  static void MultiplyQuaternion( const float q1[4], const float q2[4], float q[4] );
  static void MultiplyQuaternion( const double q1[4], const double q2[4], double q[4] );





  static void Orthogonalize3x3(const float A[3][3], float B[3][3]);
  static void Orthogonalize3x3(const double A[3][3], double B[3][3]);






  static void Diagonalize3x3(const float A[3][3], float w[3], float V[3][3]);
  static void Diagonalize3x3(const double A[3][3],double w[3],double V[3][3]);
# 610 "/usr/local/include/vtk-5.10/vtkMath.h"
  static void SingularValueDecomposition3x3(const float A[3][3],
                                            float U[3][3], float w[3],
                                            float VT[3][3]);
  static void SingularValueDecomposition3x3(const double A[3][3],
                                            double U[3][3], double w[3],
                                            double VT[3][3]);






  static int SolveLinearSystem(double **A, double *x, int size);






  static int InvertMatrix(double **A, double **AI, int size);





  static int InvertMatrix(double **A, double **AI, int size,
                          int *tmp1Size, double *tmp2Size);







  static int LUFactorLinearSystem(double **A, int *index, int size);





  static int LUFactorLinearSystem(double **A, int *index, int size,
                                  double *tmpSize);
# 660 "/usr/local/include/vtk-5.10/vtkMath.h"
  static void LUSolveLinearSystem(double **A, int *index,
                                  double *x, int size);
# 670 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double EstimateMatrixCondition(double **A, int size);






  static int Jacobi(float **a, float *w, float **v);
  static int Jacobi(double **a, double *w, double **v);







  static int JacobiN(float **a, int n, float *w, float **v);
  static int JacobiN(double **a, int n, double *w, double **v);
# 698 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double* SolveCubic(double c0, double c1, double c2, double c3) __attribute__((deprecated));
# 709 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double* SolveQuadratic(double c0, double c1, double c2) __attribute__((deprecated));







  static double* SolveLinear(double c0, double c1) __attribute__((deprecated));
# 733 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveCubic(double c0, double c1, double c2, double c3, double *r1, double *r2, double *r3, int *num_roots) __attribute__((deprecated))
                                                                            ;
# 744 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveQuadratic(double c0, double c1, double c2, double *r1, double *r2, int *num_roots) __attribute__((deprecated))
                                                                    ;
# 755 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveQuadratic( double* c, double* r, int* m ) __attribute__((deprecated));
# 764 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveLinear(double c0, double c1, double *r1, int *num_roots) __attribute__((deprecated));
# 778 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveHomogeneousLeastSquares(int numberOfSamples, double **xt, int xOrder,
                                double **mt);
# 795 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int SolveLeastSquares(int numberOfSamples, double **xt, int xOrder,
                               double **yt, int yOrder, double **mt, int checkHomogeneous=1);







  static void RGBToHSV(const float rgb[3], float hsv[3])
    { RGBToHSV(rgb[0], rgb[1], rgb[2], hsv, hsv+1, hsv+2); }
  static void RGBToHSV(float r, float g, float b, float *h, float *s, float *v);
  static double* RGBToHSV(const double rgb[3]);
  static double* RGBToHSV(double r, double g, double b);
  static void RGBToHSV(const double rgb[3], double hsv[3])
    { RGBToHSV(rgb[0], rgb[1], rgb[2], hsv, hsv+1, hsv+2); }
  static void RGBToHSV(double r, double g, double b, double *h, double *s, double *v);




  static void HSVToRGB(const float hsv[3], float rgb[3])
    { HSVToRGB(hsv[0], hsv[1], hsv[2], rgb, rgb+1, rgb+2); }
  static void HSVToRGB(float h, float s, float v, float *r, float *g, float *b);
  static double* HSVToRGB(const double hsv[3]);
  static double* HSVToRGB(double h, double s, double v);
  static void HSVToRGB(const double hsv[3], double rgb[3])
    { HSVToRGB(hsv[0], hsv[1], hsv[2], rgb, rgb+1, rgb+2); }
  static void HSVToRGB(double h, double s, double v, double *r, double *g, double *b);



  static void LabToXYZ(const double lab[3], double xyz[3]) {
    LabToXYZ(lab[0], lab[1], lab[2], xyz+0, xyz+1, xyz+2);
  }
  static void LabToXYZ(double L, double a, double b,
                       double *x, double *y, double *z);
  static double *LabToXYZ(const double lab[3]);



  static void XYZToLab(const double xyz[3], double lab[3]) {
    XYZToLab(xyz[0], xyz[1], xyz[2], lab+0, lab+1, lab+2);
  }
  static void XYZToLab(double x, double y, double z,
                       double *L, double *a, double *b);
  static double *XYZToLab(const double xyz[3]);



  static void XYZToRGB(const double xyz[3], double rgb[3]) {
    XYZToRGB(xyz[0], xyz[1], xyz[2], rgb+0, rgb+1, rgb+2);
  }
  static void XYZToRGB(double x, double y, double z,
                       double *r, double *g, double *b);
  static double *XYZToRGB(const double xyz[3]);



  static void RGBToXYZ(const double rgb[3], double xyz[3]) {
    RGBToXYZ(rgb[0], rgb[1], rgb[2], xyz+0, xyz+1, xyz+2);
  }
  static void RGBToXYZ(double r, double g, double b,
                       double *x, double *y, double *z);
  static double *RGBToXYZ(const double rgb[3]);






  static void RGBToLab(const double rgb[3], double lab[3]) {
    RGBToLab(rgb[0], rgb[1], rgb[2], lab+0, lab+1, lab+2);
  }
  static void RGBToLab(double red, double green, double blue,
                       double *L, double *a, double *b);
  static double *RGBToLab(const double rgb[3]);



  static void LabToRGB(const double lab[3], double rgb[3]) {
    LabToRGB(lab[0], lab[1], lab[2], rgb+0, rgb+1, rgb+2);
  }
  static void LabToRGB(double L, double a, double b,
                       double *red, double *green, double *blue);
  static double *LabToRGB(const double lab[3]);



  static void UninitializeBounds(double bounds[6]){
    bounds[0] = 1.0;
    bounds[1] = -1.0;
    bounds[2] = 1.0;
    bounds[3] = -1.0;
    bounds[4] = 1.0;
    bounds[5] = -1.0;
  }



  static int AreBoundsInitialized(double bounds[6]){
    if ( bounds[1]-bounds[0]<0.0 )
      {
      return 0;
      }
    return 1;
  }




  static void ClampValue(double *value, const double range[2]);
  static void ClampValue(double value, const double range[2], double *clamped_value);
  static void ClampValues(
    double *values, int nb_values, const double range[2]);
  static void ClampValues(
    const double *values, int nb_values, const double range[2], double *clamped_values);






  static double ClampAndNormalizeValue(double value,
                                       const double range[2]);
# 928 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int GetScalarTypeFittingRange(
    double range_min, double range_max,
    double scale = 1.0, double shift = 0.0);
# 939 "/usr/local/include/vtk-5.10/vtkMath.h"
  static int GetAdjustedScalarRange(
    vtkDataArray *array, int comp, double range[2]);




  static int ExtentIsWithinOtherExtent(int extent1[6], int extent2[6]);





  static int BoundsIsWithinOtherBounds(double bounds1[6], double bounds2[6], double delta[3]);





  static int PointIsWithinBounds(double point[3], double bounds[6], double delta[3]);
# 967 "/usr/local/include/vtk-5.10/vtkMath.h"
  static double Solve3PointCircle(const double p1[3], const double p2[3], const double p3[3], double center[3]);



  static double Inf();



  static double NegInf();



  static double Nan();



  static int IsInf(double x);



  static int IsNan(double x);

protected:
  vtkMath() {};
  ~vtkMath() {};

  static vtkMathInternal Internal;
private:
  vtkMath(const vtkMath&);
  void operator=(const vtkMath&);
};


inline float vtkMath::RadiansFromDegrees( float x )
{
  return x * 0.017453292f;
}


inline double vtkMath::RadiansFromDegrees( double x )
{
  return x * 0.017453292519943295;
}


inline float vtkMath::DegreesFromRadians( float x )
{
  return x * 57.2957795131f;
}


inline double vtkMath::DegreesFromRadians( double x )
{
  return x * 57.29577951308232;
}


inline vtkTypeInt64 vtkMath::Factorial( int N )
{
  vtkTypeInt64 r = 1;
  while ( N > 1 )
    {
    r *= N--;
    }
  return r;
}





inline int vtkMath::Floor(double x)
{
  const int r = static_cast<int>(x);
  const int n = ( x != static_cast<double>(r) );
  const int g = ( x < 0 );
  return r - ( n & g );
}





inline int vtkMath::Ceil(double x)
{
  const int r = static_cast<int>(x);
  const int n = ( x != static_cast<double>(r) );
  const int g = ( x >= 0 );
  return r + ( n & g );
}


inline float vtkMath::Normalize(float x[3])
{
  float den;
  if ( ( den = vtkMath::Norm( x ) ) != 0.0 )
    {
    for (int i=0; i < 3; i++)
      {
      x[i] /= den;
      }
    }
  return den;
}


inline double vtkMath::Normalize(double x[3])
{
  double den;
  if ( ( den = vtkMath::Norm( x ) ) != 0.0 )
    {
    for (int i=0; i < 3; i++)
      {
      x[i] /= den;
      }
    }
  return den;
}


inline float vtkMath::Normalize2D(float x[3])
{
  float den;
  if ( ( den = vtkMath::Norm2D( x ) ) != 0.0 )
    {
    for (int i=0; i < 2; i++)
      {
      x[i] /= den;
      }
    }
  return den;
}


inline double vtkMath::Normalize2D(double x[3])
{
  double den;
  if ( ( den = vtkMath::Norm2D( x ) ) != 0.0 )
    {
    for (int i=0; i < 2; i++)
      {
      x[i] /= den;
      }
    }
  return den;
}


inline float vtkMath::Determinant3x3(const float c1[3],
                                     const float c2[3],
                                     const float c3[3])
{
  return c1[0] * c2[1] * c3[2] + c2[0] * c3[1] * c1[2] + c3[0] * c1[1] * c2[2] -
         c1[0] * c3[1] * c2[2] - c2[0] * c1[1] * c3[2] - c3[0] * c2[1] * c1[2];
}


inline double vtkMath::Determinant3x3(const double c1[3],
                                      const double c2[3],
                                      const double c3[3])
{
  return c1[0] * c2[1] * c3[2] + c2[0] * c3[1] * c1[2] + c3[0] * c1[1] * c2[2] -
         c1[0] * c3[1] * c2[2] - c2[0] * c1[1] * c3[2] - c3[0] * c2[1] * c1[2];
}


inline double vtkMath::Determinant3x3(double a1, double a2, double a3,
                                      double b1, double b2, double b3,
                                      double c1, double c2, double c3)
{
    return ( a1 * vtkMath::Determinant2x2( b2, b3, c2, c3 )
           - b1 * vtkMath::Determinant2x2( a2, a3, c2, c3 )
           + c1 * vtkMath::Determinant2x2( a2, a3, b2, b3 ) );
}


inline float vtkMath::Distance2BetweenPoints(const float x[3],
                                             const float y[3])
{
  return ( ( x[0] - y[0] ) * ( x[0] - y[0] )
           + ( x[1] - y[1] ) * ( x[1] - y[1] )
           + ( x[2] - y[2] ) * ( x[2] - y[2] ) );
}


inline double vtkMath::Distance2BetweenPoints(const double x[3],
                                              const double y[3])
{
  return ( ( x[0] - y[0] ) * ( x[0] - y[0] )
           + ( x[1] - y[1] ) * ( x[1] - y[1] )
           + ( x[2] - y[2] ) * ( x[2] - y[2] ) );
}



inline void vtkMath::Cross(const float x[3], const float y[3], float z[3])
{
  float Zx = x[1] * y[2] - x[2] * y[1];
  float Zy = x[2] * y[0] - x[0] * y[2];
  float Zz = x[0] * y[1] - x[1] * y[0];
  z[0] = Zx; z[1] = Zy; z[2] = Zz;
}



inline void vtkMath::Cross(const double x[3], const double y[3], double z[3])
{
  double Zx = x[1] * y[2] - x[2] * y[1];
  double Zy = x[2] * y[0] - x[0] * y[2];
  double Zz = x[0] * y[1] - x[1] * y[0];
  z[0] = Zx; z[1] = Zy; z[2] = Zz;
}



template<class T>
inline double vtkDeterminant3x3(T A[3][3])
{
  return A[0][0] * A[1][1] * A[2][2] + A[1][0] * A[2][1] * A[0][2] +
         A[2][0] * A[0][1] * A[1][2] - A[0][0] * A[2][1] * A[1][2] -
         A[1][0] * A[0][1] * A[2][2] - A[2][0] * A[1][1] * A[0][2];
}



inline double vtkMath::Determinant3x3(float A[3][3])
{
  return vtkDeterminant3x3( A );
}


inline double vtkMath::Determinant3x3(double A[3][3])
{
  return vtkDeterminant3x3( A );
}



inline double* vtkMath::SolveCubic(double c0, double c1, double c2, double c3)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1207 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1208
# 1207 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveCubic" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveCubic" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                      ;
  return vtkPolynomialSolversUnivariate::SolveCubic( c0, c1, c2, c3 );
}


inline double* vtkMath::SolveQuadratic(double c0, double c1, double c2)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1215 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1216
# 1215 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveQuadratic" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveQuadratic" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                          ;
  return vtkPolynomialSolversUnivariate::SolveQuadratic( c0, c1, c2 );
}


inline double* vtkMath::SolveLinear(double c0, double c1)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1223 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1224
# 1223 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveLinear" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveLinear" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                       ;
  return vtkPolynomialSolversUnivariate::SolveLinear( c0, c1 );
}


inline int vtkMath::SolveCubic(double c0, double c1, double c2, double c3,
                               double *r1, double *r2, double *r3, int *num_roots)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1232 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1233
# 1232 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveCubic" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveCubic" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                      ;
  return vtkPolynomialSolversUnivariate::SolveCubic( c0, c1, c2, c3, r1, r2, r3, num_roots );
}


inline int vtkMath::SolveQuadratic(double c0, double c1, double c2,
                                   double *r1, double *r2, int *num_roots)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1241 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1242
# 1241 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveQuadratic" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveQuadratic" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                          ;
  return vtkPolynomialSolversUnivariate::SolveQuadratic( c0, c1, c2, r1, r2, num_roots );
}


inline int vtkMath::SolveQuadratic( double* c, double* r, int* m )
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1249 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1250
# 1249 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveQuadratic" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveQuadratic" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                          ;
  return vtkPolynomialSolversUnivariate::SolveQuadratic( c, r, m );
}


inline int vtkMath::SolveLinear(double c0, double c1, double *r1, int *num_roots)
{
  { if (vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Generic Warning: In "
 "/usr/local/include/vtk-5.10/vtkMath.h"
# 1257 "/usr/local/include/vtk-5.10/vtkMath.h"
  ", line " <<
 1258
# 1257 "/usr/local/include/vtk-5.10/vtkMath.h"
  << "\n" "vtkMath::SolveLinear" " was deprecated for " "VTK 5.8" " and will be removed in a future version.  Use " "vtkPolynomialSolversUnivariate::SolveLinear" " instead." << "\n\n"; vtkOutputWindowDisplayGenericWarningText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0);}}
                                                                       ;
  return vtkPolynomialSolversUnivariate::SolveLinear( c0, c1, r1, num_roots );
}



inline void vtkMath::ClampValue(double *value, const double range[2])
{
  if (value && range)
    {
    if (*value < range[0])
      {
      *value = range[0];
      }
    else if (*value > range[1])
      {
      *value = range[1];
      }
    }
}


inline void vtkMath::ClampValue(
  double value, const double range[2], double *clamped_value)
{
  if (range && clamped_value)
    {
    if (value < range[0])
      {
      *clamped_value = range[0];
      }
    else if (value > range[1])
      {
      *clamped_value = range[1];
      }
    else
      {
      *clamped_value = value;
      }
    }
}


inline double vtkMath::ClampAndNormalizeValue(double value,
                                              const double range[2])
{
  (("pre: valid_range" && range[0]<=range[1]) ? static_cast<void> (0) : __assert_fail ("\"pre: valid_range\" && range[0]<=range[1]", "/usr/local/include/vtk-5.10/vtkMath.h", 1304, __PRETTY_FUNCTION__));

  double result;
  if(range[0]==range[1])
    {
      result=0.0;
    }
  else
    {

      if(value<range[0])
        {
          result=range[0];
        }
      else
        {
          if(value>range[1])
            {
              result=range[1];
            }
          else
            {
              result=value;
            }
        }


      result=( result - range[0] ) / ( range[1] - range[0] );
    }

  (("post: valid_result" && result>=0.0 && result<=1.0) ? static_cast<void> (0) : __assert_fail ("\"post: valid_result\" && result>=0.0 && result<=1.0", "/usr/local/include/vtk-5.10/vtkMath.h", 1334, __PRETTY_FUNCTION__));

  return result;
}
# 26 "/usr/local/include/vtk-5.10/vtkTriangle.h" 2

class vtkLine;
class vtkQuadric;
class vtkIncrementalPointLocator;

class __attribute__ ((visibility("default"))) vtkTriangle : public vtkCell
{
public:
  static vtkTriangle *New();
  typedef vtkCell Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkTriangle"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkTriangle",type) ) { return 1; } return vtkCell::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkTriangle::IsTypeOf(type); } static vtkTriangle* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkTriangle") ) { return static_cast<vtkTriangle *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkTriangle::New(); } public: vtkTriangle *NewInstance() const { return vtkTriangle::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  vtkCell *GetEdge(int edgeId);



  int GetCellType() {return VTK_TRIANGLE;};
  int GetCellDimension() {return 2;};
  int GetNumberOfEdges() {return 3;};
  int GetNumberOfFaces() {return 0;};
  vtkCell *GetFace(int) {return 0;};
  int CellBoundary(int subId, double pcoords[3], vtkIdList *pts);
  void Contour(double value, vtkDataArray *cellScalars,
               vtkIncrementalPointLocator *locator, vtkCellArray *verts,
               vtkCellArray *lines, vtkCellArray *polys,
               vtkPointData *inPd, vtkPointData *outPd,
               vtkCellData *inCd, vtkIdType cellId, vtkCellData *outCd);
  int EvaluatePosition(double x[3], double* closestPoint,
                       int& subId, double pcoords[3],
                       double& dist2, double *weights);
  void EvaluateLocation(int& subId, double pcoords[3], double x[3],
                        double *weights);
  int Triangulate(int index, vtkIdList *ptIds, vtkPoints *pts);
  void Derivatives(int subId, double pcoords[3], double *values,
                   int dim, double *derivs);
  virtual double *GetParametricCoords();



  double ComputeArea();




  void Clip(double value, vtkDataArray *cellScalars,
            vtkIncrementalPointLocator *locator, vtkCellArray *polys,
            vtkPointData *inPd, vtkPointData *outPd,
            vtkCellData *inCd, vtkIdType cellId, vtkCellData *outCd,
            int insideOut);



  static void InterpolationFunctions(double pcoords[3], double sf[3]);


  static void InterpolationDerivs(double pcoords[3], double derivs[6]);



  virtual void InterpolateFunctions(double pcoords[3], double sf[3])
    {
    vtkTriangle::InterpolationFunctions(pcoords,sf);
    }
  virtual void InterpolateDerivs(double pcoords[3], double derivs[6])
    {
    vtkTriangle::InterpolationDerivs(pcoords,derivs);
    }



  int *GetEdgeArray(int edgeId);




  int IntersectWithLine(double p1[3], double p2[3], double tol, double& t,
                        double x[3], double pcoords[3], int& subId);



  int GetParametricCenter(double pcoords[3]);




  double GetParametricDistance(double pcoords[3]);



  static void TriangleCenter(double p1[3], double p2[3], double p3[3],
                             double center[3]);




  static double TriangleArea(double p1[3], double p2[3], double p3[3]);






  static double Circumcircle(double p1[2], double p2[2], double p3[2],
                            double center[2]);
# 145 "/usr/local/include/vtk-5.10/vtkTriangle.h"
  static int BarycentricCoords(double x[2], double x1[2], double x2[2],
                               double x3[2], double bcoords[3]);






  static int ProjectTo2D(double x1[3], double x2[3], double x3[3],
                         double v1[2], double v2[2], double v3[2]);




  static void ComputeNormal(vtkPoints *p, int numPts, vtkIdType *pts,
                            double n[3]);



  static void ComputeNormal(double v1[3], double v2[3], double v3[3], double n[3]);



  static void ComputeNormalDirection(double v1[3], double v2[3], double v3[3],
                                     double n[3]);







  static int PointInTriangle(double x[3], double x1[3],
                             double x2[3], double x3[3],
                             double tol2);






  static void ComputeQuadric(double x1[3], double x2[3], double x3[3],
                             double quadric[4][4]);
  static void ComputeQuadric(double x1[3], double x2[3], double x3[3],
                             vtkQuadric *quadric);


protected:
  vtkTriangle();
  ~vtkTriangle();

  vtkLine *Line;

private:
  vtkTriangle(const vtkTriangle&);
  void operator=(const vtkTriangle&);
};


inline int vtkTriangle::GetParametricCenter(double pcoords[3])
{
  pcoords[0] = pcoords[1] = 1./3; pcoords[2] = 0.0;
  return 0;
}


inline void vtkTriangle::ComputeNormalDirection(double v1[3], double v2[3],
                                       double v3[3], double n[3])
{
  double ax, ay, az, bx, by, bz;


  ax = v3[0] - v2[0]; ay = v3[1] - v2[1]; az = v3[2] - v2[2];
  bx = v1[0] - v2[0]; by = v1[1] - v2[1]; bz = v1[2] - v2[2];

  n[0] = (ay * bz - az * by);
  n[1] = (az * bx - ax * bz);
  n[2] = (ax * by - ay * bx);
}


inline void vtkTriangle::ComputeNormal(double v1[3], double v2[3],
                                       double v3[3], double n[3])
{
  double length;

  vtkTriangle::ComputeNormalDirection(v1, v2, v3, n);

  if ( (length = sqrt((n[0]*n[0] + n[1]*n[1] + n[2]*n[2]))) != 0.0 )
    {
    n[0] /= length;
    n[1] /= length;
    n[2] /= length;
    }
}


inline void vtkTriangle::TriangleCenter(double p1[3], double p2[3],
                                        double p3[3], double center[3])
{
  center[0] = (p1[0]+p2[0]+p3[0]) / 3.0;
  center[1] = (p1[1]+p2[1]+p3[1]) / 3.0;
  center[2] = (p1[2]+p2[2]+p3[2]) / 3.0;
}


inline double vtkTriangle::TriangleArea(double p1[3], double p2[3], double p3[3])
{
  double a,b,c;
  a = vtkMath::Distance2BetweenPoints(p1,p2);
  b = vtkMath::Distance2BetweenPoints(p2,p3);
  c = vtkMath::Distance2BetweenPoints(p3,p1);
  return (0.25* sqrt(fabs(4.0*a*c - (a-b+c)*(a-b+c))));
}
# 25 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkPlane.h" 1
# 25 "/usr/local/include/vtk-5.10/vtkPlane.h"
# 1 "/usr/local/include/vtk-5.10/vtkImplicitFunction.h" 1
# 52 "/usr/local/include/vtk-5.10/vtkImplicitFunction.h"
class vtkAbstractTransform;

class __attribute__ ((visibility("default"))) vtkImplicitFunction : public vtkObject
{
public:
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkImplicitFunction"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkImplicitFunction",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkImplicitFunction::IsTypeOf(type); } static vtkImplicitFunction* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkImplicitFunction") ) { return static_cast<vtkImplicitFunction *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkImplicitFunction::New(); } public: vtkImplicitFunction *NewInstance() const { return vtkImplicitFunction::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  unsigned long GetMTime();




  double FunctionValue(const double x[3]);
  double FunctionValue(double x, double y, double z) {
    double xyz[3] = {x, y, z}; return this->FunctionValue(xyz); };




  void FunctionGradient(const double x[3], double g[3]);
  double *FunctionGradient(const double x[3]) {
    this->FunctionGradient(x,this->ReturnValue);
    return this->ReturnValue; };
  double *FunctionGradient(double x, double y, double z) {
    double xyz[3] = {x, y, z}; return this->FunctionGradient(xyz); };




  virtual void SetTransform(vtkAbstractTransform*);
  virtual void SetTransform(const double elements[16]);
  virtual vtkAbstractTransform *GetTransform () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkImplicitFunction.h" ", line " << 87 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Transform" " address " << this->Transform << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Transform; };






  virtual double EvaluateFunction(double x[3]) = 0;
  double EvaluateFunction(double x, double y, double z) {
    double xyz[3] = {x, y, z}; return this->EvaluateFunction(xyz); };






  virtual void EvaluateGradient(double x[3], double g[3]) = 0;

protected:
  vtkImplicitFunction();
  ~vtkImplicitFunction();

  vtkAbstractTransform *Transform;
  double ReturnValue[3];
private:
  vtkImplicitFunction(const vtkImplicitFunction&);
  void operator=(const vtkImplicitFunction&);
};
# 26 "/usr/local/include/vtk-5.10/vtkPlane.h" 2

class __attribute__ ((visibility("default"))) vtkPlane : public vtkImplicitFunction
{
public:


  static vtkPlane *New();

  typedef vtkImplicitFunction Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPlane"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPlane",type) ) { return 1; } return vtkImplicitFunction::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPlane::IsTypeOf(type); } static vtkPlane* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPlane") ) { return static_cast<vtkPlane *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPlane::New(); } public: vtkPlane *NewInstance() const { return vtkPlane::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  double EvaluateFunction(double x[3]);
  double EvaluateFunction(double x, double y, double z)
    {return this->vtkImplicitFunction::EvaluateFunction(x, y, z); } ;



  void EvaluateGradient(double x[3], double g[3]);



  virtual void SetNormal (double _arg1, double _arg2, double _arg3) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPlane.h" ", line " << 49 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Normal" " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ")" << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ((this->Normal[0] != _arg1)||(this->Normal[1] != _arg2)||(this->Normal[2] != _arg3)) { this->Normal[0] = _arg1; this->Normal[1] = _arg2; this->Normal[2] = _arg3; this->Modified(); } }; virtual void SetNormal (double _arg[3]) { this->SetNormal (_arg[0], _arg[1], _arg[2]); };
  virtual double *GetNormal () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPlane.h" ", line " << 50 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Normal" " pointer " << this->Normal << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Normal; } virtual void GetNormal (double data[3]) { for (int i=0; i<3; i++) { data[i] = this->Normal[i]; }};




  virtual void SetOrigin (double _arg1, double _arg2, double _arg3) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPlane.h" ", line " << 55 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Origin" " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ")" << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ((this->Origin[0] != _arg1)||(this->Origin[1] != _arg2)||(this->Origin[2] != _arg3)) { this->Origin[0] = _arg1; this->Origin[1] = _arg2; this->Origin[2] = _arg3; this->Modified(); } }; virtual void SetOrigin (double _arg[3]) { this->SetOrigin (_arg[0], _arg[1], _arg[2]); };
  virtual double *GetOrigin () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPlane.h" ", line " << 56 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Origin" " pointer " << this->Origin << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Origin; } virtual void GetOrigin (double data[3]) { for (int i=0; i<3; i++) { data[i] = this->Origin[i]; }};





  void Push(double distance);





  static void ProjectPoint(double x[3], double origin[3], double normal[3],
                           double xproj[3]);
  void ProjectPoint(double x[3], double xproj[3]);




  static void ProjectVector(double v[3], double origin[3], double normal[3],
                           double vproj[3]);
  void ProjectVector(double v[3], double vproj[3]);





  static void GeneralizedProjectPoint(double x[3], double origin[3],
                                      double normal[3], double xproj[3]);
  void GeneralizedProjectPoint(double x[3], double xproj[3]);




  static double Evaluate(double normal[3], double origin[3], double x[3]);




  static double DistanceToPlane(double x[3], double n[3], double p0[3]);
  double DistanceToPlane(double x[3]);
# 105 "/usr/local/include/vtk-5.10/vtkPlane.h"
  static int IntersectWithLine(double p1[3], double p2[3], double n[3],
                               double p0[3], double& t, double x[3]);
  int IntersectWithLine(double p1[3], double p2[3], double& t, double x[3]);

protected:
  vtkPlane();
  ~vtkPlane() {};

  double Normal[3];
  double Origin[3];

private:
  vtkPlane(const vtkPlane&);
  void operator=(const vtkPlane&);
};

inline double vtkPlane::Evaluate(double normal[3],
                                 double origin[3], double x[3])
{
  return normal[0]*(x[0]-origin[0]) + normal[1]*(x[1]-origin[1]) +
         normal[2]*(x[2]-origin[2]);
}

inline double vtkPlane::DistanceToPlane(double x[3], double n[3], double p0[3])
{

  return (((n[0]*(x[0]-p0[0]) + n[1]*(x[1]-p0[1]) + n[2]*(x[2]-p0[2]))<0?-(n[0]*(x[0]-p0[0]) + n[1]*(x[1]-p0[1]) + n[2]*(x[2]-p0[2])):(n[0]*(x[0]-p0[0]) + n[1]*(x[1]-p0[1]) + n[2]*(x[2]-p0[2])))
                                        );
}
# 26 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkOBBTree.h" 1
# 52 "/usr/local/include/vtk-5.10/vtkOBBTree.h"
# 1 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" 1
# 39 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
# 1 "/usr/local/include/vtk-5.10/vtkLocator.h" 1
# 55 "/usr/local/include/vtk-5.10/vtkLocator.h"
class vtkDataSet;
class vtkPolyData;

class __attribute__ ((visibility("default"))) vtkLocator : public vtkObject
{
public:
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkLocator"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkLocator",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkLocator::IsTypeOf(type); } static vtkLocator* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkLocator") ) { return static_cast<vtkLocator *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkLocator::New(); } public: vtkLocator *NewInstance() const { return vtkLocator::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  virtual void SetDataSet(vtkDataSet*);
  virtual vtkDataSet *GetDataSet () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 67 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "DataSet" " address " << this->DataSet << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->DataSet; };





  virtual void SetMaxLevel (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 73 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "MaxLevel" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->MaxLevel != (_arg<0?0:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg))) { this->MaxLevel = (_arg<0?0:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg)); this->Modified(); } } virtual int GetMaxLevelMinValue () { return 0; } virtual int GetMaxLevelMaxValue () { return static_cast< int >(~0u >> 1); };
  virtual int GetMaxLevel () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 74 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "MaxLevel" " of " << this->MaxLevel << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->MaxLevel; };





  virtual int GetLevel () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 80 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Level" " of " << this->Level << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Level; };






  virtual void SetAutomatic (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 87 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "Automatic" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Automatic != _arg) { this->Automatic = _arg; this->Modified(); } };
  virtual int GetAutomatic () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 88 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Automatic" " of " << this->Automatic << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Automatic; };
  virtual void AutomaticOn () { this->SetAutomatic(static_cast<int>(1));} virtual void AutomaticOff () { this->SetAutomatic(static_cast<int>(0));};




  virtual void SetTolerance (double _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 94 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Tolerance" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Tolerance != (_arg<0.0?0.0:(_arg>static_cast< double >(1.0e+299)?static_cast< double >(1.0e+299):_arg))) { this->Tolerance = (_arg<0.0?0.0:(_arg>static_cast< double >(1.0e+299)?static_cast< double >(1.0e+299):_arg)); this->Modified(); } } virtual double GetToleranceMinValue () { return 0.0; } virtual double GetToleranceMaxValue () { return static_cast< double >(1.0e+299); };
  virtual double GetTolerance () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 95 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Tolerance" " of " << this->Tolerance << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Tolerance; };




  virtual void Update();



  virtual void Initialize();



  virtual void BuildLocator() = 0;



  virtual void FreeSearchStructure() = 0;






  virtual void GenerateRepresentation(int level, vtkPolyData *pd) = 0;



  virtual unsigned long GetBuildTime () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkLocator.h" ", line " << 123 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "BuildTime" " of " << this->BuildTime << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->BuildTime; };



  virtual void Register(vtkObjectBase *o);
  virtual void UnRegister(vtkObjectBase *o);
protected:
  vtkLocator();
  ~vtkLocator();

  vtkDataSet *DataSet;
  int Automatic;
  double Tolerance;
  int MaxLevel;
  int Level;

  vtkTimeStamp BuildTime;

  virtual void ReportReferences(vtkGarbageCollector*);
private:
  vtkLocator(const vtkLocator&);
  void operator=(const vtkLocator&);
};
# 40 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" 2

class vtkCellArray;
class vtkGenericCell;
class vtkIdList;
class vtkPoints;

class __attribute__ ((visibility("default"))) vtkAbstractCellLocator : public vtkLocator
{
public:
  typedef vtkLocator Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkAbstractCellLocator"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkAbstractCellLocator",type) ) { return 1; } return vtkLocator::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkAbstractCellLocator::IsTypeOf(type); } static vtkAbstractCellLocator* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkAbstractCellLocator") ) { return static_cast<vtkAbstractCellLocator *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkAbstractCellLocator::New(); } public: vtkAbstractCellLocator *NewInstance() const { return vtkAbstractCellLocator::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);






  virtual void SetNumberOfCellsPerNode (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 57 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "NumberOfCellsPerNode" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->NumberOfCellsPerNode != (_arg<1?1:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg))) { this->NumberOfCellsPerNode = (_arg<1?1:(_arg>static_cast< int >(~0u >> 1)?static_cast< int >(~0u >> 1):_arg)); this->Modified(); } } virtual int GetNumberOfCellsPerNodeMinValue () { return 1; } virtual int GetNumberOfCellsPerNodeMaxValue () { return static_cast< int >(~0u >> 1); };
  virtual int GetNumberOfCellsPerNode () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 58 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "NumberOfCellsPerNode" " of " << this->NumberOfCellsPerNode << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->NumberOfCellsPerNode; };







  virtual void SetCacheCellBounds (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 66 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "CacheCellBounds" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->CacheCellBounds != _arg) { this->CacheCellBounds = _arg; this->Modified(); } };
  virtual int GetCacheCellBounds () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 67 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "CacheCellBounds" " of " << this->CacheCellBounds << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->CacheCellBounds; };
  virtual void CacheCellBoundsOn () { this->SetCacheCellBounds(static_cast<int>(1));} virtual void CacheCellBoundsOff () { this->SetCacheCellBounds(static_cast<int>(0));};





  virtual void SetRetainCellLists (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 74 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "RetainCellLists" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->RetainCellLists != _arg) { this->RetainCellLists = _arg; this->Modified(); } };
  virtual int GetRetainCellLists () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 75 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "RetainCellLists" " of " << this->RetainCellLists << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->RetainCellLists; };
  virtual void RetainCellListsOn () { this->SetRetainCellLists(static_cast<int>(1));} virtual void RetainCellListsOff () { this->SetRetainCellLists(static_cast<int>(0));};






  virtual void SetLazyEvaluation (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 83 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "LazyEvaluation" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->LazyEvaluation != _arg) { this->LazyEvaluation = _arg; this->Modified(); } };
  virtual int GetLazyEvaluation () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 84 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "LazyEvaluation" " of " << this->LazyEvaluation << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->LazyEvaluation; };
  virtual void LazyEvaluationOn () { this->SetLazyEvaluation(static_cast<int>(1));} virtual void LazyEvaluationOff () { this->SetLazyEvaluation(static_cast<int>(0));};







  virtual void SetUseExistingSearchStructure (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 93 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "UseExistingSearchStructure" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->UseExistingSearchStructure != _arg) { this->UseExistingSearchStructure = _arg; this->Modified(); } };
  virtual int GetUseExistingSearchStructure () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h" ", line " << 94 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "UseExistingSearchStructure" " of " << this->UseExistingSearchStructure << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->UseExistingSearchStructure; };
  virtual void UseExistingSearchStructureOn () { this->SetUseExistingSearchStructure(static_cast<int>(1));} virtual void UseExistingSearchStructureOff () { this->SetUseExistingSearchStructure(static_cast<int>(0));};




  virtual int IntersectWithLine(
    double p1[3], double p2[3], double tol, double& t, double x[3],
    double pcoords[3], int &subId);




  virtual int IntersectWithLine(
    double p1[3], double p2[3], double tol, double& t, double x[3],
    double pcoords[3], int &subId, vtkIdType &cellId);




  virtual int IntersectWithLine(
    double p1[3], double p2[3], double tol, double& t, double x[3],
    double pcoords[3], int &subId, vtkIdType &cellId, vtkGenericCell *cell);
# 129 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
  virtual int IntersectWithLine(
    const double p1[3], const double p2[3],
    vtkPoints *points, vtkIdList *cellIds);





  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkIdType &cellId, int &subId, double& dist2);
# 151 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2);
# 163 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3], vtkIdType &cellId,
    int &subId, double& dist2);
# 181 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2);
# 202 "/usr/local/include/vtk-5.10/vtkAbstractCellLocator.h"
  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2, int &inside);





  virtual void FindCellsWithinBounds(double *bbox, vtkIdList *cells);







  virtual void FindCellsAlongLine(
    double p1[3], double p2[3], double tolerance, vtkIdList *cells);




  virtual vtkIdType FindCell(double x[3]);





  virtual vtkIdType FindCell(
    double x[3], double tol2, vtkGenericCell *GenCell,
    double pcoords[3], double *weights);





  virtual bool InsideCellBounds(double x[3], vtkIdType cell_ID);

protected:
   vtkAbstractCellLocator();
  ~vtkAbstractCellLocator();







  virtual bool StoreCellBounds();
  virtual void FreeCellBounds();

  int NumberOfCellsPerNode;
  int RetainCellLists;
  int CacheCellBounds;
  int LazyEvaluation;
  int UseExistingSearchStructure;
  vtkGenericCell *GenericCell;

  double (*CellBounds)[6];


private:
  vtkAbstractCellLocator(const vtkAbstractCellLocator&);
  void operator=(const vtkAbstractCellLocator&);
};
# 53 "/usr/local/include/vtk-5.10/vtkOBBTree.h" 2

class vtkMatrix4x4;





class __attribute__ ((visibility("default"))) vtkOBBNode {
public:
  vtkOBBNode();
  ~vtkOBBNode();

  double Corner[3];
  double Axes[3][3];
  vtkOBBNode *Parent;
  vtkOBBNode **Kids;
  vtkIdList *Cells;
  void DebugPrintTree( int level, double *leaf_vol, int *minCells,
                       int *maxCells );
};



class __attribute__ ((visibility("default"))) vtkOBBTree : public vtkAbstractCellLocator
{
public:
  typedef vtkAbstractCellLocator Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkOBBTree"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkOBBTree",type) ) { return 1; } return vtkAbstractCellLocator::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkOBBTree::IsTypeOf(type); } static vtkOBBTree* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkOBBTree") ) { return static_cast<vtkOBBTree *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkOBBTree::New(); } public: vtkOBBTree *NewInstance() const { return vtkOBBTree::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  static vtkOBBTree *New();
# 99 "/usr/local/include/vtk-5.10/vtkOBBTree.h"
  virtual int IntersectWithLine(
    double a0[3], double a1[3], double tol,
    double& t, double x[3], double pcoords[3],
    int &subId)
  {
    return Superclass::
      IntersectWithLine(a0, a1, tol,t, x, pcoords, subId);
  }



  virtual int IntersectWithLine(
    double a0[3], double a1[3], double tol,
    double& t, double x[3], double pcoords[3],
    int &subId, vtkIdType &cellId)
  {
    return Superclass::
      IntersectWithLine(a0, a1, tol,t, x, pcoords, subId, cellId);
  }
# 129 "/usr/local/include/vtk-5.10/vtkOBBTree.h"
  int IntersectWithLine(const double a0[3], const double a1[3],
                        vtkPoints *points, vtkIdList *cellIds);





  int IntersectWithLine(double a0[3], double a1[3], double tol,
                        double& t, double x[3], double pcoords[3],
                        int &subId, vtkIdType &cellId, vtkGenericCell *cell);
# 150 "/usr/local/include/vtk-5.10/vtkOBBTree.h"
  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkIdType &cellId, int &subId, double& dist2)
  {
    Superclass::
      FindClosestPoint(x, closestPoint, cellId, subId, dist2);
  }



  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2)
  {
    Superclass::
      FindClosestPoint(x, closestPoint, cell, cellId, subId, dist2);
  }



  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3], vtkIdType &cellId,
    int &subId, double& dist2)
  {
    return Superclass::FindClosestPointWithinRadius
      (x, radius, closestPoint, cellId, subId, dist2);
  }



  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2)
  {
    return Superclass::FindClosestPointWithinRadius
      (x, radius, closestPoint, cell, cellId, subId, dist2);
  }



  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius, double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2, int &inside)
  {
    return Superclass::FindClosestPointWithinRadius
      (x, radius, closestPoint, cell, cellId, subId, dist2, inside);
  }





  static void ComputeOBB(vtkPoints *pts, double corner[3], double max[3],
                  double mid[3], double min[3], double size[3]);






  void ComputeOBB(vtkDataSet *input, double corner[3], double max[3],
                  double mid[3], double min[3], double size[3]);





  int InsideOrOutside(const double point[3]);






  int DisjointOBBNodes( vtkOBBNode *nodeA, vtkOBBNode *nodeB,
                        vtkMatrix4x4 *XformBtoA );



  int LineIntersectsNode( vtkOBBNode *pA, double b0[3], double b1[3] );



  int TriangleIntersectsNode( vtkOBBNode *pA,
                              double p0[3], double p1[3],
                              double p2[3], vtkMatrix4x4 *XformBtoA );




  int IntersectWithOBBTree( vtkOBBTree *OBBTreeB, vtkMatrix4x4 *XformBtoA,
                            int(*function)( vtkOBBNode *nodeA,
                                            vtkOBBNode *nodeB,
                                            vtkMatrix4x4 *Xform,
                                            void *arg ),
                            void *data_arg );




  void FreeSearchStructure();
  void BuildLocator();
# 266 "/usr/local/include/vtk-5.10/vtkOBBTree.h"
  void GenerateRepresentation(int level, vtkPolyData *pd);


protected:
  vtkOBBTree();
  ~vtkOBBTree();




  void ComputeOBB(vtkIdList *cells, double corner[3], double max[3],
                       double mid[3], double min[3], double size[3]);

  vtkOBBNode *Tree;
  void BuildTree(vtkIdList *cells, vtkOBBNode *parent, int level);
  vtkPoints *PointsList;
  int *InsertedPoints;
  int OBBCount;

  void DeleteTree(vtkOBBNode *OBBptr);
  void GeneratePolygons(vtkOBBNode *OBBptr, int level, int repLevel,
                        vtkPoints* pts, vtkCellArray *polys);


private:
  vtkOBBTree(const vtkOBBTree&);
  void operator=(const vtkOBBTree&);
};
# 27 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" 1
# 60 "/usr/local/include/vtk-5.10/vtkCleanPolyData.h"
# 1 "/usr/local/include/vtk-5.10/vtkPolyDataAlgorithm.h" 1
# 37 "/usr/local/include/vtk-5.10/vtkPolyDataAlgorithm.h"
# 1 "/usr/local/include/vtk-5.10/vtkAlgorithm.h" 1
# 34 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
class vtkAbstractArray;
class vtkAlgorithmInternals;
class vtkAlgorithmOutput;
class vtkCollection;
class vtkDataArray;
class vtkDataObject;
class vtkExecutive;
class vtkInformation;
class vtkInformationInformationVectorKey;
class vtkInformationIntegerKey;
class vtkInformationStringKey;
class vtkInformationStringVectorKey;
class vtkInformationVector;

class __attribute__ ((visibility("default"))) vtkAlgorithm : public vtkObject
{
public:
  static vtkAlgorithm *New();
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkAlgorithm"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkAlgorithm",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkAlgorithm::IsTypeOf(type); } static vtkAlgorithm* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkAlgorithm") ) { return static_cast<vtkAlgorithm *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkAlgorithm::New(); } public: vtkAlgorithm *NewInstance() const { return vtkAlgorithm::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  int HasExecutive();




  vtkExecutive* GetExecutive();





  virtual void SetExecutive(vtkExecutive* executive);
# 93 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual int ProcessRequest(vtkInformation* request,
                             vtkInformationVector** inInfo,
                             vtkInformationVector* outInfo);




  int ProcessRequest(vtkInformation* request,
                     vtkCollection* inInfo,
                     vtkInformationVector* outInfo);





  virtual int
  ComputePipelineMTime(vtkInformation* request,
                       vtkInformationVector** inInfoVec,
                       vtkInformationVector* outInfoVec,
                       int requestFromOutputPort,
                       unsigned long* mtime);







  virtual int ModifyRequest(vtkInformation* request, int when);






  vtkInformation* GetInputPortInformation(int port);






  vtkInformation* GetOutputPortInformation(int port);



  virtual vtkInformation *GetInformation () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 139 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Information" " address " << this->Information << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Information; };
  virtual void SetInformation(vtkInformation*);



  int GetNumberOfInputPorts();



  int GetNumberOfOutputPorts();



  virtual void Register(vtkObjectBase* o);
  virtual void UnRegister(vtkObjectBase* o);




  virtual void SetAbortExecute (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 158 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "AbortExecute" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->AbortExecute != _arg) { this->AbortExecute = _arg; this->Modified(); } };
  virtual int GetAbortExecute () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 159 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "AbortExecute" " of " << this->AbortExecute << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->AbortExecute; };
  virtual void AbortExecuteOn () { this->SetAbortExecute(static_cast<int>(1));} virtual void AbortExecuteOff () { this->SetAbortExecute(static_cast<int>(0));};



  virtual void SetProgress (double _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 164 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Progress" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Progress != (_arg<0.0?0.0:(_arg>1.0?1.0:_arg))) { this->Progress = (_arg<0.0?0.0:(_arg>1.0?1.0:_arg)); this->Modified(); } } virtual double GetProgressMinValue () { return 0.0; } virtual double GetProgressMaxValue () { return 1.0; };
  virtual double GetProgress () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 165 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Progress" " of " << this->Progress << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Progress; };





  void UpdateProgress(double amount);







  void SetProgressText(const char* ptext);
  virtual char* GetProgressText () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 180 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ProgressText" " of " << (this->ProgressText?this->ProgressText:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ProgressText; };




  virtual unsigned long GetErrorCode () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 185 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ErrorCode" " of " << this->ErrorCode << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ErrorCode; };


  int AbortExecute;



  static vtkInformationIntegerKey* INPUT_IS_OPTIONAL();
  static vtkInformationIntegerKey* INPUT_IS_REPEATABLE();
  static vtkInformationInformationVectorKey* INPUT_REQUIRED_FIELDS();
  static vtkInformationStringVectorKey* INPUT_REQUIRED_DATA_TYPE();
  static vtkInformationInformationVectorKey* INPUT_ARRAYS_TO_PROCESS();
  static vtkInformationIntegerKey* INPUT_PORT();
  static vtkInformationIntegerKey* INPUT_CONNECTION();
# 208 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void SetInputArrayToProcess(int idx, int port, int connection,
                              int fieldAssociation,
                              const char *name);
  virtual void SetInputArrayToProcess(int idx, int port, int connection,
                              int fieldAssociation,
                              int fieldAttributeType);
  virtual void SetInputArrayToProcess(int idx, vtkInformation *info);
# 238 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void SetInputArrayToProcess(int idx, int port, int connection,
                              const char* fieldAssociation,
                              const char* attributeTypeorName);



  vtkInformation *GetInputArrayInformation(int idx);







  void RemoveAllInputs();




  vtkDataObject* GetOutputDataObject(int port);




  vtkDataObject *GetInputDataObject(int port,
                                    int connection);
# 277 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void SetInputConnection(int port, vtkAlgorithmOutput* input);
  virtual void SetInputConnection(vtkAlgorithmOutput* input);
# 288 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void AddInputConnection(int port, vtkAlgorithmOutput* input);
  virtual void AddInputConnection(vtkAlgorithmOutput* input);
# 299 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void RemoveInputConnection(int port, vtkAlgorithmOutput* input);






  vtkAlgorithmOutput* GetOutputPort(int index);
  vtkAlgorithmOutput* GetOutputPort() {
    return this->GetOutputPort(0); }



  int GetNumberOfInputConnections(int port);



  int GetTotalNumberOfInputConnections();



  vtkAlgorithmOutput* GetInputConnection(int port, int index);



  virtual void Update();



  virtual void UpdateInformation();



  virtual void UpdateWholeExtent();




  void ConvertTotalInputToPortConnection(int ind, int& port, int& conn);
# 347 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void SetReleaseDataFlag(int);
  virtual int GetReleaseDataFlag();
  void ReleaseDataFlagOn();
  void ReleaseDataFlagOff();
# 359 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  int UpdateExtentIsEmpty(vtkDataObject *output);
  int UpdateExtentIsEmpty(vtkInformation *pinfo, int extentType);




  static void SetDefaultExecutivePrototype(vtkExecutive* proto);





  virtual double ComputePriority();




  static vtkInformationIntegerKey* PRESERVES_DATASET();
  static vtkInformationIntegerKey* PRESERVES_GEOMETRY();
  static vtkInformationIntegerKey* PRESERVES_BOUNDS();
  static vtkInformationIntegerKey* PRESERVES_TOPOLOGY();
  static vtkInformationIntegerKey* PRESERVES_ATTRIBUTES();
  static vtkInformationIntegerKey* PRESERVES_RANGES();
  static vtkInformationIntegerKey* MANAGES_METAINFORMATION();

protected:
  vtkAlgorithm();
  ~vtkAlgorithm();



  static vtkInformationIntegerKey* PORT_REQUIREMENTS_FILLED();


  vtkInformation* Information;





  virtual int FillInputPortInformation(int port, vtkInformation* info);





  virtual int FillOutputPortInformation(int port, vtkInformation* info);



  virtual void SetNumberOfInputPorts(int n);



  virtual void SetNumberOfOutputPorts(int n);


  int InputPortIndexInRange(int index, const char* action);
  int OutputPortIndexInRange(int index, const char* action);




  int GetInputArrayAssociation(int idx, vtkInformationVector **inputVector);
# 431 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  int GetInputArrayAssociation(int idx, int connection,
                               vtkInformationVector **inputVector);
  int GetInputArrayAssociation(int idx, vtkDataObject* input);





  vtkDataArray *GetInputArrayToProcess(int idx,vtkInformationVector **inputVector);
  vtkDataArray *GetInputArrayToProcess(int idx,
                                       vtkInformationVector **inputVector,
                                       int& association);
# 451 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  vtkDataArray *GetInputArrayToProcess(int idx,
                                       int connection,
                                       vtkInformationVector **inputVector);
  vtkDataArray *GetInputArrayToProcess(int idx,
                                       int connection,
                                       vtkInformationVector **inputVector,
                                       int& association);
  vtkDataArray *GetInputArrayToProcess(int idx,
                                       vtkDataObject* input);
  vtkDataArray *GetInputArrayToProcess(int idx,
                                       vtkDataObject* input,
                                       int& association);





  vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,vtkInformationVector **inputVector);
  vtkAbstractArray *GetInputAbstractArrayToProcess
    (int idx, vtkInformationVector **inputVector, int& association);
# 479 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,
                                       int connection,
                                       vtkInformationVector **inputVector);
  vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,
                                       int connection,
                                       vtkInformationVector **inputVector,
                                       int& association);
  vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,
                                       vtkDataObject* input);
  vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,
                                       vtkDataObject* input,
                                       int& association);
# 500 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  vtkInformation *GetInputArrayFieldInformation(int idx,
                                                vtkInformationVector **inputVector);







  virtual vtkExecutive* CreateDefaultExecutive();




  virtual void SetErrorCode (unsigned long _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkAlgorithm.h" ", line " << 514 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ErrorCode" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ErrorCode != _arg) { this->ErrorCode = _arg; this->Modified(); } };
  unsigned long ErrorCode;


  double Progress;
  char *ProgressText;


  virtual void ReportReferences(vtkGarbageCollector*);
# 531 "/usr/local/include/vtk-5.10/vtkAlgorithm.h"
  virtual void SetNthInputConnection(int port, int index,
                                     vtkAlgorithmOutput* input);






  virtual void SetNumberOfInputConnections(int port, int n);

  static vtkExecutive* DefaultExecutivePrototype;

private:
  vtkExecutive* Executive;
  vtkInformationVector* InputPortInformation;
  vtkInformationVector* OutputPortInformation;
  vtkAlgorithmInternals* AlgorithmInternal;
  static void ConnectionAdd(vtkAlgorithm* producer, int producerPort,
                            vtkAlgorithm* consumer, int consumerPort);
  static void ConnectionRemove(vtkAlgorithm* producer, int producerPort,
                               vtkAlgorithm* consumer, int consumerPort);
  static void ConnectionRemoveAllInput(vtkAlgorithm* consumer, int port);
  static void ConnectionRemoveAllOutput(vtkAlgorithm* producer, int port);

private:
  vtkAlgorithm(const vtkAlgorithm&);
  void operator=(const vtkAlgorithm&);
};
# 38 "/usr/local/include/vtk-5.10/vtkPolyDataAlgorithm.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkPolyData.h" 1
# 57 "/usr/local/include/vtk-5.10/vtkPolyData.h"
# 1 "/usr/local/include/vtk-5.10/vtkPointSet.h" 1
# 29 "/usr/local/include/vtk-5.10/vtkPointSet.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataSet.h" 1
# 40 "/usr/local/include/vtk-5.10/vtkDataSet.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataObject.h" 1
# 37 "/usr/local/include/vtk-5.10/vtkDataObject.h"
class vtkAbstractArray;
class vtkAlgorithmOutput;
class vtkDataSetAttributes;
class vtkExecutive;
class vtkFieldData;
class vtkInformation;
class vtkProcessObject;
class vtkSource;
class vtkStreamingDemandDrivenPipelineToDataObjectFriendship;
class vtkExtentTranslator;
class vtkInformationDataObjectKey;
class vtkInformationDoubleKey;
class vtkInformationDoubleVectorKey;
class vtkInformationIntegerKey;
class vtkInformationIntegerPointerKey;
class vtkInformationIntegerVectorKey;
class vtkInformationStringKey;
class vtkInformationVector;
class vtkStreamingDemandDrivenPipeline;
class vtkInformationInformationVectorKey;





class __attribute__ ((visibility("default"))) vtkDataObject : public vtkObject
{
public:
  static vtkDataObject *New();

  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDataObject"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDataObject",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDataObject::IsTypeOf(type); } static vtkDataObject* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDataObject") ) { return static_cast<vtkDataObject *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDataObject::New(); } public: vtkDataObject *NewInstance() const { return vtkDataObject::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  virtual vtkSource *GetSource () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataObject.h" ", line " << 72 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Source" " address " << this->Source << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Source; };
  void SetSource(vtkSource *s);



  virtual vtkInformation *GetInformation () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataObject.h" ", line " << 77 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Information" " address " << this->Information << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Information; };
  virtual void SetInformation(vtkInformation*);




  virtual vtkInformation *GetPipelineInformation () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataObject.h" ", line " << 83 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "PipelineInformation" " address " << this->PipelineInformation << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PipelineInformation; };
  virtual void SetPipelineInformation(vtkInformation*);



  virtual vtkAlgorithmOutput* GetProducerPort();




  unsigned long int GetMTime();



  virtual void Initialize();






  void ReleaseData();




  int ShouldIReleaseData();



  virtual int GetDataReleased () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataObject.h" ", line " << 113 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "DataReleased" " of " << this->DataReleased << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->DataReleased; };




  void SetReleaseDataFlag(int);
  int GetReleaseDataFlag();
  virtual void ReleaseDataFlagOn () { this->SetReleaseDataFlag(static_cast<int>(1));} virtual void ReleaseDataFlagOff () { this->SetReleaseDataFlag(static_cast<int>(0));};




  static void SetGlobalReleaseDataFlag(int val);
  void GlobalReleaseDataFlagOn() {this->SetGlobalReleaseDataFlag(1);};
  void GlobalReleaseDataFlagOff() {this->SetGlobalReleaseDataFlag(0);};
  static int GetGlobalReleaseDataFlag();



  virtual void SetFieldData(vtkFieldData*);
  virtual vtkFieldData *GetFieldData () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataObject.h" ", line " << 133 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "FieldData" " address " << this->FieldData << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FieldData; };


  virtual void Register(vtkObjectBase* o);
  virtual void UnRegister(vtkObjectBase* o);







  virtual void Update();
# 154 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void UpdateInformation();






  virtual void PropagateUpdateExtent();
# 170 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void TriggerAsynchronousUpdate();
# 180 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void UpdateData();







  virtual unsigned long GetEstimatedMemorySize();





  virtual void SetUpdateExtent(int piece,int numPieces, int ghostLevel);
  void SetUpdateExtent(int piece, int numPieces)
    {this->SetUpdateExtent(piece, numPieces, 0);}
# 206 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void SetUpdateExtent(int x0, int x1, int y0, int y1, int z0, int z1);
  virtual void SetUpdateExtent(int extent[6]);
  virtual int* GetUpdateExtent();
  virtual void GetUpdateExtent(int& x0, int& x1, int& y0, int& y1,
                               int& z0, int& z1);
  virtual void GetUpdateExtent(int extent[6]);






  virtual int GetDataObjectType() {return 7;}




  unsigned long GetUpdateTime();






  void SetUpdateExtentToWholeExtent();




  unsigned long GetPipelineMTime();







  virtual unsigned long GetActualMemorySize();



  void CopyInformation( vtkDataObject *data );



  virtual void CopyTypeSpecificInformation( vtkDataObject *data )
    {this->CopyInformation( data );};




  void SetUpdatePiece(int piece);
  void SetUpdateNumberOfPieces(int num);
  virtual int GetUpdatePiece();
  virtual int GetUpdateNumberOfPieces();




  void SetUpdateGhostLevel(int level);
  virtual int GetUpdateGhostLevel();
# 275 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void SetRequestExactExtent(int flag);
  virtual int GetRequestExactExtent();
  virtual void RequestExactExtentOn () { this->SetRequestExactExtent(static_cast<int>(1));} virtual void RequestExactExtentOff () { this->SetRequestExactExtent(static_cast<int>(0));};





  virtual void SetWholeExtent(int x0, int x1, int y0, int y1, int z0, int z1);
  virtual void SetWholeExtent(int extent[6]);
  virtual int* GetWholeExtent();
  virtual void GetWholeExtent(int& x0, int& x1, int& y0, int& y1,
                              int& z0, int& z1);
  virtual void GetWholeExtent(int extent[6]);





  virtual void SetWholeBoundingBox(double x0, double x1, double y0,
                                   double y1, double z0, double z1);
  virtual void SetWholeBoundingBox(double bb[6]);
  virtual double* GetWholeBoundingBox();
  virtual void GetWholeBoundingBox(double& x0, double& x1, double& y0,
                                   double& y1, double& z0, double& z1);
  virtual void GetWholeBoundingBox(double extent[6]);






  virtual void SetMaximumNumberOfPieces(int);
  virtual int GetMaximumNumberOfPieces();
# 317 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual void CopyInformationToPipeline(vtkInformation* request,
                                         vtkInformation* input,
                                         vtkInformation* output,
                                         int forceCopy);




  void CopyInformationToPipeline(vtkInformation* request,
                                 vtkInformation* input)
    {
      this->CopyInformationToPipeline(request, input, this->PipelineInformation, 0);
    }




  virtual void CopyInformationFromPipeline(vtkInformation* request);






  static vtkInformation *GetActiveFieldInformation(vtkInformation *info,
    int fieldAssociation, int attributeType);





  static vtkInformation *GetNamedFieldInformation(vtkInformation *info,
    int fieldAssociation, const char *name);



  static void RemoveNamedFieldInformation(vtkInformation *info,
                                          int fieldAssociation,
                                          const char *name);






  static vtkInformation *SetActiveAttribute(vtkInformation *info,
    int fieldAssociation, const char *attributeName, int attributeType);
# 373 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  static void SetActiveAttributeInfo(vtkInformation *info,
    int fieldAssociation, int attributeType, const char *name, int arrayType,
    int numComponents, int numTuples);




  static void SetPointDataActiveScalarInfo(vtkInformation *info,
    int arrayType, int numComponents);





  void DataHasBeenGenerated();





  virtual void PrepareForNewData() {this->Initialize();};




  virtual void ShallowCopy(vtkDataObject *src);
  virtual void DeepCopy(vtkDataObject *src);



  void SetExtentTranslator(vtkExtentTranslator* translator);
  vtkExtentTranslator* GetExtentTranslator();
# 413 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual int GetExtentType() { return 0; };




  virtual void Crop();




  enum FieldAssociations
  {
    FIELD_ASSOCIATION_POINTS,
    FIELD_ASSOCIATION_CELLS,
    FIELD_ASSOCIATION_NONE,
    FIELD_ASSOCIATION_POINTS_THEN_CELLS,
    FIELD_ASSOCIATION_VERTICES,
    FIELD_ASSOCIATION_EDGES,
    FIELD_ASSOCIATION_ROWS,
    NUMBER_OF_ASSOCIATIONS
  };






  enum AttributeTypes
  {
    POINT,
    CELL,
    FIELD,
    POINT_THEN_CELL,
    VERTEX,
    EDGE,
    ROW,
    NUMBER_OF_ATTRIBUTE_TYPES
  };
# 467 "/usr/local/include/vtk-5.10/vtkDataObject.h"
  virtual vtkDataSetAttributes* GetAttributes(int type);






  virtual vtkFieldData* GetAttributesAsFieldData(int type);





  virtual int GetAttributeTypeForArray(vtkAbstractArray* arr);



  virtual vtkIdType GetNumberOfElements(int type);




  enum FieldOperations
  {
    FIELD_OPERATION_PRESERVED,
    FIELD_OPERATION_REINTERPOLATED,
    FIELD_OPERATION_MODIFIED,
    FIELD_OPERATION_REMOVED
  };





  static const char* GetAssociationTypeAsString(int associationType);

  static vtkInformationStringKey* DATA_TYPE_NAME();
  static vtkInformationDataObjectKey* DATA_OBJECT();
  static vtkInformationIntegerKey* DATA_EXTENT_TYPE();
  static vtkInformationIntegerPointerKey* DATA_EXTENT();
  static vtkInformationIntegerKey* DATA_PIECE_NUMBER();
  static vtkInformationIntegerKey* DATA_NUMBER_OF_PIECES();
  static vtkInformationIntegerKey* DATA_NUMBER_OF_GHOST_LEVELS();
  static vtkInformationDoubleKey* DATA_RESOLUTION();
  static vtkInformationDoubleVectorKey* DATA_TIME_STEPS();
  static vtkInformationInformationVectorKey* POINT_DATA_VECTOR();
  static vtkInformationInformationVectorKey* CELL_DATA_VECTOR();
  static vtkInformationInformationVectorKey* VERTEX_DATA_VECTOR();
  static vtkInformationInformationVectorKey* EDGE_DATA_VECTOR();
  static vtkInformationIntegerKey* FIELD_ARRAY_TYPE();
  static vtkInformationIntegerKey* FIELD_ASSOCIATION();
  static vtkInformationIntegerKey* FIELD_ATTRIBUTE_TYPE();
  static vtkInformationIntegerKey* FIELD_ACTIVE_ATTRIBUTE();
  static vtkInformationIntegerKey* FIELD_NUMBER_OF_COMPONENTS();
  static vtkInformationIntegerKey* FIELD_NUMBER_OF_TUPLES();
  static vtkInformationIntegerKey* FIELD_OPERATION();
  static vtkInformationDoubleVectorKey* FIELD_RANGE();
  static vtkInformationDoubleVectorKey* PIECE_FIELD_RANGE();
  static vtkInformationStringKey* FIELD_ARRAY_NAME();
  static vtkInformationIntegerVectorKey* PIECE_EXTENT();
  static vtkInformationStringKey* FIELD_NAME();
  static vtkInformationDoubleVectorKey* ORIGIN();
  static vtkInformationDoubleVectorKey* SPACING();
  static vtkInformationIntegerKey* DATA_GEOMETRY_UNMODIFIED();


  static vtkInformationDataObjectKey* SIL();




  static vtkDataObject* GetData(vtkInformation* info);
  static vtkDataObject* GetData(vtkInformationVector* v, int i=0);


protected:

  vtkDataObject();
  ~vtkDataObject();


  vtkFieldData *FieldData;


  vtkSource *Source;


  int DataReleased;


  vtkTimeStamp UpdateTime;


  vtkExecutive* GetExecutive();


  int GetPortNumber();

  virtual void ReportReferences(vtkGarbageCollector*);


  vtkInformation* Information;



  vtkInformation* PipelineInformation;



  vtkStreamingDemandDrivenPipeline* TrySDDP(const char* method);
  typedef vtkStreamingDemandDrivenPipeline SDDP;



  friend class vtkStreamingDemandDrivenPipelineToDataObjectFriendship;


  static const char AssociationNames[NUMBER_OF_ASSOCIATIONS][55];

private:

  void InternalDataObjectCopy(vtkDataObject *src);

private:
  vtkDataObject(const vtkDataObject&);
  void operator=(const vtkDataObject&);
};
# 41 "/usr/local/include/vtk-5.10/vtkDataSet.h" 2

class vtkCell;
class vtkCellData;
class vtkCellTypes;
class vtkGenericCell;
class vtkIdList;
class vtkPointData;
class vtkSourceToDataSetFriendship;

class __attribute__ ((visibility("default"))) vtkDataSet : public vtkDataObject
{
public:
  typedef vtkDataObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDataSet"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDataSet",type) ) { return 1; } return vtkDataObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDataSet::IsTypeOf(type); } static vtkDataSet* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDataSet") ) { return static_cast<vtkDataSet *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDataSet::New(); } public: vtkDataSet *NewInstance() const { return vtkDataSet::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);






  virtual void CopyStructure(vtkDataSet *ds) = 0;





  virtual void CopyAttributes(vtkDataSet *ds);




  virtual vtkIdType GetNumberOfPoints() = 0;




  virtual vtkIdType GetNumberOfCells() = 0;




  virtual double *GetPoint(vtkIdType ptId) = 0;






  virtual void GetPoint(vtkIdType id, double x[3]);




  virtual vtkCell *GetCell(vtkIdType cellId) = 0;







  virtual void GetCell(vtkIdType cellId, vtkGenericCell *cell) = 0;
# 114 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  virtual void GetCellBounds(vtkIdType cellId, double bounds[6]);





  virtual int GetCellType(vtkIdType cellId) = 0;
# 130 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  virtual void GetCellTypes(vtkCellTypes *types);





  virtual void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) = 0;





  virtual void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) = 0;







  virtual void GetCellNeighbors(vtkIdType cellId, vtkIdList *ptIds,
                                vtkIdList *cellIds);







  vtkIdType FindPoint(double x, double y, double z)
    {
    double xyz[3];
    xyz[0] = x; xyz[1] = y; xyz[2] = z;
    return this->FindPoint (xyz);
    }
  virtual vtkIdType FindPoint(double x[3]) = 0;
# 177 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  virtual vtkIdType FindCell(double x[3], vtkCell *cell, vtkIdType cellId,
                             double tol2, int& subId, double pcoords[3],
                             double *weights) = 0;







  virtual vtkIdType FindCell(double x[3], vtkCell *cell,
                             vtkGenericCell *gencell, vtkIdType cellId,
                             double tol2, int& subId, double pcoords[3],
                             double *weights) = 0;
# 199 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  virtual vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,
                                  double tol2, int& subId, double pcoords[3],
                                  double *weights);




  unsigned long int GetMTime();




  vtkCellData *GetCellData() {return this->CellData;};




  vtkPointData *GetPointData() {return this->PointData;};




  virtual void Squeeze();




  virtual void ComputeBounds();





  double *GetBounds();






  void GetBounds(double bounds[6]);




  double *GetCenter();





  void GetCenter(double center[3]);





  double GetLength();




  void Initialize();
# 272 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  virtual void GetScalarRange(double range[2]);
# 282 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  double *GetScalarRange();





  virtual int GetMaxCellSize() = 0;
# 297 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  unsigned long GetActualMemorySize();



  int GetDataObjectType()
    {return 8;}



  void ShallowCopy(vtkDataObject *src);
  void DeepCopy(vtkDataObject *src);


  enum FieldDataType
  {
    DATA_OBJECT_FIELD=0,
    POINT_DATA_FIELD=1,
    CELL_DATA_FIELD=2
  };
# 325 "/usr/local/include/vtk-5.10/vtkDataSet.h"
  int CheckAttributes();




  virtual void GenerateGhostLevelArray();




  static vtkDataSet* GetData(vtkInformation* info);
  static vtkDataSet* GetData(vtkInformationVector* v, int i=0);







  virtual vtkFieldData* GetAttributesAsFieldData(int type);



  virtual vtkIdType GetNumberOfElements(int type);

protected:

  vtkDataSet();
  ~vtkDataSet();




  virtual void ComputeScalarRange();

  vtkCellData *CellData;
  vtkPointData *PointData;
  vtkTimeStamp ComputeTime;
  double Bounds[6];
  double Center[3];


  double ScalarRange[2];


  vtkTimeStamp ScalarRangeComputeTime;

private:
  void InternalDataSetCopy(vtkDataSet *src);

  friend class vtkSourceToDataSetFriendship;
  friend class vtkImageAlgorithmToDataSetFriendship;

private:
  vtkDataSet(const vtkDataSet&);
  void operator=(const vtkDataSet&);
};

inline void vtkDataSet::GetPoint(vtkIdType id, double x[3])
{
  double *pt = this->GetPoint(id);
  x[0] = pt[0]; x[1] = pt[1]; x[2] = pt[2];
}
# 30 "/usr/local/include/vtk-5.10/vtkPointSet.h" 2

# 1 "/usr/local/include/vtk-5.10/vtkPoints.h" 1
# 27 "/usr/local/include/vtk-5.10/vtkPoints.h"
class vtkIdList;
class vtkPoints;

class __attribute__ ((visibility("default"))) vtkPoints : public vtkObject
{
public:

  static vtkPoints *New(int dataType);

  static vtkPoints *New();

  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPoints"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPoints",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPoints::IsTypeOf(type); } static vtkPoints* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPoints") ) { return static_cast<vtkPoints *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPoints::New(); } public: vtkPoints *NewInstance() const { return vtkPoints::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  virtual int Allocate(const vtkIdType sz, const vtkIdType ext=1000);



  virtual void Initialize();
# 56 "/usr/local/include/vtk-5.10/vtkPoints.h"
  virtual void SetData(vtkDataArray *);
  vtkDataArray *GetData() {return this->Data;};




  virtual int GetDataType();



  virtual void SetDataType(int dataType);
  void SetDataTypeToBit() {this->SetDataType(1);};
  void SetDataTypeToChar() {this->SetDataType(2);};
  void SetDataTypeToUnsignedChar() {this->SetDataType(3);};
  void SetDataTypeToShort() {this->SetDataType(4);};
  void SetDataTypeToUnsignedShort() {this->SetDataType(5);};
  void SetDataTypeToInt() {this->SetDataType(6);};
  void SetDataTypeToUnsignedInt() {this->SetDataType(7);};
  void SetDataTypeToLong() {this->SetDataType(8);};
  void SetDataTypeToUnsignedLong() {this->SetDataType(9);};
  void SetDataTypeToFloat() {this->SetDataType(10);};
  void SetDataTypeToDouble() {this->SetDataType(11);};




  void *GetVoidPointer(const int id) {return this->Data->GetVoidPointer(id);};



  virtual void Squeeze() {this->Data->Squeeze();};



  virtual void Reset() {this->Data->Reset();};





  virtual void DeepCopy(vtkPoints *ad);
  virtual void ShallowCopy(vtkPoints *ad);
# 106 "/usr/local/include/vtk-5.10/vtkPoints.h"
  unsigned long GetActualMemorySize();



  vtkIdType GetNumberOfPoints() { return this->Data->GetNumberOfTuples();};






  double *GetPoint(vtkIdType id) { return this->Data->GetTuple(id);};




  void GetPoint(vtkIdType id, double x[3]) { this->Data->GetTuple(id,x);};





  void SetPoint(vtkIdType id, const float x[3]) { this->Data->SetTuple(id,x);};
  void SetPoint(vtkIdType id, const double x[3]) { this->Data->SetTuple(id,x);};
  void SetPoint(vtkIdType id, double x, double y, double z);




  void InsertPoint(vtkIdType id, const float x[3])
    { this->Data->InsertTuple(id,x);};
  void InsertPoint(vtkIdType id, const double x[3])
    {this->Data->InsertTuple(id,x);};
  void InsertPoint(vtkIdType id, double x, double y, double z);



  vtkIdType InsertNextPoint(const float x[3]) {
    return this->Data->InsertNextTuple(x);};
  vtkIdType InsertNextPoint(const double x[3]) {
    return this->Data->InsertNextTuple(x);};
  vtkIdType InsertNextPoint(double x, double y, double z);





  void SetNumberOfPoints(vtkIdType number);



  void GetPoints(vtkIdList *ptId, vtkPoints *fp);



  virtual void ComputeBounds();



  double *GetBounds();



  void GetBounds(double bounds[6]);

protected:
  vtkPoints(int dataType=10);
  ~vtkPoints();

  double Bounds[6];
  vtkTimeStamp ComputeTime;
  vtkDataArray *Data;

private:
  vtkPoints(const vtkPoints&);
  void operator=(const vtkPoints&);
};

inline void vtkPoints::SetNumberOfPoints(vtkIdType number)
{
  this->Data->SetNumberOfComponents(3);
  this->Data->SetNumberOfTuples(number);
}

inline void vtkPoints::SetPoint(vtkIdType id, double x, double y, double z)
{
  double p[3];
  p[0] = x;
  p[1] = y;
  p[2] = z;
  this->Data->SetTuple(id,p);
}

inline void vtkPoints::InsertPoint(vtkIdType id, double x, double y, double z)
{
  double p[3];

  p[0] = x;
  p[1] = y;
  p[2] = z;
  this->Data->InsertTuple(id,p);
}

inline vtkIdType vtkPoints::InsertNextPoint(double x, double y, double z)
{
  double p[3];

  p[0] = x;
  p[1] = y;
  p[2] = z;
  return this->Data->InsertNextTuple(p);
}
# 32 "/usr/local/include/vtk-5.10/vtkPointSet.h" 2

class vtkPointLocator;

class __attribute__ ((visibility("default"))) vtkPointSet : public vtkDataSet
{
public:
  typedef vtkDataSet Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPointSet"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPointSet",type) ) { return 1; } return vtkDataSet::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPointSet::IsTypeOf(type); } static vtkPointSet* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPointSet") ) { return static_cast<vtkPointSet *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPointSet::New(); } public: vtkPointSet *NewInstance() const { return vtkPointSet::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  void Initialize();



  void CopyStructure(vtkDataSet *pd);



  vtkIdType GetNumberOfPoints();
  double *GetPoint(vtkIdType ptId) {return this->Points->GetPoint(ptId);};
  void GetPoint(vtkIdType ptId, double x[3]) {this->Points->GetPoint(ptId,x);};
  virtual vtkIdType FindPoint(double x[3]);
  vtkIdType FindPoint(double x, double y, double z) {
    return this->vtkDataSet::FindPoint(x, y, z);};
  virtual vtkIdType FindCell(double x[3], vtkCell *cell, vtkIdType cellId,
                             double tol2, int& subId, double pcoords[3],
                             double *weights);
  virtual vtkIdType FindCell(double x[3], vtkCell *cell,
                             vtkGenericCell *gencell, vtkIdType cellId,
                             double tol2, int& subId, double pcoords[3],
                             double *weights);



  unsigned long GetMTime();



  void ComputeBounds();



  void Squeeze();



  virtual void SetPoints(vtkPoints*);
  virtual vtkPoints *GetPoints () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPointSet.h" ", line " << 80 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Points" " address " << this->Points << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Points; };
# 89 "/usr/local/include/vtk-5.10/vtkPointSet.h"
  unsigned long GetActualMemorySize();



  void ShallowCopy(vtkDataObject *src);
  void DeepCopy(vtkDataObject *src);




  static vtkPointSet* GetData(vtkInformation* info);
  static vtkPointSet* GetData(vtkInformationVector* v, int i=0);


protected:
  vtkPointSet();
  ~vtkPointSet();

  vtkPoints *Points;
  vtkPointLocator *Locator;

  virtual void ReportReferences(vtkGarbageCollector*);
private:

  void Cleanup();

  vtkPointSet(const vtkPointSet&);
  void operator=(const vtkPointSet&);
};

inline vtkIdType vtkPointSet::GetNumberOfPoints()
{
  if (this->Points)
    {
    return this->Points->GetNumberOfPoints();
    }
  else
    {
    return 0;
    }
}
# 58 "/usr/local/include/vtk-5.10/vtkPolyData.h" 2

# 1 "/usr/local/include/vtk-5.10/vtkCellTypes.h" 1
# 38 "/usr/local/include/vtk-5.10/vtkCellTypes.h"
# 1 "/usr/local/include/vtk-5.10/vtkIntArray.h" 1
# 39 "/usr/local/include/vtk-5.10/vtkCellTypes.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkUnsignedCharArray.h" 1
# 30 "/usr/local/include/vtk-5.10/vtkUnsignedCharArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkUnsignedCharArray.h" 2



class __attribute__ ((visibility("default"))) vtkUnsignedCharArray : public vtkDataArrayTemplate<unsigned char>

{
public:
  static vtkUnsignedCharArray* New();
  typedef vtkDataArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkUnsignedCharArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkUnsignedCharArray",type) ) { return 1; } return vtkDataArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkUnsignedCharArray::IsTypeOf(type); } static vtkUnsignedCharArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkUnsignedCharArray") ) { return static_cast<vtkUnsignedCharArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkUnsignedCharArray::New(); } public: vtkUnsignedCharArray *NewInstance() const { return vtkUnsignedCharArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataType()
    { return 3; }



  void GetTupleValue(vtkIdType i, unsigned char* tuple)
    { this->RealSuperclass::GetTupleValue(i, tuple); }



  void SetTupleValue(vtkIdType i, const unsigned char* tuple)
    { this->RealSuperclass::SetTupleValue(i, tuple); }




  void InsertTupleValue(vtkIdType i, const unsigned char* tuple)
    { this->RealSuperclass::InsertTupleValue(i, tuple); }



  vtkIdType InsertNextTupleValue(const unsigned char* tuple)
    { return this->RealSuperclass::InsertNextTupleValue(tuple); }



  unsigned char GetValue(vtkIdType id)
    { return this->RealSuperclass::GetValue(id); }




  void SetValue(vtkIdType id, unsigned char value)
    { this->RealSuperclass::SetValue(id, value); }





  void SetNumberOfValues(vtkIdType number)
    { this->RealSuperclass::SetNumberOfValues(number); }



  void InsertValue(vtkIdType id, unsigned char f)
    { this->RealSuperclass::InsertValue(id, f); }



  vtkIdType InsertNextValue(unsigned char f)
    { return this->RealSuperclass::InsertNextValue(f); }




  unsigned char *GetValueRange(int comp)
    { return this->RealSuperclass::GetValueRange(comp); }

  void GetValueRange(unsigned char range[2], int comp)
    { this->RealSuperclass::GetValueRange(range, comp); }





  unsigned char *GetValueRange()
    { return this->RealSuperclass::GetValueRange(0); }

  void GetValueRange(unsigned char range[2])
    { this->RealSuperclass::GetValueRange(range, 0); }




  static unsigned char GetDataTypeValueMin() { return static_cast< unsigned char >(0u); }



  static unsigned char GetDataTypeValueMax() { return static_cast< unsigned char >(0xffu); }





  unsigned char* WritePointer(vtkIdType id, vtkIdType number)
    { return this->RealSuperclass::WritePointer(id, number); }




  unsigned char* GetPointer(vtkIdType id)
    { return this->RealSuperclass::GetPointer(id); }
# 144 "/usr/local/include/vtk-5.10/vtkUnsignedCharArray.h"
  void SetArray(unsigned char* array, vtkIdType size, int save)
    { this->RealSuperclass::SetArray(array, size, save); }
  void SetArray(unsigned char* array, vtkIdType size, int save, int deleteMethod)
    { this->RealSuperclass::SetArray(array, size, save, deleteMethod); }

protected:
  vtkUnsignedCharArray(vtkIdType numComp=1);
  ~vtkUnsignedCharArray();

private:

  typedef vtkDataArrayTemplate<unsigned char> RealSuperclass;

  vtkUnsignedCharArray(const vtkUnsignedCharArray&);
  void operator=(const vtkUnsignedCharArray&);
};
# 40 "/usr/local/include/vtk-5.10/vtkCellTypes.h" 2


class __attribute__ ((visibility("default"))) vtkCellTypes : public vtkObject
{
public:
  static vtkCellTypes *New();
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCellTypes"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCellTypes",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCellTypes::IsTypeOf(type); } static vtkCellTypes* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCellTypes") ) { return static_cast<vtkCellTypes *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCellTypes::New(); } public: vtkCellTypes *NewInstance() const { return vtkCellTypes::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int Allocate(int sz=512, int ext=1000);



  void InsertCell(int id, unsigned char type, int loc);



  int InsertNextCell(unsigned char type, int loc);



  void SetCellTypes(int ncells, vtkUnsignedCharArray *cellTypes, vtkIntArray *cellLocations);



  int GetCellLocation(int cellId) { return this->LocationArray->GetValue(cellId);};



  void DeleteCell(vtkIdType cellId) { this->TypeArray->SetValue(cellId, VTK_EMPTY_CELL);};



  int GetNumberOfTypes() { return (this->MaxId + 1);};



  int IsType(unsigned char type);



  int InsertNextType(unsigned char type){return this->InsertNextCell(type,-1);};



  unsigned char GetCellType(int cellId) { return this->TypeArray->GetValue(cellId);};



  void Squeeze();



  void Reset();
# 104 "/usr/local/include/vtk-5.10/vtkCellTypes.h"
  unsigned long GetActualMemorySize();




  void DeepCopy(vtkCellTypes *src);




  static const char* GetClassNameFromTypeId(int typeId);




  static int GetTypeIdFromClassName(const char* classname);






  static int IsLinear(unsigned char type);

protected:
  vtkCellTypes();
  ~vtkCellTypes();

  vtkUnsignedCharArray *TypeArray;
  vtkIntArray *LocationArray;
  int Size;
  int MaxId;
  int Extend;
private:
  vtkCellTypes(const vtkCellTypes&);
  void operator=(const vtkCellTypes&);
};



inline int vtkCellTypes::IsType(unsigned char type)
{
  int numTypes=this->GetNumberOfTypes();

  for (int i=0; i<numTypes; i++)
    {
    if ( type == this->GetCellType(i))
      {
      return 1;
      }
    }
  return 0;
}


inline int vtkCellTypes::IsLinear(unsigned char type)
{
  return ( (type <= 20)
          || (type == VTK_CONVEX_POINT_SET)
          || (type == VTK_POLYHEDRON) );
}
# 60 "/usr/local/include/vtk-5.10/vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkCellLinks.h" 1
# 29 "/usr/local/include/vtk-5.10/vtkCellLinks.h"
class vtkDataSet;
class vtkCellArray;

class __attribute__ ((visibility("default"))) vtkCellLinks : public vtkObject
{
public:


  class Link {
  public:
    unsigned short ncells;
    vtkIdType *cells;
  };


  static vtkCellLinks *New();
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCellLinks"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCellLinks",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCellLinks::IsTypeOf(type); } static vtkCellLinks* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCellLinks") ) { return static_cast<vtkCellLinks *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCellLinks::New(); } public: vtkCellLinks *NewInstance() const { return vtkCellLinks::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  void Allocate(vtkIdType numLinks, vtkIdType ext=1000);



  Link &GetLink(vtkIdType ptId) {return this->Array[ptId];};



  unsigned short GetNcells(vtkIdType ptId) { return this->Array[ptId].ncells;};



  void BuildLinks(vtkDataSet *data);



  void BuildLinks(vtkDataSet *data, vtkCellArray *Connectivity);



  vtkIdType *GetCells(vtkIdType ptId) {return this->Array[ptId].cells;};




  vtkIdType InsertNextPoint(int numLinks);





  void InsertNextCellReference(vtkIdType ptId, vtkIdType cellId);



  void DeletePoint(vtkIdType ptId);





  void RemoveCellReference(vtkIdType cellId, vtkIdType ptId);





  void AddCellReference(vtkIdType cellId, vtkIdType ptId);




  void ResizeCellList(vtkIdType ptId, int size);



  void Squeeze();



  void Reset();
# 120 "/usr/local/include/vtk-5.10/vtkCellLinks.h"
  unsigned long GetActualMemorySize();




  void DeepCopy(vtkCellLinks *src);

protected:
  vtkCellLinks():Array(__null),Size(0),MaxId(-1),Extend(1000) {};
  ~vtkCellLinks();



  void IncrementLinkCount(vtkIdType ptId) { this->Array[ptId].ncells++;};

  void AllocateLinks(vtkIdType n);



  void InsertCellReference(vtkIdType ptId, unsigned short pos,
                           vtkIdType cellId);

  Link *Array;
  vtkIdType Size;
  vtkIdType MaxId;
  vtkIdType Extend;
  Link *Resize(vtkIdType sz);
private:
  vtkCellLinks(const vtkCellLinks&);
  void operator=(const vtkCellLinks&);
};


inline void vtkCellLinks::InsertCellReference(vtkIdType ptId,
                                              unsigned short pos,
                                              vtkIdType cellId)
{
  this->Array[ptId].cells[pos] = cellId;
}


inline void vtkCellLinks::DeletePoint(vtkIdType ptId)
{
  this->Array[ptId].ncells = 0;
  delete [] this->Array[ptId].cells;
  this->Array[ptId].cells = __null;
}


inline void vtkCellLinks::InsertNextCellReference(vtkIdType ptId,
                                                  vtkIdType cellId)
{
  this->Array[ptId].cells[this->Array[ptId].ncells++] = cellId;
}


inline void vtkCellLinks::RemoveCellReference(vtkIdType cellId, vtkIdType ptId)
{
  vtkIdType *cells=this->Array[ptId].cells;
  int ncells=this->Array[ptId].ncells;

  for (int i=0; i < ncells; i++)
    {
    if (cells[i] == cellId)
      {
      for (int j=i; j < (ncells-1); j++)
        {
        cells[j] = cells[j+1];
        }
      this->Array[ptId].ncells--;
      break;
      }
    }
}


inline void vtkCellLinks::AddCellReference(vtkIdType cellId, vtkIdType ptId)
{
  this->Array[ptId].cells[this->Array[ptId].ncells++] = cellId;
}


inline void vtkCellLinks::ResizeCellList(vtkIdType ptId, int size)
{
  int newSize;
  vtkIdType *cells;

  newSize = this->Array[ptId].ncells + size;
  cells = new vtkIdType[newSize];
  memcpy(cells, this->Array[ptId].cells,
         this->Array[ptId].ncells*sizeof(vtkIdType));
  delete [] this->Array[ptId].cells;
  this->Array[ptId].cells = cells;
}
# 61 "/usr/local/include/vtk-5.10/vtkPolyData.h" 2

class vtkVertex;
class vtkPolyVertex;
class vtkLine;
class vtkPolyLine;
class vtkTriangle;
class vtkQuad;
class vtkPolygon;
class vtkTriangleStrip;
class vtkEmptyCell;

class __attribute__ ((visibility("default"))) vtkPolyData : public vtkPointSet
{
public:
  static vtkPolyData *New();

  typedef vtkPointSet Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPolyData"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPolyData",type) ) { return 1; } return vtkPointSet::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPolyData::IsTypeOf(type); } static vtkPolyData* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPolyData") ) { return static_cast<vtkPolyData *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPolyData::New(); } public: vtkPolyData *NewInstance() const { return vtkPolyData::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataObjectType() {return 0;}



  void CopyStructure(vtkDataSet *ds);



  vtkIdType GetNumberOfCells();
  vtkCell *GetCell(vtkIdType cellId);
  void GetCell(vtkIdType cellId, vtkGenericCell *cell);
  int GetCellType(vtkIdType cellId);
  void GetCellBounds(vtkIdType cellId, double bounds[6]);
  void GetCellNeighbors(vtkIdType cellId, vtkIdList *ptIds,
                        vtkIdList *cellIds);






  void CopyCells(vtkPolyData *pd, vtkIdList *idList,
                 vtkPointLocator *locator = __null);



  void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds);




  void GetPointCells(vtkIdType ptId, vtkIdList *cellIds);



  void ComputeBounds();






  void Squeeze();



  int GetMaxCellSize();



  void SetVerts (vtkCellArray* v);




  vtkCellArray *GetVerts();



  void SetLines (vtkCellArray* l);




  vtkCellArray *GetLines();



  void SetPolys (vtkCellArray* p);




  vtkCellArray *GetPolys();



  void SetStrips (vtkCellArray* s);





  vtkCellArray *GetStrips();



  vtkIdType GetNumberOfVerts();
  vtkIdType GetNumberOfLines();
  vtkIdType GetNumberOfPolys();
  vtkIdType GetNumberOfStrips();






  void Allocate(vtkIdType numCells=1000, int extSize=1000);
# 190 "/usr/local/include/vtk-5.10/vtkPolyData.h"
  void Allocate(vtkPolyData *inPolyData, vtkIdType numCells=1000,
                int extSize=1000);







  int InsertNextCell(int type, int npts, vtkIdType *pts);







  int InsertNextCell(int type, vtkIdList *pts);




  void Reset();



  void BuildCells();






  void BuildLinks(int initialSize=0);





  void DeleteCells();



  void DeleteLinks();



  void GetPointCells(vtkIdType ptId, unsigned short& ncells,
                     vtkIdType* &cells);





  void GetCellEdgeNeighbors(vtkIdType cellId, vtkIdType p1, vtkIdType p2,
                            vtkIdList *cellIds);




  void GetCellPoints(vtkIdType cellId, vtkIdType& npts, vtkIdType* &pts);




  int IsTriangle(int v1, int v2, int v3);







  int IsEdge(vtkIdType p1, vtkIdType p2);




  int IsPointUsedByCell(vtkIdType ptId, vtkIdType cellId);






  void ReplaceCell(vtkIdType cellId, int npts, vtkIdType *pts);



  void ReplaceCellPoint(vtkIdType cellId, vtkIdType oldPtId,
                        vtkIdType newPtId);



  void ReverseCell(vtkIdType cellId);



  void DeletePoint(vtkIdType ptId);
  void DeleteCell(vtkIdType cellId);
# 298 "/usr/local/include/vtk-5.10/vtkPolyData.h"
  void RemoveDeletedCells();







  int InsertNextLinkedPoint(int numLinks);
  int InsertNextLinkedPoint(double x[3], int numLinks);





  int InsertNextLinkedCell(int type, int npts, vtkIdType *pts);
# 322 "/usr/local/include/vtk-5.10/vtkPolyData.h"
  void ReplaceLinkedCell(vtkIdType cellId, int npts, vtkIdType *pts);






  void RemoveCellReference(vtkIdType cellId);






  void AddCellReference(vtkIdType cellId);






  void RemoveReferenceToCell(vtkIdType ptId, vtkIdType cellId);






  void AddReferenceToCell(vtkIdType ptId, vtkIdType cellId);




  void ResizeCellList(vtkIdType ptId, int size);



  virtual void Initialize();




  void GetUpdateExtent(int &piece, int &numPieces, int &ghostLevel);



  virtual int* GetUpdateExtent();
  virtual void GetUpdateExtent(int& x0, int& x1, int& y0, int& y1,
                               int& z0, int& z1);
  virtual void GetUpdateExtent(int extent[6]);



  virtual int GetPiece();
  virtual int GetNumberOfPieces();



  virtual int GetGhostLevel();
# 389 "/usr/local/include/vtk-5.10/vtkPolyData.h"
  unsigned long GetActualMemorySize();



  void ShallowCopy(vtkDataObject *src);
  void DeepCopy(vtkDataObject *src);




  void RemoveGhostCells(int level);




  static vtkPolyData* GetData(vtkInformation* info);
  static vtkPolyData* GetData(vtkInformationVector* v, int i=0);
# 426 "/usr/local/include/vtk-5.10/vtkPolyData.h"
  enum
    {
    ERR_NO_SUCH_FIELD = -4,
    ERR_INCORRECT_FIELD = -3,
    ERR_NON_MANIFOLD_STAR = -2,
    REGULAR_POINT = -1,
    MINIMUM = 0,
    SADDLE = 1,
    MAXIMUM = 2
    };

  int GetScalarFieldCriticalIndex (vtkIdType pointId,
                                   vtkDataArray *scalarField);
  int GetScalarFieldCriticalIndex (vtkIdType pointId, int fieldId);
  int GetScalarFieldCriticalIndex (vtkIdType pointId, const char* fieldName);

protected:
  vtkPolyData();
  ~vtkPolyData();


  vtkVertex *Vertex;
  vtkPolyVertex *PolyVertex;
  vtkLine *Line;
  vtkPolyLine *PolyLine;
  vtkTriangle *Triangle;
  vtkQuad *Quad;
  vtkPolygon *Polygon;
  vtkTriangleStrip *TriangleStrip;
  vtkEmptyCell *EmptyCell;



  vtkCellArray *Verts;
  vtkCellArray *Lines;
  vtkCellArray *Polys;
  vtkCellArray *Strips;


  static vtkCellArray *Dummy;



  vtkCellTypes *Cells;
  vtkCellLinks *Links;





  virtual void Crop();


private:




  void GetCellNeighbors(vtkIdType cellId, vtkIdList& ptIds, vtkIdList& cellIds)
    {this->GetCellNeighbors(cellId, &ptIds, &cellIds);}

  void Cleanup();

private:
  vtkPolyData(const vtkPolyData&);
  void operator=(const vtkPolyData&);
};

inline void vtkPolyData::GetPointCells(vtkIdType ptId, unsigned short& ncells,
                                       vtkIdType* &cells)
{
  ncells = this->Links->GetNcells(ptId);
  cells = this->Links->GetCells(ptId);
}

inline int vtkPolyData::IsTriangle(int v1, int v2, int v3)
{
  unsigned short int n1;
  int i, j, tVerts[3];
  vtkIdType *cells, *tVerts2, n2;

  tVerts[0] = v1;
  tVerts[1] = v2;
  tVerts[2] = v3;

  for (i=0; i<3; i++)
    {
    this->GetPointCells(tVerts[i], n1, cells);
    for (j=0; j<n1; j++)
      {
      this->GetCellPoints(cells[j], n2, tVerts2);
      if ( (tVerts[0] == tVerts2[0] || tVerts[0] == tVerts2[1] ||
            tVerts[0] == tVerts2[2]) &&
           (tVerts[1] == tVerts2[0] || tVerts[1] == tVerts2[1] ||
            tVerts[1] == tVerts2[2]) &&
           (tVerts[2] == tVerts2[0] || tVerts[2] == tVerts2[1] ||
            tVerts[2] == tVerts2[2]) )
        {
        return 1;
        }
      }
    }
  return 0;
}

inline int vtkPolyData::IsPointUsedByCell(vtkIdType ptId, vtkIdType cellId)
{
  vtkIdType *pts, npts;

  this->GetCellPoints(cellId, npts, pts);
  for (vtkIdType i=0; i < npts; i++)
    {
    if ( pts[i] == ptId )
      {
      return 1;
      }
    }

  return 0;
}

inline void vtkPolyData::DeletePoint(vtkIdType ptId)
{
  this->Links->DeletePoint(ptId);
}

inline void vtkPolyData::DeleteCell(vtkIdType cellId)
{
  this->Cells->DeleteCell(cellId);
}

inline void vtkPolyData::RemoveCellReference(vtkIdType cellId)
{
  vtkIdType *pts, npts;

  this->GetCellPoints(cellId, npts, pts);
  for (vtkIdType i=0; i<npts; i++)
    {
    this->Links->RemoveCellReference(cellId, pts[i]);
    }
}

inline void vtkPolyData::AddCellReference(vtkIdType cellId)
{
  vtkIdType *pts, npts;

  this->GetCellPoints(cellId, npts, pts);
  for (vtkIdType i=0; i<npts; i++)
    {
    this->Links->AddCellReference(cellId, pts[i]);
    }
}

inline void vtkPolyData::ResizeCellList(vtkIdType ptId, int size)
{
  this->Links->ResizeCellList(ptId,size);
}

inline void vtkPolyData::ReplaceCellPoint(vtkIdType cellId, vtkIdType oldPtId,
                                          vtkIdType newPtId)
{
  int i;
  vtkIdType *verts, nverts;

  this->GetCellPoints(cellId,nverts,verts);
  for ( i=0; i < nverts; i++ )
    {
    if ( verts[i] == oldPtId )
      {
      verts[i] = newPtId;
      return;
      }
    }
}
# 39 "/usr/local/include/vtk-5.10/vtkPolyDataAlgorithm.h" 2

class vtkDataSet;
class vtkPolyData;

class __attribute__ ((visibility("default"))) vtkPolyDataAlgorithm : public vtkAlgorithm
{
public:
  static vtkPolyDataAlgorithm *New();
  typedef vtkAlgorithm Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPolyDataAlgorithm"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPolyDataAlgorithm",type) ) { return 1; } return vtkAlgorithm::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPolyDataAlgorithm::IsTypeOf(type); } static vtkPolyDataAlgorithm* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPolyDataAlgorithm") ) { return static_cast<vtkPolyDataAlgorithm *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPolyDataAlgorithm::New(); } public: vtkPolyDataAlgorithm *NewInstance() const { return vtkPolyDataAlgorithm::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  vtkPolyData* GetOutput();
  vtkPolyData* GetOutput(int);
  virtual void SetOutput(vtkDataObject* d);



  virtual int ProcessRequest(vtkInformation*,
                             vtkInformationVector**,
                             vtkInformationVector*);



  vtkDataObject* GetInput();
  vtkDataObject *GetInput(int port);
  vtkPolyData *GetPolyDataInput(int port);
# 76 "/usr/local/include/vtk-5.10/vtkPolyDataAlgorithm.h"
  void SetInput(vtkDataObject *);
  void SetInput(int, vtkDataObject*);






  void AddInput(vtkDataObject *);
  void AddInput(int, vtkDataObject*);

protected:
  vtkPolyDataAlgorithm();
  ~vtkPolyDataAlgorithm();


  virtual int RequestInformation(vtkInformation* request,
                                 vtkInformationVector** inputVector,
                                 vtkInformationVector* outputVector);




  virtual int RequestData(vtkInformation* request,
                          vtkInformationVector** inputVector,
                          vtkInformationVector* outputVector);




  virtual int RequestUpdateExtent(vtkInformation*,
                                  vtkInformationVector**,
                                  vtkInformationVector*);



  virtual void ExecuteData(vtkDataObject *output);
  virtual void Execute();


  virtual int FillOutputPortInformation(int port, vtkInformation* info);
  virtual int FillInputPortInformation(int port, vtkInformation* info);

private:
  vtkPolyDataAlgorithm(const vtkPolyDataAlgorithm&);
  void operator=(const vtkPolyDataAlgorithm&);
};
# 61 "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" 2

class vtkIncrementalPointLocator;

class __attribute__ ((visibility("default"))) vtkCleanPolyData : public vtkPolyDataAlgorithm
{
public:
  static vtkCleanPolyData *New();
  void PrintSelf(ostream& os, vtkIndent indent);
  typedef vtkPolyDataAlgorithm Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCleanPolyData"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCleanPolyData",type) ) { return 1; } return vtkPolyDataAlgorithm::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCleanPolyData::IsTypeOf(type); } static vtkCleanPolyData* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCleanPolyData") ) { return static_cast<vtkCleanPolyData *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCleanPolyData::New(); } public: vtkCleanPolyData *NewInstance() const { return vtkCleanPolyData::SafeDownCast(this->NewInstanceInternal()); };





  virtual void SetToleranceIsAbsolute (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 75 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ToleranceIsAbsolute" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ToleranceIsAbsolute != _arg) { this->ToleranceIsAbsolute = _arg; this->Modified(); } };
  virtual void ToleranceIsAbsoluteOn () { this->SetToleranceIsAbsolute(static_cast<int>(1));} virtual void ToleranceIsAbsoluteOff () { this->SetToleranceIsAbsolute(static_cast<int>(0));};
  virtual int GetToleranceIsAbsolute () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 77 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ToleranceIsAbsolute" " of " << this->ToleranceIsAbsolute << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ToleranceIsAbsolute; };




  virtual void SetTolerance (double _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 82 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Tolerance" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Tolerance != (_arg<0.0?0.0:(_arg>1.0?1.0:_arg))) { this->Tolerance = (_arg<0.0?0.0:(_arg>1.0?1.0:_arg)); this->Modified(); } } virtual double GetToleranceMinValue () { return 0.0; } virtual double GetToleranceMaxValue () { return 1.0; };
  virtual double GetTolerance () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 83 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Tolerance" " of " << this->Tolerance << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Tolerance; };



  virtual void SetAbsoluteTolerance (double _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 87 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "AbsoluteTolerance" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->AbsoluteTolerance != (_arg<0.0?0.0:(_arg>static_cast< double >(1.0e+299)?static_cast< double >(1.0e+299):_arg))) { this->AbsoluteTolerance = (_arg<0.0?0.0:(_arg>static_cast< double >(1.0e+299)?static_cast< double >(1.0e+299):_arg)); this->Modified(); } } virtual double GetAbsoluteToleranceMinValue () { return 0.0; } virtual double GetAbsoluteToleranceMaxValue () { return static_cast< double >(1.0e+299); };
  virtual double GetAbsoluteTolerance () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 88 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "AbsoluteTolerance" " of " << this->AbsoluteTolerance << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->AbsoluteTolerance; };



  virtual void SetConvertLinesToPoints (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 92 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ConvertLinesToPoints" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ConvertLinesToPoints != _arg) { this->ConvertLinesToPoints = _arg; this->Modified(); } };
  virtual void ConvertLinesToPointsOn () { this->SetConvertLinesToPoints(static_cast<int>(1));} virtual void ConvertLinesToPointsOff () { this->SetConvertLinesToPoints(static_cast<int>(0));};
  virtual int GetConvertLinesToPoints () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 94 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ConvertLinesToPoints" " of " << this->ConvertLinesToPoints << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ConvertLinesToPoints; };



  virtual void SetConvertPolysToLines (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 98 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ConvertPolysToLines" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ConvertPolysToLines != _arg) { this->ConvertPolysToLines = _arg; this->Modified(); } };
  virtual void ConvertPolysToLinesOn () { this->SetConvertPolysToLines(static_cast<int>(1));} virtual void ConvertPolysToLinesOff () { this->SetConvertPolysToLines(static_cast<int>(0));};
  virtual int GetConvertPolysToLines () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 100 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ConvertPolysToLines" " of " << this->ConvertPolysToLines << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ConvertPolysToLines; };



  virtual void SetConvertStripsToPolys (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 104 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ConvertStripsToPolys" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ConvertStripsToPolys != _arg) { this->ConvertStripsToPolys = _arg; this->Modified(); } };
  virtual void ConvertStripsToPolysOn () { this->SetConvertStripsToPolys(static_cast<int>(1));} virtual void ConvertStripsToPolysOff () { this->SetConvertStripsToPolys(static_cast<int>(0));};
  virtual int GetConvertStripsToPolys () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 106 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ConvertStripsToPolys" " of " << this->ConvertStripsToPolys << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ConvertStripsToPolys; };






  virtual void SetPointMerging (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 113 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "PointMerging" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->PointMerging != _arg) { this->PointMerging = _arg; this->Modified(); } };
  virtual int GetPointMerging () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 114 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "PointMerging" " of " << this->PointMerging << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PointMerging; };
  virtual void PointMergingOn () { this->SetPointMerging(static_cast<int>(1));} virtual void PointMergingOff () { this->SetPointMerging(static_cast<int>(0));};




  virtual void SetLocator(vtkIncrementalPointLocator *locator);
  virtual vtkIncrementalPointLocator *GetLocator () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 121 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " "Locator" " address " << this->Locator << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Locator; };



  void CreateDefaultLocator(vtkPolyData *input = 0);



  void ReleaseLocator() { this->SetLocator(__null); }



  unsigned long int GetMTime();



  virtual void OperateOnPoint(double in[3], double out[3]);



  virtual void OperateOnBounds(double in[6], double out[6]);






  virtual void SetPieceInvariant (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 148 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "PieceInvariant" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->PieceInvariant != _arg) { this->PieceInvariant = _arg; this->Modified(); } };
  virtual int GetPieceInvariant () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCleanPolyData.h" ", line " << 149 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "PieceInvariant" " of " << this->PieceInvariant << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PieceInvariant; };
  virtual void PieceInvariantOn () { this->SetPieceInvariant(static_cast<int>(1));} virtual void PieceInvariantOff () { this->SetPieceInvariant(static_cast<int>(0));};

protected:
  vtkCleanPolyData();
 ~vtkCleanPolyData();


  virtual int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *);
  virtual int RequestInformation(vtkInformation *, vtkInformationVector **, vtkInformationVector *);
  virtual int RequestUpdateExtent(vtkInformation *, vtkInformationVector **, vtkInformationVector *);

  int PointMerging;
  double Tolerance;
  double AbsoluteTolerance;
  int ConvertLinesToPoints;
  int ConvertPolysToLines;
  int ConvertStripsToPolys;
  int ToleranceIsAbsolute;
  vtkIncrementalPointLocator *Locator;

  int PieceInvariant;
private:
  vtkCleanPolyData(const vtkCleanPolyData&);
  void operator=(const vtkCleanPolyData&);
};
# 28 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkPolyDataWriter.h" 1
# 25 "/usr/local/include/vtk-5.10/vtkPolyDataWriter.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataWriter.h" 1
# 29 "/usr/local/include/vtk-5.10/vtkDataWriter.h"
# 1 "/usr/local/include/vtk-5.10/vtkWriter.h" 1
# 33 "/usr/local/include/vtk-5.10/vtkWriter.h"
class vtkDataObject;




class __attribute__ ((visibility("default"))) vtkWriter : public vtkAlgorithm
{
public:
  typedef vtkAlgorithm Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkWriter"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkWriter",type) ) { return 1; } return vtkAlgorithm::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkWriter::IsTypeOf(type); } static vtkWriter* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkWriter") ) { return static_cast<vtkWriter *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkWriter::New(); } public: vtkWriter *NewInstance() const { return vtkWriter::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);





  virtual int Write();






  void EncodeString(char* resname, const char* name, bool doublePercent);







  void EncodeWriteString(ostream* out, const char* name, bool doublePercent);



  void SetInput(vtkDataObject *input);
  void SetInput(int index, vtkDataObject *input);

  vtkDataObject *GetInput();
  vtkDataObject *GetInput(int port);


protected:
  vtkWriter();
  ~vtkWriter();

  virtual int ProcessRequest(vtkInformation *request,
                             vtkInformationVector **inputVector,
                             vtkInformationVector *outputVector);
  virtual int RequestData(vtkInformation *request,
                          vtkInformationVector **inputVector,
                          vtkInformationVector *outputVector);

  virtual void WriteData() = 0;
  vtkTimeStamp WriteTime;
private:
  vtkWriter(const vtkWriter&);
  void operator=(const vtkWriter&);
};
# 30 "/usr/local/include/vtk-5.10/vtkDataWriter.h" 2

class vtkCellArray;
class vtkDataArray;
class vtkDataSet;
class vtkFieldData;
class vtkGraph;
class vtkPoints;
class vtkTable;

class __attribute__ ((visibility("default"))) vtkDataWriter : public vtkWriter
{
public:
  typedef vtkWriter Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDataWriter"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDataWriter",type) ) { return 1; } return vtkWriter::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDataWriter::IsTypeOf(type); } static vtkDataWriter* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDataWriter") ) { return static_cast<vtkDataWriter *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDataWriter::New(); } public: vtkDataWriter *NewInstance() const { return vtkDataWriter::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  static vtkDataWriter *New();



  virtual void SetFileName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 52 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "FileName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->FileName == __null && _arg == __null) { return;} if ( this->FileName && _arg && (!strcmp(this->FileName,_arg))) { return;} if (this->FileName) { delete [] this->FileName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->FileName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->FileName = __null; } this->Modified(); };
  virtual char* GetFileName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 53 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "FileName" " of " << (this->FileName?this->FileName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FileName; };



  virtual void SetWriteToOutputString (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 57 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "WriteToOutputString" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->WriteToOutputString != _arg) { this->WriteToOutputString = _arg; this->Modified(); } };
  virtual int GetWriteToOutputString () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 58 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "WriteToOutputString" " of " << this->WriteToOutputString << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->WriteToOutputString; };
  virtual void WriteToOutputStringOn () { this->SetWriteToOutputString(static_cast<int>(1));} virtual void WriteToOutputStringOff () { this->SetWriteToOutputString(static_cast<int>(0));};





  virtual int GetOutputStringLength () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 65 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "OutputStringLength" " of " << this->OutputStringLength << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->OutputStringLength; };
  virtual char* GetOutputString () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 66 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "OutputString" " of " << (this->OutputString?this->OutputString:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->OutputString; };
  unsigned char *GetBinaryOutputString()
    {
      return reinterpret_cast<unsigned char *>(this->OutputString);
    }




  vtkStdString GetOutputStdString();





  char *RegisterAndGetOutputString();



  virtual void SetHeader (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 85 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "Header" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->Header == __null && _arg == __null) { return;} if ( this->Header && _arg && (!strcmp(this->Header,_arg))) { return;} if (this->Header) { delete [] this->Header; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->Header = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->Header = __null; } this->Modified(); };
  virtual char* GetHeader () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 86 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Header" " of " << (this->Header?this->Header:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Header; };



  virtual void SetFileType (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 90 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "FileType" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->FileType != (_arg<1?1:(_arg>2?2:_arg))) { this->FileType = (_arg<1?1:(_arg>2?2:_arg)); this->Modified(); } } virtual int GetFileTypeMinValue () { return 1; } virtual int GetFileTypeMaxValue () { return 2; };
  virtual int GetFileType () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 91 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "FileType" " of " << this->FileType << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FileType; };
  void SetFileTypeToASCII() {this->SetFileType(1);};
  void SetFileTypeToBinary() {this->SetFileType(2);};




  virtual void SetScalarsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 98 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "ScalarsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->ScalarsName == __null && _arg == __null) { return;} if ( this->ScalarsName && _arg && (!strcmp(this->ScalarsName,_arg))) { return;} if (this->ScalarsName) { delete [] this->ScalarsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->ScalarsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->ScalarsName = __null; } this->Modified(); };
  virtual char* GetScalarsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 99 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ScalarsName" " of " << (this->ScalarsName?this->ScalarsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ScalarsName; };




  virtual void SetVectorsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 104 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "VectorsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->VectorsName == __null && _arg == __null) { return;} if ( this->VectorsName && _arg && (!strcmp(this->VectorsName,_arg))) { return;} if (this->VectorsName) { delete [] this->VectorsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->VectorsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->VectorsName = __null; } this->Modified(); };
  virtual char* GetVectorsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 105 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "VectorsName" " of " << (this->VectorsName?this->VectorsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->VectorsName; };




  virtual void SetTensorsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 110 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "TensorsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->TensorsName == __null && _arg == __null) { return;} if ( this->TensorsName && _arg && (!strcmp(this->TensorsName,_arg))) { return;} if (this->TensorsName) { delete [] this->TensorsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->TensorsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->TensorsName = __null; } this->Modified(); };
  virtual char* GetTensorsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 111 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "TensorsName" " of " << (this->TensorsName?this->TensorsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->TensorsName; };




  virtual void SetNormalsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 116 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "NormalsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->NormalsName == __null && _arg == __null) { return;} if ( this->NormalsName && _arg && (!strcmp(this->NormalsName,_arg))) { return;} if (this->NormalsName) { delete [] this->NormalsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->NormalsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->NormalsName = __null; } this->Modified(); };
  virtual char* GetNormalsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 117 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "NormalsName" " of " << (this->NormalsName?this->NormalsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->NormalsName; };




  virtual void SetTCoordsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 122 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "TCoordsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->TCoordsName == __null && _arg == __null) { return;} if ( this->TCoordsName && _arg && (!strcmp(this->TCoordsName,_arg))) { return;} if (this->TCoordsName) { delete [] this->TCoordsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->TCoordsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->TCoordsName = __null; } this->Modified(); };
  virtual char* GetTCoordsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 123 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "TCoordsName" " of " << (this->TCoordsName?this->TCoordsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->TCoordsName; };




  virtual void SetGlobalIdsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 128 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "GlobalIdsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->GlobalIdsName == __null && _arg == __null) { return;} if ( this->GlobalIdsName && _arg && (!strcmp(this->GlobalIdsName,_arg))) { return;} if (this->GlobalIdsName) { delete [] this->GlobalIdsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->GlobalIdsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->GlobalIdsName = __null; } this->Modified(); };
  virtual char* GetGlobalIdsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 129 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "GlobalIdsName" " of " << (this->GlobalIdsName?this->GlobalIdsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->GlobalIdsName; };




  virtual void SetPedigreeIdsName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 134 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "PedigreeIdsName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->PedigreeIdsName == __null && _arg == __null) { return;} if ( this->PedigreeIdsName && _arg && (!strcmp(this->PedigreeIdsName,_arg))) { return;} if (this->PedigreeIdsName) { delete [] this->PedigreeIdsName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->PedigreeIdsName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->PedigreeIdsName = __null; } this->Modified(); };
  virtual char* GetPedigreeIdsName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 135 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "PedigreeIdsName" " of " << (this->PedigreeIdsName?this->PedigreeIdsName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PedigreeIdsName; };




  virtual void SetLookupTableName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 140 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "LookupTableName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->LookupTableName == __null && _arg == __null) { return;} if ( this->LookupTableName && _arg && (!strcmp(this->LookupTableName,_arg))) { return;} if (this->LookupTableName) { delete [] this->LookupTableName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->LookupTableName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->LookupTableName = __null; } this->Modified(); };
  virtual char* GetLookupTableName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 141 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "LookupTableName" " of " << (this->LookupTableName?this->LookupTableName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->LookupTableName; };




  virtual void SetFieldDataName (const char* _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 146 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "FieldDataName" " to " << (_arg?_arg:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if ( this->FieldDataName == __null && _arg == __null) { return;} if ( this->FieldDataName && _arg && (!strcmp(this->FieldDataName,_arg))) { return;} if (this->FieldDataName) { delete [] this->FieldDataName; } if (_arg) { size_t n = strlen(_arg) + 1; char *cp1 = new char[n]; const char *cp2 = (_arg); this->FieldDataName = cp1; do { *cp1++ = *cp2++; } while ( --n ); } else { this->FieldDataName = __null; } this->Modified(); };
  virtual char* GetFieldDataName () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkDataWriter.h" ", line " << 147 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "FieldDataName" " of " << (this->FieldDataName?this->FieldDataName:"(null)") << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FieldDataName; };



  virtual ostream *OpenVTKFile();



  int WriteHeader(ostream *fp);



  int WritePoints(ostream *fp, vtkPoints *p);



  int WriteCoordinates(ostream *fp, vtkDataArray *coords, int axes);



  int WriteCells(ostream *fp, vtkCellArray *cells, const char *label);




  int WriteCellData(ostream *fp, vtkDataSet *ds);




  int WritePointData(ostream *fp, vtkDataSet *ds);




  int WriteEdgeData(ostream *fp, vtkGraph *g);




  int WriteVertexData(ostream *fp, vtkGraph *g);




  int WriteRowData(ostream *fp, vtkTable *g);



  int WriteFieldData(ostream *fp, vtkFieldData *f);




  int WriteDataSetData(ostream *fp, vtkDataSet *ds);



  void CloseVTKFile(ostream *fp);


protected:
  vtkDataWriter();
  ~vtkDataWriter();

  int WriteToOutputString;
  char *OutputString;
  int OutputStringLength;

  void WriteData();

  char *FileName;
  char *Header;
  int FileType;

  char *ScalarsName;
  char *VectorsName;
  char *TensorsName;
  char *TCoordsName;
  char *NormalsName;
  char *LookupTableName;
  char *FieldDataName;
  char* GlobalIdsName;
  char* PedigreeIdsName;

  int WriteArray(ostream *fp, int dataType, vtkAbstractArray *data, const char *format,
                 int num, int numComp);
  int WriteScalarData(ostream *fp, vtkDataArray *s, int num);
  int WriteVectorData(ostream *fp, vtkDataArray *v, int num);
  int WriteNormalData(ostream *fp, vtkDataArray *n, int num);
  int WriteTCoordData(ostream *fp, vtkDataArray *tc, int num);
  int WriteTensorData(ostream *fp, vtkDataArray *t, int num);
  int WriteGlobalIdData(ostream *fp, vtkDataArray *g, int num);
  int WritePedigreeIdData(ostream *fp, vtkAbstractArray *p, int num);

private:
  vtkDataWriter(const vtkDataWriter&);
  void operator=(const vtkDataWriter&);
};
# 26 "/usr/local/include/vtk-5.10/vtkPolyDataWriter.h" 2

class vtkPolyData;

class __attribute__ ((visibility("default"))) vtkPolyDataWriter : public vtkDataWriter
{
public:
  static vtkPolyDataWriter *New();
  typedef vtkDataWriter Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPolyDataWriter"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPolyDataWriter",type) ) { return 1; } return vtkDataWriter::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPolyDataWriter::IsTypeOf(type); } static vtkPolyDataWriter* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPolyDataWriter") ) { return static_cast<vtkPolyDataWriter *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPolyDataWriter::New(); } public: vtkPolyDataWriter *NewInstance() const { return vtkPolyDataWriter::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  vtkPolyData* GetInput();
  vtkPolyData* GetInput(int port);

protected:
  vtkPolyDataWriter() {};
  ~vtkPolyDataWriter() {};

  void WriteData();

  virtual int FillInputPortInformation(int port, vtkInformation *info);

private:
  vtkPolyDataWriter(const vtkPolyDataWriter&);
  void operator=(const vtkPolyDataWriter&);
};
# 29 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkGenericCell.h" 1
# 32 "/usr/local/include/vtk-5.10/vtkGenericCell.h"
class __attribute__ ((visibility("default"))) vtkGenericCell : public vtkCell
{
public:


  static vtkGenericCell *New();

  typedef vtkCell Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkGenericCell"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkGenericCell",type) ) { return 1; } return vtkCell::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkGenericCell::IsTypeOf(type); } static vtkGenericCell* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkGenericCell") ) { return static_cast<vtkGenericCell *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkGenericCell::New(); } public: vtkGenericCell *NewInstance() const { return vtkGenericCell::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  void ShallowCopy(vtkCell *c);
  void DeepCopy(vtkCell *c);
  int GetCellType();
  int GetCellDimension();
  int IsLinear();
  int RequiresInitialization();
  void Initialize();
  int RequiresExplicitFaceRepresentation();
  void SetFaces(vtkIdType *faces);
  vtkIdType *GetFaces();
  int GetNumberOfEdges();
  int GetNumberOfFaces();
  vtkCell *GetEdge(int edgeId);
  vtkCell *GetFace(int faceId);
  int CellBoundary(int subId, double pcoords[3], vtkIdList *pts);
  int EvaluatePosition(double x[3], double* closestPoint,
                       int& subId, double pcoords[3],
                       double& dist2, double *weights);
  void EvaluateLocation(int& subId, double pcoords[3],
                        double x[3], double *weights);
  void Contour(double value, vtkDataArray *cellScalars,
               vtkIncrementalPointLocator *locator, vtkCellArray *verts,
               vtkCellArray *lines, vtkCellArray *polys,
               vtkPointData *inPd, vtkPointData *outPd,
               vtkCellData *inCd, vtkIdType cellId, vtkCellData *outCd);
  void Clip(double value, vtkDataArray *cellScalars,
            vtkIncrementalPointLocator *locator, vtkCellArray *connectivity,
            vtkPointData *inPd, vtkPointData *outPd,
            vtkCellData *inCd, vtkIdType cellId, vtkCellData *outCd,
            int insideOut);
  int IntersectWithLine(double p1[3], double p2[3], double tol, double& t,
                        double x[3], double pcoords[3], int& subId);
  int Triangulate(int index, vtkIdList *ptIds, vtkPoints *pts);
  void Derivatives(int subId, double pcoords[3], double *values,
                   int dim, double *derivs);
  int GetParametricCenter(double pcoords[3]);
  double *GetParametricCoords();
  int IsPrimaryCell();




  virtual void InterpolateFunctions(double pcoords[3], double *weights);
  virtual void InterpolateDerivs(double pcoords[3], double *derivs);







  void SetCellType(int cellType);
  void SetCellTypeToEmptyCell() {this->SetCellType(VTK_EMPTY_CELL);}
  void SetCellTypeToVertex() {this->SetCellType(VTK_VERTEX);}
  void SetCellTypeToPolyVertex() {this->SetCellType(VTK_POLY_VERTEX);}
  void SetCellTypeToLine() {this->SetCellType(VTK_LINE);}
  void SetCellTypeToPolyLine() {this->SetCellType(VTK_POLY_LINE);}
  void SetCellTypeToTriangle() {this->SetCellType(VTK_TRIANGLE);}
  void SetCellTypeToTriangleStrip() {this->SetCellType(VTK_TRIANGLE_STRIP);}
  void SetCellTypeToPolygon() {this->SetCellType(VTK_POLYGON);}
  void SetCellTypeToPixel() {this->SetCellType(VTK_PIXEL);}
  void SetCellTypeToQuad() {this->SetCellType(VTK_QUAD);}
  void SetCellTypeToTetra() {this->SetCellType(VTK_TETRA);}
  void SetCellTypeToVoxel() {this->SetCellType(VTK_VOXEL);}
  void SetCellTypeToHexahedron() {this->SetCellType(VTK_HEXAHEDRON);}
  void SetCellTypeToWedge() {this->SetCellType(VTK_WEDGE);}
  void SetCellTypeToPyramid() {this->SetCellType(VTK_PYRAMID);}
  void SetCellTypeToPentagonalPrism() {this->SetCellType(VTK_PENTAGONAL_PRISM);}
  void SetCellTypeToHexagonalPrism() {this->SetCellType(VTK_HEXAGONAL_PRISM);}
  void SetCellTypeToPolyhedron() {this->SetCellType(VTK_POLYHEDRON);}
  void SetCellTypeToConvexPointSet() {this->SetCellType(VTK_CONVEX_POINT_SET);}
  void SetCellTypeToQuadraticEdge() {this->SetCellType(VTK_QUADRATIC_EDGE);}
  void SetCellTypeToCubicLine() {this->SetCellType(VTK_CUBIC_LINE);}
  void SetCellTypeToQuadraticTriangle() {this->SetCellType(VTK_QUADRATIC_TRIANGLE);}
  void SetCellTypeToBiQuadraticTriangle() {this->SetCellType(VTK_BIQUADRATIC_TRIANGLE);}
  void SetCellTypeToQuadraticQuad() {this->SetCellType(VTK_QUADRATIC_QUAD);}
  void SetCellTypeToQuadraticTetra() {this->SetCellType(VTK_QUADRATIC_TETRA);}
  void SetCellTypeToQuadraticHexahedron() {this->SetCellType(VTK_QUADRATIC_HEXAHEDRON);}
  void SetCellTypeToQuadraticWedge() {this->SetCellType(VTK_QUADRATIC_WEDGE);}
  void SetCellTypeToQuadraticPyramid() {this->SetCellType(VTK_QUADRATIC_PYRAMID);}
  void SetCellTypeToQuadraticLinearQuad() {this->SetCellType(VTK_QUADRATIC_LINEAR_QUAD);}
  void SetCellTypeToBiQuadraticQuad() {this->SetCellType(VTK_BIQUADRATIC_QUAD);}
  void SetCellTypeToQuadraticLinearWedge() {this->SetCellType(VTK_QUADRATIC_LINEAR_WEDGE);}
  void SetCellTypeToBiQuadraticQuadraticWedge() {
    this->SetCellType(VTK_BIQUADRATIC_QUADRATIC_WEDGE);}
  void SetCellTypeToTriQuadraticHexahedron() {
    this->SetCellType(VTK_TRIQUADRATIC_HEXAHEDRON);}
  void SetCellTypeToBiQuadraticQuadraticHexahedron() {
    this->SetCellType(VTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON);}



  static vtkCell* InstantiateCell(int cellType);

protected:
  vtkGenericCell();
  ~vtkGenericCell();

  vtkCell *Cell;

private:
  vtkGenericCell(const vtkGenericCell&);
  void operator=(const vtkGenericCell&);
};
# 30 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" 1
# 52 "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h"
class vtkFloatArray;
class vtkIdList;
class vtkPolyData;

class __attribute__ ((visibility("default"))) vtkPolyDataNormals : public vtkPolyDataAlgorithm
{
public:
  typedef vtkPolyDataAlgorithm Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPolyDataNormals"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPolyDataNormals",type) ) { return 1; } return vtkPolyDataAlgorithm::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPolyDataNormals::IsTypeOf(type); } static vtkPolyDataNormals* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPolyDataNormals") ) { return static_cast<vtkPolyDataNormals *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPolyDataNormals::New(); } public: vtkPolyDataNormals *NewInstance() const { return vtkPolyDataNormals::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);





  static vtkPolyDataNormals *New();





  virtual void SetFeatureAngle (double _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 72 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " << "FeatureAngle" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->FeatureAngle != (_arg<0.0?0.0:(_arg>180.0?180.0:_arg))) { this->FeatureAngle = (_arg<0.0?0.0:(_arg>180.0?180.0:_arg)); this->Modified(); } } virtual double GetFeatureAngleMinValue () { return 0.0; } virtual double GetFeatureAngleMaxValue () { return 180.0; };
  virtual double GetFeatureAngle () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 73 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "FeatureAngle" " of " << this->FeatureAngle << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FeatureAngle; };



  virtual void SetSplitting (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 77 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "Splitting" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Splitting != _arg) { this->Splitting = _arg; this->Modified(); } };
  virtual int GetSplitting () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 78 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Splitting" " of " << this->Splitting << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Splitting; };
  virtual void SplittingOn () { this->SetSplitting(static_cast<int>(1));} virtual void SplittingOff () { this->SetSplitting(static_cast<int>(0));};



  virtual void SetConsistency (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 83 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "Consistency" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->Consistency != _arg) { this->Consistency = _arg; this->Modified(); } };
  virtual int GetConsistency () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 84 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "Consistency" " of " << this->Consistency << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->Consistency; };
  virtual void ConsistencyOn () { this->SetConsistency(static_cast<int>(1));} virtual void ConsistencyOff () { this->SetConsistency(static_cast<int>(0));};
# 97 "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h"
  virtual void SetAutoOrientNormals (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 97 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "AutoOrientNormals" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->AutoOrientNormals != _arg) { this->AutoOrientNormals = _arg; this->Modified(); } };
  virtual int GetAutoOrientNormals () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 98 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "AutoOrientNormals" " of " << this->AutoOrientNormals << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->AutoOrientNormals; };
  virtual void AutoOrientNormalsOn () { this->SetAutoOrientNormals(static_cast<int>(1));} virtual void AutoOrientNormalsOff () { this->SetAutoOrientNormals(static_cast<int>(0));};



  virtual void SetComputePointNormals (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 103 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ComputePointNormals" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ComputePointNormals != _arg) { this->ComputePointNormals = _arg; this->Modified(); } };
  virtual int GetComputePointNormals () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 104 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ComputePointNormals" " of " << this->ComputePointNormals << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ComputePointNormals; };
  virtual void ComputePointNormalsOn () { this->SetComputePointNormals(static_cast<int>(1));} virtual void ComputePointNormalsOff () { this->SetComputePointNormals(static_cast<int>(0));};



  virtual void SetComputeCellNormals (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 109 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "ComputeCellNormals" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->ComputeCellNormals != _arg) { this->ComputeCellNormals = _arg; this->Modified(); } };
  virtual int GetComputeCellNormals () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 110 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "ComputeCellNormals" " of " << this->ComputeCellNormals << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->ComputeCellNormals; };
  virtual void ComputeCellNormalsOn () { this->SetComputeCellNormals(static_cast<int>(1));} virtual void ComputeCellNormalsOff () { this->SetComputeCellNormals(static_cast<int>(0));};






  virtual void SetFlipNormals (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 118 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "FlipNormals" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->FlipNormals != _arg) { this->FlipNormals = _arg; this->Modified(); } };
  virtual int GetFlipNormals () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 119 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "FlipNormals" " of " << this->FlipNormals << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->FlipNormals; };
  virtual void FlipNormalsOn () { this->SetFlipNormals(static_cast<int>(1));} virtual void FlipNormalsOff () { this->SetFlipNormals(static_cast<int>(0));};





  virtual void SetNonManifoldTraversal (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 126 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "NonManifoldTraversal" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->NonManifoldTraversal != _arg) { this->NonManifoldTraversal = _arg; this->Modified(); } };
  virtual int GetNonManifoldTraversal () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkPolyDataNormals.h" ", line " << 127 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "NonManifoldTraversal" " of " << this->NonManifoldTraversal << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->NonManifoldTraversal; };
  virtual void NonManifoldTraversalOn () { this->SetNonManifoldTraversal(static_cast<int>(1));} virtual void NonManifoldTraversalOff () { this->SetNonManifoldTraversal(static_cast<int>(0));};

protected:
  vtkPolyDataNormals();
  ~vtkPolyDataNormals() {};


  int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *);

  double FeatureAngle;
  int Splitting;
  int Consistency;
  int FlipNormals;
  int AutoOrientNormals;
  int NonManifoldTraversal;
  int ComputePointNormals;
  int ComputeCellNormals;
  int NumFlips;

private:
  vtkIdList *Wave;
  vtkIdList *Wave2;
  vtkIdList *CellIds;
  vtkIdList *Map;
  vtkPolyData *OldMesh;
  vtkPolyData *NewMesh;
  int *Visited;
  vtkFloatArray *PolyNormals;
  double CosAngle;



  void TraverseAndOrder(void);




  void MarkAndSplit(vtkIdType ptId);

private:
  vtkPolyDataNormals(const vtkPolyDataNormals&);
  void operator=(const vtkPolyDataNormals&);
};
# 31 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkCellLocator.h" 1
# 40 "/usr/local/include/vtk-5.10/vtkCellLocator.h"
class vtkNeighborCells;

class __attribute__ ((visibility("default"))) vtkCellLocator : public vtkAbstractCellLocator
{
public:
  typedef vtkAbstractCellLocator Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCellLocator"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCellLocator",type) ) { return 1; } return vtkAbstractCellLocator::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCellLocator::IsTypeOf(type); } static vtkCellLocator* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCellLocator") ) { return static_cast<vtkCellLocator *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCellLocator::New(); } public: vtkCellLocator *NewInstance() const { return vtkCellLocator::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  static vtkCellLocator *New();



  void SetNumberOfCellsPerBucket(int N)
  { this->SetNumberOfCellsPerNode(N); }
  int GetNumberOfCellsPerBucket()
  { return this->NumberOfCellsPerNode; }
# 72 "/usr/local/include/vtk-5.10/vtkCellLocator.h"
  virtual int IntersectWithLine(
    double a0[3], double a1[3], double tol,
    double& t, double x[3], double pcoords[3],
    int &subId)
  {
    return Superclass::
      IntersectWithLine(a0, a1, tol,t, x, pcoords, subId);
  }



  virtual int IntersectWithLine(
    double a0[3], double a1[3], double tol,
    double& t, double x[3], double pcoords[3],
    int &subId, vtkIdType &cellId)
  {
    return Superclass::
      IntersectWithLine(a0, a1, tol,t, x, pcoords, subId, cellId);
  }



  virtual int IntersectWithLine(
    const double a0[3], const double a1[3],
    vtkPoints *points, vtkIdList *cellIds)
  {
    return Superclass::
      IntersectWithLine(a0, a1, points, cellIds);
  }





  virtual int IntersectWithLine(double a0[3], double a1[3], double tol,
                                double& t, double x[3], double pcoords[3],
                                int &subId, vtkIdType &cellId,
                                vtkGenericCell *cell);



  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkIdType &cellId, int &subId, double& dist2)
  {
    Superclass::
      FindClosestPoint(x, closestPoint, cellId, subId, dist2);
  }
# 131 "/usr/local/include/vtk-5.10/vtkCellLocator.h"
  virtual void FindClosestPoint(
    double x[3], double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2);



  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3], vtkIdType &cellId,
    int &subId, double& dist2)
  {
    return Superclass::FindClosestPointWithinRadius
      (x, radius, closestPoint, cellId, subId, dist2);
  }



  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius,
    double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2)
  {
    return Superclass::FindClosestPointWithinRadius
      (x, radius, closestPoint, cell, cellId, subId, dist2);
  }
# 175 "/usr/local/include/vtk-5.10/vtkCellLocator.h"
  virtual vtkIdType FindClosestPointWithinRadius(
    double x[3], double radius, double closestPoint[3],
    vtkGenericCell *cell, vtkIdType &cellId,
    int &subId, double& dist2, int &inside);



  virtual vtkIdList *GetCells(int bucket);




  virtual int GetNumberOfBuckets(void);




  virtual vtkIdType FindCell(double x[3])
    { return this->Superclass::FindCell(x); }





  virtual vtkIdType FindCell(
    double x[3], double tol2, vtkGenericCell *GenCell,
    double pcoords[3], double *weights);





  virtual void FindCellsWithinBounds(double *bbox, vtkIdList *cells);







  virtual void FindCellsAlongLine(
    double p1[3], double p2[3], double tolerance, vtkIdList *cells);



  virtual void FreeSearchStructure();
  virtual void BuildLocator();
  virtual void BuildLocatorIfNeeded();
  virtual void ForceBuildLocator();
  virtual void BuildLocatorInternal();
  virtual void GenerateRepresentation(int level, vtkPolyData *pd);

protected:
  vtkCellLocator();
  ~vtkCellLocator();

  void GetBucketNeighbors(int ijk[3], int ndivs, int level);
  void GetOverlappingBuckets(double x[3], int ijk[3], double dist,
                             int prevMinLevel[3], int prevMaxLevel[3]);

  void ClearCellHasBeenVisited();
  void ClearCellHasBeenVisited(int id);

  double Distance2ToBucket(double x[3], int nei[3]);
  double Distance2ToBounds(double x[3], double bounds[6]);

  int NumberOfOctants;
  double Bounds[6];
  int NumberOfParents;
  double H[3];
  int NumberOfDivisions;
  vtkIdList **Tree;

  void MarkParents(void*, int, int, int, int, int);
  void GetChildren(int idx, int level, int children[8]);
  int GenerateIndex(int offset, int numDivs, int i, int j, int k,
                    vtkIdType &idx);
  void GenerateFace(int face, int numDivs, int i, int j, int k,
                    vtkPoints *pts, vtkCellArray *polys);

  vtkNeighborCells *Buckets;
  unsigned char *CellHasBeenVisited;
  unsigned char QueryNumber;

  void ComputeOctantBounds(int i, int j, int k);
  double OctantBounds[6];
  int IsInOctantBounds(double x[3])
    {
    if ( this->OctantBounds[0] <= x[0] && x[0] <= this->OctantBounds[1] &&
         this->OctantBounds[2] <= x[1] && x[1] <= this->OctantBounds[3] &&
         this->OctantBounds[4] <= x[2] && x[2] <= this->OctantBounds[5] )
      {
      return 1;
      }
    else
      {
      return 0;
      }
    }

private:
  vtkCellLocator(const vtkCellLocator&);
  void operator=(const vtkCellLocator&);
};
# 32 "IntersectMeshes_OK2.cpp" 2
# 1 "/usr/local/include/vtk-5.10/vtkTriangleFilter.h" 1
# 26 "/usr/local/include/vtk-5.10/vtkTriangleFilter.h"
class __attribute__ ((visibility("default"))) vtkTriangleFilter : public vtkPolyDataAlgorithm
{
public:
  static vtkTriangleFilter *New();
  typedef vtkPolyDataAlgorithm Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkTriangleFilter"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkTriangleFilter",type) ) { return 1; } return vtkPolyDataAlgorithm::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkTriangleFilter::IsTypeOf(type); } static vtkTriangleFilter* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkTriangleFilter") ) { return static_cast<vtkTriangleFilter *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkTriangleFilter::New(); } public: vtkTriangleFilter *NewInstance() const { return vtkTriangleFilter::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  virtual void PassVertsOn () { this->SetPassVerts(static_cast<int>(1));} virtual void PassVertsOff () { this->SetPassVerts(static_cast<int>(0));};
  virtual void SetPassVerts (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkTriangleFilter.h" ", line " << 36 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "PassVerts" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->PassVerts != _arg) { this->PassVerts = _arg; this->Modified(); } };
  virtual int GetPassVerts () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkTriangleFilter.h" ", line " << 37 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "PassVerts" " of " << this->PassVerts << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PassVerts; };



  virtual void PassLinesOn () { this->SetPassLines(static_cast<int>(1));} virtual void PassLinesOff () { this->SetPassLines(static_cast<int>(0));};
  virtual void SetPassLines (int _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkTriangleFilter.h" ", line " << 42 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "PassLines" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->PassLines != _arg) { this->PassLines = _arg; this->Modified(); } };
  virtual int GetPassLines () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkTriangleFilter.h" ", line " << 43 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "PassLines" " of " << this->PassLines << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->PassLines; };

protected:
  vtkTriangleFilter() : PassVerts(1), PassLines(1) {};
  ~vtkTriangleFilter() {};


  int RequestData(vtkInformation *, vtkInformationVector **, vtkInformationVector *);

  int PassVerts;
  int PassLines;
private:
  vtkTriangleFilter(const vtkTriangleFilter&);
  void operator=(const vtkTriangleFilter&);
};
# 33 "IntersectMeshes_OK2.cpp" 2

# 1 "MESH2vtkPolyData.h" 1
# 1 "/usr/local/include/vtk-5.10/vtkPolyData.h" 1
# 2 "MESH2vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkPoints.h" 1
# 3 "MESH2vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkCellArray.h" 1
# 37 "/usr/local/include/vtk-5.10/vtkCellArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkIdTypeArray.h" 1
# 30 "/usr/local/include/vtk-5.10/vtkIdTypeArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkIdTypeArray.h" 2



class __attribute__ ((visibility("default"))) vtkIdTypeArray : public vtkDataArrayTemplate<vtkIdType>

{
public:
  static vtkIdTypeArray* New();
  typedef vtkDataArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkIdTypeArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkIdTypeArray",type) ) { return 1; } return vtkDataArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkIdTypeArray::IsTypeOf(type); } static vtkIdTypeArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkIdTypeArray") ) { return static_cast<vtkIdTypeArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkIdTypeArray::New(); } public: vtkIdTypeArray *NewInstance() const { return vtkIdTypeArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataType()
    { return 12; }



  void GetTupleValue(vtkIdType i, vtkIdType* tuple)
    { this->RealSuperclass::GetTupleValue(i, tuple); }



  void SetTupleValue(vtkIdType i, const vtkIdType* tuple)
    { this->RealSuperclass::SetTupleValue(i, tuple); }




  void InsertTupleValue(vtkIdType i, const vtkIdType* tuple)
    { this->RealSuperclass::InsertTupleValue(i, tuple); }



  vtkIdType InsertNextTupleValue(const vtkIdType* tuple)
    { return this->RealSuperclass::InsertNextTupleValue(tuple); }



  vtkIdType GetValue(vtkIdType id)
    { return this->RealSuperclass::GetValue(id); }




  void SetValue(vtkIdType id, vtkIdType value)
    { this->RealSuperclass::SetValue(id, value); }





  void SetNumberOfValues(vtkIdType number)
    { this->RealSuperclass::SetNumberOfValues(number); }



  void InsertValue(vtkIdType id, vtkIdType f)
    { this->RealSuperclass::InsertValue(id, f); }



  vtkIdType InsertNextValue(vtkIdType f)
    { return this->RealSuperclass::InsertNextValue(f); }




  vtkIdType *GetValueRange(int comp)
    { return this->RealSuperclass::GetValueRange(comp); }

  void GetValueRange(vtkIdType range[2], int comp)
    { this->RealSuperclass::GetValueRange(range, comp); }





  vtkIdType *GetValueRange()
    { return this->RealSuperclass::GetValueRange(0); }

  void GetValueRange(vtkIdType range[2])
    { this->RealSuperclass::GetValueRange(range, 0); }




  static vtkIdType GetDataTypeValueMin() { return -static_cast< long long >(~0ull >> 1)-1; }



  static vtkIdType GetDataTypeValueMax() { return static_cast< long long >(~0ull >> 1); }





  vtkIdType* WritePointer(vtkIdType id, vtkIdType number)
    { return this->RealSuperclass::WritePointer(id, number); }




  vtkIdType* GetPointer(vtkIdType id)
    { return this->RealSuperclass::GetPointer(id); }
# 144 "/usr/local/include/vtk-5.10/vtkIdTypeArray.h"
  void SetArray(vtkIdType* array, vtkIdType size, int save)
    { this->RealSuperclass::SetArray(array, size, save); }
  void SetArray(vtkIdType* array, vtkIdType size, int save, int deleteMethod)
    { this->RealSuperclass::SetArray(array, size, save, deleteMethod); }

protected:
  vtkIdTypeArray(vtkIdType numComp=1);
  ~vtkIdTypeArray();

private:

  typedef vtkDataArrayTemplate<vtkIdType> RealSuperclass;

  vtkIdTypeArray(const vtkIdTypeArray&);
  void operator=(const vtkIdTypeArray&);
};
# 38 "/usr/local/include/vtk-5.10/vtkCellArray.h" 2


class __attribute__ ((visibility("default"))) vtkCellArray : public vtkObject
{
public:
  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCellArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCellArray",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCellArray::IsTypeOf(type); } static vtkCellArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCellArray") ) { return static_cast<vtkCellArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCellArray::New(); } public: vtkCellArray *NewInstance() const { return vtkCellArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  static vtkCellArray *New();



  int Allocate(const vtkIdType sz, const int ext=1000)
    {return this->Ia->Allocate(sz,ext);}



  void Initialize();



  virtual vtkIdType GetNumberOfCells () { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCellArray.h" ", line " << 61 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): returning " << "NumberOfCells" " of " << this->NumberOfCells << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; return this->NumberOfCells; };




  virtual void SetNumberOfCells (vtkIdType _arg) { { if (this->GetDebug() && vtkObject::GetGlobalWarningDisplay()) { vtkOStreamWrapper::EndlType endl; vtkOStreamWrapper::UseEndl(endl); vtkOStrStreamWrapper vtkmsg; vtkmsg << "Debug: In " "/usr/local/include/vtk-5.10/vtkCellArray.h" ", line " << 66 << "\n" << this->GetClassName() << " (" << this << "): " << this->GetClassName() << " (" << this << "): setting " "NumberOfCells" " to " << _arg << "\n\n"; vtkOutputWindowDisplayDebugText(vtkmsg.str()); vtkmsg.rdbuf()->freeze(0); } }; if (this->NumberOfCells != _arg) { this->NumberOfCells = _arg; this->Modified(); } };
# 75 "/usr/local/include/vtk-5.10/vtkCellArray.h"
  vtkIdType EstimateSize(vtkIdType numCells, int maxPtsPerCell)
    {return numCells*(1+maxPtsPerCell);}




  void InitTraversal() {this->TraversalLocation=0;};





  int GetNextCell(vtkIdType& npts, vtkIdType* &pts);





  int GetNextCell(vtkIdList *pts);



  vtkIdType GetSize()
    {return this->Ia->GetSize();}





  vtkIdType GetNumberOfConnectivityEntries()
    {return this->Ia->GetMaxId()+1;}




  void GetCell(vtkIdType loc, vtkIdType &npts, vtkIdType* &pts);




  void GetCell(vtkIdType loc, vtkIdList* pts);



  vtkIdType InsertNextCell(vtkCell *cell);




  vtkIdType InsertNextCell(vtkIdType npts, const vtkIdType* pts);




  vtkIdType InsertNextCell(vtkIdList *pts);






  vtkIdType InsertNextCell(int npts);




  void InsertCellPoint(vtkIdType id);




  void UpdateCellCount(int npts);




  vtkIdType GetInsertLocation(int npts)
    {return (this->InsertLocation - npts - 1);};



  vtkIdType GetTraversalLocation()
    {return this->TraversalLocation;}
  void SetTraversalLocation(vtkIdType loc)
    {this->TraversalLocation = loc;}




  vtkIdType GetTraversalLocation(vtkIdType npts)
    {return(this->TraversalLocation-npts-1);}




  void ReverseCell(vtkIdType loc);



  void ReplaceCell(vtkIdType loc, int npts, const vtkIdType *pts);




  int GetMaxCellSize();



  vtkIdType *GetPointer()
    {return this->Ia->GetPointer(0);}





  vtkIdType *WritePointer(const vtkIdType ncells, const vtkIdType size);
# 200 "/usr/local/include/vtk-5.10/vtkCellArray.h"
  void SetCells(vtkIdType ncells, vtkIdTypeArray *cells);



  void DeepCopy(vtkCellArray *ca);



  vtkIdTypeArray* GetData()
    {return this->Ia;}



  void Reset();



  void Squeeze()
    {this->Ia->Squeeze();}
# 227 "/usr/local/include/vtk-5.10/vtkCellArray.h"
  unsigned long GetActualMemorySize();

protected:
  vtkCellArray();
  ~vtkCellArray();

  vtkIdType NumberOfCells;
  vtkIdType InsertLocation;
  vtkIdType TraversalLocation;
  vtkIdTypeArray *Ia;

private:
  vtkCellArray(const vtkCellArray&);
  void operator=(const vtkCellArray&);
};



inline vtkIdType vtkCellArray::InsertNextCell(vtkIdType npts,
                                              const vtkIdType* pts)
{
  vtkIdType i = this->Ia->GetMaxId() + 1;
  vtkIdType *ptr = this->Ia->WritePointer(i, npts+1);

  for ( *ptr++ = npts, i = 0; i < npts; i++)
    {
    *ptr++ = *pts++;
    }

  this->NumberOfCells++;
  this->InsertLocation += npts + 1;

  return this->NumberOfCells - 1;
}


inline vtkIdType vtkCellArray::InsertNextCell(int npts)
{
  this->InsertLocation = this->Ia->InsertNextValue(npts) + 1;
  this->NumberOfCells++;

  return this->NumberOfCells - 1;
}


inline void vtkCellArray::InsertCellPoint(vtkIdType id)
{
  this->Ia->InsertValue(this->InsertLocation++, id);
}


inline void vtkCellArray::UpdateCellCount(int npts)
{
  this->Ia->SetValue(this->InsertLocation-npts-1, npts);
}


inline vtkIdType vtkCellArray::InsertNextCell(vtkIdList *pts)
{
  return this->InsertNextCell(pts->GetNumberOfIds(), pts->GetPointer(0));
}


inline vtkIdType vtkCellArray::InsertNextCell(vtkCell *cell)
{
  return this->InsertNextCell(cell->GetNumberOfPoints(),
                              cell->PointIds->GetPointer(0));
}


inline void vtkCellArray::Reset()
{
  this->NumberOfCells = 0;
  this->InsertLocation = 0;
  this->TraversalLocation = 0;
  this->Ia->Reset();
}


inline int vtkCellArray::GetNextCell(vtkIdType& npts, vtkIdType* &pts)
{
  if ( this->Ia->GetMaxId() >= 0 &&
       this->TraversalLocation <= this->Ia->GetMaxId() )
    {
    npts = this->Ia->GetValue(this->TraversalLocation++);
    pts = this->Ia->GetPointer(this->TraversalLocation);
    this->TraversalLocation += npts;
    return 1;
    }
  npts=0;
  pts=0;
  return 0;
}


inline void vtkCellArray::GetCell(vtkIdType loc, vtkIdType &npts,
                                  vtkIdType* &pts)
{
  npts = this->Ia->GetValue(loc++);
  pts = this->Ia->GetPointer(loc);
}


inline void vtkCellArray::ReverseCell(vtkIdType loc)
{
  int i;
  vtkIdType tmp;
  vtkIdType npts=this->Ia->GetValue(loc);
  vtkIdType *pts=this->Ia->GetPointer(loc+1);
  for (i=0; i < (npts/2); i++)
    {
    tmp = pts[i];
    pts[i] = pts[npts-i-1];
    pts[npts-i-1] = tmp;
    }
}


inline void vtkCellArray::ReplaceCell(vtkIdType loc, int npts,
                                      const vtkIdType *pts)
{
  vtkIdType *oldPts=this->Ia->GetPointer(loc+1);
  for (int i=0; i < npts; i++)
    {
    oldPts[i] = pts[i];
    }
}


inline vtkIdType *vtkCellArray::WritePointer(const vtkIdType ncells,
                                             const vtkIdType size)
{
  this->NumberOfCells = ncells;
  this->InsertLocation = 0;
  this->TraversalLocation = 0;
  return this->Ia->WritePointer(0,size);
}
# 4 "MESH2vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkDoubleArray.h" 1
# 30 "/usr/local/include/vtk-5.10/vtkDoubleArray.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataArrayTemplate.h" 1
# 31 "/usr/local/include/vtk-5.10/vtkDoubleArray.h" 2



class __attribute__ ((visibility("default"))) vtkDoubleArray : public vtkDataArrayTemplate<double>

{
public:
  static vtkDoubleArray* New();
  typedef vtkDataArray Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDoubleArray"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDoubleArray",type) ) { return 1; } return vtkDataArray::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDoubleArray::IsTypeOf(type); } static vtkDoubleArray* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDoubleArray") ) { return static_cast<vtkDoubleArray *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDoubleArray::New(); } public: vtkDoubleArray *NewInstance() const { return vtkDoubleArray::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);



  int GetDataType()
    { return 11; }



  void GetTupleValue(vtkIdType i, double* tuple)
    { this->RealSuperclass::GetTupleValue(i, tuple); }



  void SetTupleValue(vtkIdType i, const double* tuple)
    { this->RealSuperclass::SetTupleValue(i, tuple); }




  void InsertTupleValue(vtkIdType i, const double* tuple)
    { this->RealSuperclass::InsertTupleValue(i, tuple); }



  vtkIdType InsertNextTupleValue(const double* tuple)
    { return this->RealSuperclass::InsertNextTupleValue(tuple); }



  double GetValue(vtkIdType id)
    { return this->RealSuperclass::GetValue(id); }




  void SetValue(vtkIdType id, double value)
    { this->RealSuperclass::SetValue(id, value); }





  void SetNumberOfValues(vtkIdType number)
    { this->RealSuperclass::SetNumberOfValues(number); }



  void InsertValue(vtkIdType id, double f)
    { this->RealSuperclass::InsertValue(id, f); }



  vtkIdType InsertNextValue(double f)
    { return this->RealSuperclass::InsertNextValue(f); }




  double *GetValueRange(int comp)
    { return this->RealSuperclass::GetValueRange(comp); }

  void GetValueRange(double range[2], int comp)
    { this->RealSuperclass::GetValueRange(range, comp); }





  double *GetValueRange()
    { return this->RealSuperclass::GetValueRange(0); }

  void GetValueRange(double range[2])
    { this->RealSuperclass::GetValueRange(range, 0); }




  static double GetDataTypeValueMin() { return static_cast< double >(-1.0e+299); }



  static double GetDataTypeValueMax() { return static_cast< double >(1.0e+299); }





  double* WritePointer(vtkIdType id, vtkIdType number)
    { return this->RealSuperclass::WritePointer(id, number); }




  double* GetPointer(vtkIdType id)
    { return this->RealSuperclass::GetPointer(id); }
# 144 "/usr/local/include/vtk-5.10/vtkDoubleArray.h"
  void SetArray(double* array, vtkIdType size, int save)
    { this->RealSuperclass::SetArray(array, size, save); }
  void SetArray(double* array, vtkIdType size, int save, int deleteMethod)
    { this->RealSuperclass::SetArray(array, size, save, deleteMethod); }

protected:
  vtkDoubleArray(vtkIdType numComp=1);
  ~vtkDoubleArray();

private:

  typedef vtkDataArrayTemplate<double> RealSuperclass;

  vtkDoubleArray(const vtkDoubleArray&);
  void operator=(const vtkDoubleArray&);
};
# 5 "MESH2vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkCellData.h" 1
# 26 "/usr/local/include/vtk-5.10/vtkCellData.h"
# 1 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h" 1
# 44 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
# 1 "/usr/local/include/vtk-5.10/vtkFieldData.h" 1
# 51 "/usr/local/include/vtk-5.10/vtkFieldData.h"
class vtkIdList;

class __attribute__ ((visibility("default"))) vtkFieldData : public vtkObject
{
public:
  static vtkFieldData *New();

  typedef vtkObject Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkFieldData"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkFieldData",type) ) { return 1; } return vtkObject::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkFieldData::IsTypeOf(type); } static vtkFieldData* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkFieldData") ) { return static_cast<vtkFieldData *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkFieldData::New(); } public: vtkFieldData *NewInstance() const { return vtkFieldData::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  virtual void Initialize();




  int Allocate(const vtkIdType sz, const vtkIdType ext=1000);





  void CopyStructure(vtkFieldData*);
# 85 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void AllocateArrays(int num);






  int GetNumberOfArrays()
    {
      return this->NumberOfActiveArrays;
    }




  int AddArray(vtkAbstractArray *array);



  virtual void RemoveArray(const char *name)
    {
      int i;
      this->GetAbstractArray(name, i);
      this->RemoveArray(i);
    }





  vtkDataArray *GetArray(int i);





  vtkDataArray *GetArray(const char *arrayName, int &index);





  vtkDataArray *GetArray(const char *arrayName)
    {
      int i;
      return this->GetArray(arrayName, i);
    }





  vtkAbstractArray* GetAbstractArray(int i);





  vtkAbstractArray* GetAbstractArray(const char* arrayName, int &index);




  vtkAbstractArray* GetAbstractArray(const char* arrayName)
    {
    int i;
    return this->GetAbstractArray(arrayName, i);
    }



  int HasArray(const char *name)
    {
      int i;
      vtkAbstractArray *array = this->GetAbstractArray(name, i);

      return array ? 1 : 0;
    }





  const char* GetArrayName(int i)
    {
    vtkAbstractArray* da = this->GetAbstractArray(i);
    return da ? da->GetName() : 0;
    }




  virtual void PassData(vtkFieldData* fd);
# 187 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void CopyFieldOn(const char* name) { this->CopyFieldOnOff(name, 1); }
  void CopyFieldOff(const char* name) { this->CopyFieldOnOff(name, 0); }
# 198 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  virtual void CopyAllOn(int unused=0);
# 208 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  virtual void CopyAllOff(int unused=0);



  virtual void DeepCopy(vtkFieldData *da);



  virtual void ShallowCopy(vtkFieldData *da);



  void Squeeze();




  void Reset();






  virtual unsigned long GetActualMemorySize();



  unsigned long int GetMTime();
# 246 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void GetField(vtkIdList *ptId, vtkFieldData *f);







  int GetArrayContainingComponent(int i, int& arrayComp);
# 264 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  int GetNumberOfComponents();
# 275 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  vtkIdType GetNumberOfTuples();
# 284 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void SetNumberOfTuples(const vtkIdType number);





  void SetTuple(const vtkIdType i, const vtkIdType j, vtkFieldData* source);




  void InsertTuple(const vtkIdType i, const vtkIdType j, vtkFieldData* source);





  vtkIdType InsertNextTuple(const vtkIdType j, vtkFieldData* source);
# 314 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  double *GetTuple(const vtkIdType i) __attribute__((deprecated));







  void GetTuple(const vtkIdType i, double * tuple) __attribute__((deprecated));







  void SetTuple(const vtkIdType i, const double * tuple) __attribute__((deprecated));







  void InsertTuple(const vtkIdType i, const double * tuple) __attribute__((deprecated));







  vtkIdType InsertNextTuple(const double * tuple) __attribute__((deprecated));







  double GetComponent(const vtkIdType i, const int j) __attribute__((deprecated));
# 363 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void SetComponent(const vtkIdType i, const int j, const double c) __attribute__((deprecated));
# 372 "/usr/local/include/vtk-5.10/vtkFieldData.h"
  void InsertComponent(const vtkIdType i, const int j, const double c) __attribute__((deprecated));
protected:

  vtkFieldData();
  ~vtkFieldData();

  int NumberOfArrays;
  int NumberOfActiveArrays;
  vtkAbstractArray **Data;



  void SetArray(int i, vtkAbstractArray *array);

  virtual void RemoveArray(int index);



  virtual void InitializeFields();



  struct CopyFieldFlag
  {
    char* ArrayName;
    int IsCopied;
  };

  CopyFieldFlag* CopyFieldFlags;
  int NumberOfFieldFlags;
  void CopyFieldOnOff(const char* name, int onOff);
  void ClearFieldFlags();
  int FindFlag(const char* field);
  int GetFlag(const char* field);
  void CopyFlags(const vtkFieldData* source);
  int DoCopyAllOn;
  int DoCopyAllOff;


private:
  vtkFieldData(const vtkFieldData&);
  void operator=(const vtkFieldData&);



  int TupleSize;
  double* Tuple;

public:

  class __attribute__ ((visibility("default"))) BasicIterator
  {
  public:
    BasicIterator();
    BasicIterator(const BasicIterator& source);
    BasicIterator(const int* list, unsigned int listSize);
    BasicIterator& operator=(const BasicIterator& source);
    virtual ~BasicIterator();
    void PrintSelf(ostream &os, vtkIndent indent);

    int GetListSize() const
      {
        return this->ListSize;
      }
    int GetCurrentIndex()
      {
        return this->List[this->Position];
      }
    int BeginIndex()
      {
        this->Position = -1;
        return this->NextIndex();
      }
    int End() const
      {
        return (this->Position >= this->ListSize);
      }
    int NextIndex()
      {
        this->Position++;
        return (this->End() ? -1 : this->List[this->Position]);
      }

  protected:

    int* List;
    int ListSize;
    int Position;
  };

  class __attribute__ ((visibility("default"))) Iterator : public BasicIterator
  {
  public:

    Iterator(const Iterator& source);
    Iterator& operator=(const Iterator& source);
    virtual ~Iterator();
    Iterator(vtkFieldData* dsa, const int* list=0,
             unsigned int listSize=0);

    vtkDataArray* Begin()
      {
        this->Position = -1;
        return this->Next();
      }

    vtkDataArray* Next()
      {
        this->Position++;
        if (this->End())
          {
          return 0;
          }




        vtkDataArray* cur = Fields->GetArray(this->List[this->Position]);
        return (cur? cur : this->Next());
      }

    void DetachFieldData();

  protected:
    vtkFieldData* Fields;
    int Detached;
  };




};
# 45 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h" 2

class vtkLookupTable;

class __attribute__ ((visibility("default"))) vtkDataSetAttributes : public vtkFieldData
{
public:


  static vtkDataSetAttributes *New();

  typedef vtkFieldData Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkDataSetAttributes"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkDataSetAttributes",type) ) { return 1; } return vtkFieldData::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkDataSetAttributes::IsTypeOf(type); } static vtkDataSetAttributes* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkDataSetAttributes") ) { return static_cast<vtkDataSetAttributes *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkDataSetAttributes::New(); } public: vtkDataSetAttributes *NewInstance() const { return vtkDataSetAttributes::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);




  virtual void Initialize();




  virtual void Update() {}







  virtual void DeepCopy(vtkFieldData *pd);




  virtual void ShallowCopy(vtkFieldData *pd);




  enum AttributeTypes
  {
    SCALARS=0,
    VECTORS=1,
    NORMALS=2,
    TCOORDS=3,
    TENSORS=4,
    GLOBALIDS=5,
    PEDIGREEIDS=6,
    EDGEFLAG=7,
    NUM_ATTRIBUTES
  };

  enum AttributeLimitTypes
  {
    MAX,
    EXACT,
    NOLIMIT
  };




  int SetScalars(vtkDataArray* da);
  int SetActiveScalars(const char* name);
  vtkDataArray* GetScalars();



  int SetVectors(vtkDataArray* da);
  int SetActiveVectors(const char* name);
  vtkDataArray* GetVectors();



  int SetNormals(vtkDataArray* da);
  int SetActiveNormals(const char* name);
  vtkDataArray* GetNormals();



  int SetTCoords(vtkDataArray* da);
  int SetActiveTCoords(const char* name);
  vtkDataArray* GetTCoords();



  int SetTensors(vtkDataArray* da);
  int SetActiveTensors(const char* name);
  vtkDataArray* GetTensors();



  int SetGlobalIds(vtkDataArray* da);
  int SetActiveGlobalIds(const char* name);
  vtkDataArray* GetGlobalIds();



  int SetPedigreeIds(vtkAbstractArray* da);
  int SetActivePedigreeIds(const char* name);
  vtkAbstractArray* GetPedigreeIds();





  vtkDataArray* GetScalars(const char* name);
  vtkDataArray* GetVectors(const char* name);
  vtkDataArray* GetNormals(const char* name);
  vtkDataArray* GetTCoords(const char* name);
  vtkDataArray* GetTensors(const char* name);
  vtkDataArray* GetGlobalIds(const char* name);
  vtkAbstractArray* GetPedigreeIds(const char* name);
# 172 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  int SetActiveAttribute(const char* name, int attributeType);



  int SetActiveAttribute(int index, int attributeType);




  void GetAttributeIndices(int* indexArray);






  int IsArrayAnAttribute(int idx);






  vtkDataArray* GetAttribute(int attributeType);







  vtkAbstractArray* GetAbstractAttribute(int attributeType);



  virtual void RemoveArray(const char *name);
  virtual void RemoveArray(int index);





  static const char* GetAttributeTypeAsString(int attributeType);
  static const char* GetLongAttributeTypeAsString(int attributeType);




  enum AttributeCopyOperations
  {
    COPYTUPLE=0,
    INTERPOLATE=1,
    PASSDATA=2,
    ALLCOPY
  };
# 235 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyAttribute (int index, int value, int ctype=ALLCOPY);
# 252 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyScalars(int i, int ctype=ALLCOPY);
  int GetCopyScalars(int ctype=ALLCOPY);
  virtual void CopyScalarsOn () { this->SetCopyScalars(static_cast<int>(1));} virtual void CopyScalarsOff () { this->SetCopyScalars(static_cast<int>(0));};
# 271 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyVectors(int i, int ctype=ALLCOPY);
  int GetCopyVectors(int ctype=ALLCOPY);
  virtual void CopyVectorsOn () { this->SetCopyVectors(static_cast<int>(1));} virtual void CopyVectorsOff () { this->SetCopyVectors(static_cast<int>(0));};
# 290 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyNormals(int i, int ctype=ALLCOPY);
  int GetCopyNormals(int ctype=ALLCOPY);
  virtual void CopyNormalsOn () { this->SetCopyNormals(static_cast<int>(1));} virtual void CopyNormalsOff () { this->SetCopyNormals(static_cast<int>(0));};
# 309 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyTCoords(int i, int ctype=ALLCOPY);
  int GetCopyTCoords(int ctype=ALLCOPY);
  virtual void CopyTCoordsOn () { this->SetCopyTCoords(static_cast<int>(1));} virtual void CopyTCoordsOff () { this->SetCopyTCoords(static_cast<int>(0));};
# 328 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyTensors(int i, int ctype=ALLCOPY);
  int GetCopyTensors(int ctype=ALLCOPY);
  virtual void CopyTensorsOn () { this->SetCopyTensors(static_cast<int>(1));} virtual void CopyTensorsOff () { this->SetCopyTensors(static_cast<int>(0));};
# 347 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyGlobalIds(int i, int ctype=ALLCOPY);
  int GetCopyGlobalIds(int ctype=ALLCOPY);
  virtual void CopyGlobalIdsOn () { this->SetCopyGlobalIds(static_cast<int>(1));} virtual void CopyGlobalIdsOff () { this->SetCopyGlobalIds(static_cast<int>(0));};
# 366 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void SetCopyPedigreeIds(int i, int ctype=ALLCOPY);
  int GetCopyPedigreeIds(int ctype=ALLCOPY);
  virtual void CopyPedigreeIdsOn () { this->SetCopyPedigreeIds(static_cast<int>(1));} virtual void CopyPedigreeIdsOff () { this->SetCopyPedigreeIds(static_cast<int>(0));};
# 385 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  virtual void CopyAllOn(int ctype=ALLCOPY);
# 402 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  virtual void CopyAllOff(int ctype=ALLCOPY);
# 414 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  virtual void PassData(vtkFieldData* fd);
# 428 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void CopyAllocate(vtkDataSetAttributes* pd, vtkIdType sze=0,
                    vtkIdType ext=1000)
    {
      this->CopyAllocate(pd, sze, ext, 0);
    }
  void CopyAllocate(vtkDataSetAttributes* pd, vtkIdType sze,
                    vtkIdType ext, int shallowCopyArrays);




  void CopyStructuredData(vtkDataSetAttributes *inDsa,
                          const int *inExt, const int *outExt);
# 451 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void CopyData(vtkDataSetAttributes *fromPd, vtkIdType fromId, vtkIdType toId);







  void CopyTuple(vtkAbstractArray *fromData, vtkAbstractArray *toData,
                 vtkIdType fromId, vtkIdType toId);
# 472 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void InterpolateAllocate(vtkDataSetAttributes* pd, vtkIdType sze=0,
                           vtkIdType ext=1000)
    {
      this->InterpolateAllocate(pd, sze, ext, 0);
    }
  void InterpolateAllocate(vtkDataSetAttributes* pd, vtkIdType sze,
                           vtkIdType ext, int shallowCopyArrays);







  void InterpolatePoint(vtkDataSetAttributes *fromPd, vtkIdType toId,
                        vtkIdList *ids, double *weights);
# 497 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void InterpolateEdge(vtkDataSetAttributes *fromPd, vtkIdType toId,
                       vtkIdType p1, vtkIdType p2, double t);
# 511 "/usr/local/include/vtk-5.10/vtkDataSetAttributes.h"
  void InterpolateTime(vtkDataSetAttributes *from1,
                       vtkDataSetAttributes *from2,
                       vtkIdType id, double t);


  class FieldList;






  void CopyAllocate(vtkDataSetAttributes::FieldList& list, vtkIdType sze=0,
                    vtkIdType ext=1000);






  void CopyData(vtkDataSetAttributes::FieldList& list,
                vtkDataSetAttributes* dsa, int idx, vtkIdType fromId,
                vtkIdType toId);






  void InterpolateAllocate(vtkDataSetAttributes::FieldList& list, vtkIdType sze=0,
                    vtkIdType ext=1000);






  void InterpolatePoint(
    vtkDataSetAttributes::FieldList& list,
    vtkDataSetAttributes *fromPd,
    int idx, vtkIdType toId,
    vtkIdList *ids, double *weights);

  friend class vtkDataSetAttributes::FieldList;



protected:
  vtkDataSetAttributes();
  ~vtkDataSetAttributes();

  void InternalCopyAllocate(vtkDataSetAttributes* pd,
                            int ctype,
                            vtkIdType sze=0,
                            vtkIdType ext=1000,
                            int shallowCopyArrays=0);

  void InternalCopyAllocate(
    vtkDataSetAttributes::FieldList& list,
    int ctype,
    vtkIdType sze, vtkIdType ext);



  virtual void InitializeFields();

  int AttributeIndices[NUM_ATTRIBUTES];
  int CopyAttributeFlags[ALLCOPY][NUM_ATTRIBUTES];

  vtkFieldData::BasicIterator RequiredArrays;

  int* TargetIndices;

  static const int NumberOfAttributeComponents[NUM_ATTRIBUTES];
  static const int AttributeLimits[NUM_ATTRIBUTES];
  static const char AttributeNames[NUM_ATTRIBUTES][12];
  static const char LongAttributeNames[NUM_ATTRIBUTES][35];

private:
  int SetAttribute(vtkAbstractArray* da, int attributeType);
  static int CheckNumberOfComponents(vtkAbstractArray* da, int attributeType);

  vtkFieldData::BasicIterator ComputeRequiredArrays(vtkDataSetAttributes* pd, int ctype);

private:
  vtkDataSetAttributes(const vtkDataSetAttributes&);
  void operator=(const vtkDataSetAttributes&);

public:



  class vtkInternalComponentNames;
  class __attribute__ ((visibility("default"))) FieldList
  {
  public:
    FieldList(int numInputs);
    ~FieldList();
    void PrintSelf(ostream &os, vtkIndent indent);

    void InitializeFieldList(vtkDataSetAttributes* dsa);
    void IntersectFieldList(vtkDataSetAttributes* dsa);







    void UnionFieldList(vtkDataSetAttributes* dsa);


    int IsAttributePresent(int attrType);


    int GetNumberOfFields() { return this->NumberOfFields; }
    int GetFieldIndex(int i) { return this->FieldIndices[i]; }
    const char* GetFieldName(int i) { return this->Fields[i]; }
    int GetFieldComponents(int i) { return this->FieldComponents[i]; }
    int GetDSAIndex(int index, int i) { return this->DSAIndices[index][i]; }

    friend class vtkDataSetAttributes;

  protected:
    FieldList(const FieldList&) {}
    void operator=(const FieldList&) {}

    void SetFieldIndex(int i, int index)
      { this->FieldIndices[i] = index; }
  private:
    void SetField(int index, vtkAbstractArray *da);
    void RemoveField(const char *name);
    void ClearFields();
    void GrowBy(unsigned int delta);

    int NumberOfFields;


    char** Fields;
    int *FieldTypes;
    int *FieldComponents;
    int *FieldIndices;
    vtkLookupTable **LUT;
    vtkInformation **FieldInformation;

    vtkInternalComponentNames **FieldComponentsNames;

    vtkIdType NumberOfTuples;






    int **DSAIndices;
    int NumberOfDSAIndices;
    int CurrentInput;

  };

};
# 27 "/usr/local/include/vtk-5.10/vtkCellData.h" 2

class __attribute__ ((visibility("default"))) vtkCellData : public vtkDataSetAttributes
{
public:
  static vtkCellData *New();

  typedef vtkDataSetAttributes Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkCellData"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkCellData",type) ) { return 1; } return vtkDataSetAttributes::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkCellData::IsTypeOf(type); } static vtkCellData* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkCellData") ) { return static_cast<vtkCellData *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkCellData::New(); } public: vtkCellData *NewInstance() const { return vtkCellData::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);

protected:
  vtkCellData() {};
  ~vtkCellData() {};

private:
  vtkCellData(const vtkCellData&);
  void operator=(const vtkCellData&);
};
# 6 "MESH2vtkPolyData.h" 2
# 1 "/usr/local/include/vtk-5.10/vtkPointData.h" 1
# 27 "/usr/local/include/vtk-5.10/vtkPointData.h"
class __attribute__ ((visibility("default"))) vtkPointData : public vtkDataSetAttributes
{
public:
  static vtkPointData *New();

  typedef vtkDataSetAttributes Superclass; private: virtual const char* GetClassNameInternal() const { return "vtkPointData"; } public: static int IsTypeOf(const char *type) { if ( !strcmp("vtkPointData",type) ) { return 1; } return vtkDataSetAttributes::IsTypeOf(type); } virtual int IsA(const char *type) { return this->vtkPointData::IsTypeOf(type); } static vtkPointData* SafeDownCast(vtkObjectBase *o) { if ( o && o->IsA("vtkPointData") ) { return static_cast<vtkPointData *>(o); } return __null; } protected: virtual vtkObjectBase *NewInstanceInternal() const { return vtkPointData::New(); } public: vtkPointData *NewInstance() const { return vtkPointData::SafeDownCast(this->NewInstanceInternal()); };
  void PrintSelf(ostream& os, vtkIndent indent);
  void NullPoint(vtkIdType ptId);

protected:
  vtkPointData() {};
  ~vtkPointData() {};

private:
  vtkPointData(const vtkPointData&);
  void operator=(const vtkPointData&);
};
# 7 "MESH2vtkPolyData.h" 2

vtkPolyData* MESH2vtkPolyData( const mxArray *m ){
  long n_xyz, n_tri;
  double *xyz, *tri;
  long n , t;
  int n_fields, f, n_cols, c, n_rows;
  double *DATA;
  const char *field_name;

  vtkPolyData *POLY = vtkPolyData::New();
  vtkPoints *VERTS = vtkPoints::New();
  vtkCellArray *FACES = vtkCellArray::New();


  VERTS->SetDataTypeToDouble ();
# 33 "MESH2vtkPolyData.h"
  if( mxGetField_700( m,0,"xyz" ) != __null ){
    n_xyz = mxGetM( mxGetField_700( m, 0, "xyz") );
    xyz = mxGetPr( mxGetField_700( m, 0, "xyz") );
  } else {
    n_xyz = 0;
  }


  VERTS->SetNumberOfPoints(n_xyz);




  for ( n=0 ; n<n_xyz ; n++ ) {
    VERTS->InsertPoint( n, xyz[n] , xyz[n+n_xyz] , xyz[n+2*n_xyz] );





  }




  POLY->SetPoints( VERTS );


  if( mxGetField_700( m,0,"tri" ) != __null ){
    n_tri = mxGetM( mxGetField_700( m, 0, "tri") );
    tri = mxGetPr( mxGetField_700( m, 0, "tri") );
  } else {
    n_tri= 0;
  }

  for (t=0 ; t<n_tri; t++) {
    if( tri[t+2*n_tri] > 0 ) {
      FACES->InsertNextCell(3);
      FACES->InsertCellPoint( (int)tri[ t ] - 1 );
      FACES->InsertCellPoint( (int)tri[ t+n_tri ] - 1 );
      FACES->InsertCellPoint( (int)tri[ t+2*n_tri ] - 1 );
    } else {
      if( tri[t+n_tri] > 0 ) {
        FACES->InsertNextCell(2);
        FACES->InsertCellPoint( (int)tri[ t ] - 1 );
        FACES->InsertCellPoint( (int)tri[ t+n_tri ] - 1 );
      } else {
        if( tri[t+n_tri] > 0 ) {
          FACES->InsertNextCell(1);
          FACES->InsertCellPoint( (int)tri[ t ] - 1 );
        }
      }
    }
  }

  POLY->SetPolys( FACES );

  VERTS->Delete();
  FACES->Delete();



  n_fields= mxGetNumberOfFields( m );
  for( f=0 ; f < n_fields ; f++ ){
    field_name= mxGetFieldNameByNumber( m , f );
    DATA = mxGetPr( mxGetField_700( m, 0, field_name ) );
    n_rows= mxGetM( mxGetField_700( m, 0, field_name ) );
    n_cols= mxGetN( mxGetField_700( m, 0, field_name ) );

    if( !strncmp( field_name,"tri",3 ) && strcmp( field_name, "tri") ){
      vtkDoubleArray *ARRAY = vtkDoubleArray::New();
        ARRAY->SetName( field_name+3 );
        ARRAY->SetNumberOfComponents( n_cols );
        ARRAY->SetNumberOfTuples( n_rows );

        for( t=0 ; t<n_rows ; t++ ) {
          for( c=0 ; c<n_cols ; c++ ) {
            ARRAY->SetComponent(t,c, DATA[t+c*n_rows] );
          }
        }
        POLY->GetCellData()->AddArray( ARRAY );
      ARRAY->Delete();
      if( !strcmp(field_name,"triNORMALS")) {
        POLY->GetCellData()->SetActiveNormals("Normals");
      }
    }
    if( !strncmp( field_name,"xyz",3 ) && strcmp( field_name, "xyz") ){
      vtkDoubleArray *ARRAY = vtkDoubleArray::New();
        ARRAY->SetName( field_name+3 );
        ARRAY->SetNumberOfComponents( n_cols );
        ARRAY->SetNumberOfTuples( n_rows );

        for( t=0 ; t<n_rows ; t++ ) {
          for( c=0 ; c<n_cols ; c++ ) {
            ARRAY->SetComponent(t,c, DATA[t+c*n_rows] );
          }
        }
        POLY->GetPointData()->AddArray( ARRAY );
      ARRAY->Delete();
      if( !strcmp(field_name,"xyzNORMALS")) {
        POLY->GetPointData()->SetActiveNormals("Normals");
      }
    }
    if( !strcmp( field_name,"uv" ) ){
      vtkDoubleArray *ARRAY = vtkDoubleArray::New();
        ARRAY->SetName( field_name );
        ARRAY->SetNumberOfComponents( n_cols );
        ARRAY->SetNumberOfTuples( n_rows );

        for( t=0 ; t<n_rows ; t++ ) {
          for( c=0 ; c<n_cols ; c++ ) {
            ARRAY->SetComponent(t,c, DATA[t+c*n_rows] );
          }
        }
        POLY->GetPointData()->SetTCoords( ARRAY );
      ARRAY->Delete();
      POLY->GetPointData()->SetActiveTCoords("UV");
    }
  }
  return POLY;
}
# 167 "MESH2vtkPolyData.h"
void CallMethod( vtkPolyData * , char * );
void CallMethod( vtkPolyData * , char * , char * );
void CallMethod( vtkPolyData * , char * , double );
void CallMethod( vtkPolyData * , char * , double * );
# 35 "IntersectMeshes_OK2.cpp" 2
# 1 "vtkPolyData2MESH.h" 1




# 1 "/usr/local/include/vtk-5.10/vtkCell.h" 1
# 6 "vtkPolyData2MESH.h" 2


mxArray *vtkPolyData2MESH( vtkPolyData *POLY ){
  const char *names[] = {""};
  const int dims[1] = {1};
  mxArray *DATA;
  mxArray *m;
  long N, n;
  double xyz[3];
  int n_cols, c;
  int n_fields, f;
  char name[256];

  m = mxCreateStructArray_700(1, (const mwSize*)(dims), 0, names);


  N= POLY->GetNumberOfPoints();
  if( N> 0) {
    DATA = mxCreateDoubleMatrix_700( N , 3 , mxREAL );
    for( n= 0; n<N ; n++ ) {
      POLY->GetPoint( n , xyz );
      for( c=0 ; c<3 ; c++ ){
        *( mxGetPr(DATA) + n + c*N )= xyz[c];
      }
    }
    mxAddField( m, "xyz" );
    mxSetField_700( m, 0, "xyz", DATA );

    n_fields= POLY->GetPointData()->GetNumberOfArrays();
    for( f = 0 ; f < n_fields ; f++ ){
      sprintf( name , "xyz%s", POLY->GetPointData()->GetArray(f)->GetName() );
      if( !strcmp( name , "xyz(null)" ) ) {
        sprintf( name , "xyz%s", "NULL" );
      }
      n_cols= POLY->GetPointData()->GetArray(f)->GetNumberOfComponents();
      DATA = mxCreateDoubleMatrix_700( N , n_cols , mxREAL );
      for( n= 0; n<N ; n++ ) {
        for( c=0 ; c< n_cols ; c++ ){
          *( mxGetPr(DATA) + n + c*N )= POLY->GetPointData()->GetArray(f)->GetComponent(n,c);
        }
      }
      mxAddField( m, name );
      mxSetField_700( m, 0, name, DATA );
    }
  }


  N= POLY->GetNumberOfCells();
  if( N > 0 ) {
    DATA = mxCreateDoubleMatrix_700( N , 3 , mxREAL );
    for( n= 0; n<N ; n++ ) {
      for( c=0 ; c< POLY->GetCell(n)->GetNumberOfPoints() && c<3 ; c++ ){
        *( mxGetPr(DATA) + n + c*N )= POLY->GetCell(n)->GetPointId(c)+1;
      }
      for( ; c<3 ; c++ ){
        *( mxGetPr(DATA) + n + c*N )= 0;
      }
    }
    mxAddField( m, "tri" );
    mxSetField_700( m, 0, "tri", DATA );

    n_fields= POLY->GetCellData()->GetNumberOfArrays();
    for( f = 0 ; f < n_fields ; f++ ){
      sprintf( name , "tri%s", POLY->GetCellData()->GetArray(f)->GetName() );
      n_cols= POLY->GetCellData()->GetArray(f)->GetNumberOfComponents();
      DATA = mxCreateDoubleMatrix_700( N , n_cols , mxREAL );
      for( n= 0; n<N ; n++ ) {
        for( c=0 ; c< n_cols ; c++ ){
          *( mxGetPr(DATA) + n + c*N )= POLY->GetCellData()->GetArray(f)->GetComponent(n,c);
        }
      }
      mxAddField( m, name );
      mxSetField_700( m, 0, name, DATA );
    }
  }

  return(m);
}
# 36 "IntersectMeshes_OK2.cpp" 2


# 1 "/extra/disco1/miaTools/Tools/mztimer/mztimer.h" 1
# 39 "IntersectMeshes_OK2.cpp" 2
# 1 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c" 1
# 40 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c"
# 1 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.h" 1
# 58 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.h"
typedef enum
{
  GPC_DIFF,
  GPC_INT,
  GPC_XOR,
  GPC_UNION
} gpc_op;

typedef struct
{
  double x;
  double y;
} gpc_vertex;

typedef struct
{
  int num_vertices;
  gpc_vertex *vertex;
} gpc_vertex_list;

typedef struct
{
  int num_contours;
  int *hole;
  gpc_vertex_list *contour;
} gpc_polygon;

typedef struct
{
  int num_strips;
  gpc_vertex_list *strip;
} gpc_tristrip;
# 98 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.h"
void gpc_read_polygon (FILE *infile_ptr,
                              int read_hole_flags,
                              gpc_polygon *polygon);

void gpc_write_polygon (FILE *outfile_ptr,
                              int write_hole_flags,
                              gpc_polygon *polygon);

void gpc_add_contour (gpc_polygon *polygon,
                              gpc_vertex_list *contour,
                              int hole);

void gpc_polygon_clip (gpc_op set_operation,
                              gpc_polygon *subject_polygon,
                              gpc_polygon *clip_polygon,
                              gpc_polygon *result_polygon);

void gpc_tristrip_clip (gpc_op set_operation,
                              gpc_polygon *subject_polygon,
                              gpc_polygon *clip_polygon,
                              gpc_tristrip *result_tristrip);

void gpc_polygon_to_tristrip (gpc_polygon *polygon,
                              gpc_tristrip *tristrip);

void gpc_free_polygon (gpc_polygon *polygon);

void gpc_free_tristrip (gpc_tristrip *tristrip);
# 41 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c" 2
# 118 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c"
typedef enum
{
  NUL,
  EMX,
  ELI,
  TED,
  ERI,
  RED,
  IMM,
  IMN,
  EMN,
  EMM,
  LED,
  ILI,
  BED,
  IRI,
  IMX,
  FUL
} vertex_type;

typedef enum
{
  NH,
  BH,
  TH
} h_state;

typedef enum
{
  UNBUNDLED,
  BUNDLE_HEAD,
  BUNDLE_TAIL
} bundle_state;

typedef struct v_shape
{
  double x;
  double y;
  struct v_shape *next;
} vertex_node;

typedef struct p_shape
{
  int active;
  int hole;
  vertex_node *v[2];
  struct p_shape *next;
  struct p_shape *proxy;
} polygon_node;

typedef struct edge_shape
{
  gpc_vertex vertex;
  gpc_vertex bot;
  gpc_vertex top;
  double xb;
  double xt;
  double dx;
  int type;
  int bundle[2][2];
  int bside[2];
  bundle_state bstate[2];
  polygon_node *outp[2];
  struct edge_shape *prev;
  struct edge_shape *next;
  struct edge_shape *pred;
  struct edge_shape *succ;
  struct edge_shape *next_bound;
} edge_node;

typedef struct lmt_shape
{
  double y;
  edge_node *first_bound;
  struct lmt_shape *next;
} lmt_node;

typedef struct sbt_t_shape
{
  double y;
  struct sbt_t_shape *less;
  struct sbt_t_shape *more;
} sb_tree;

typedef struct it_shape
{
  edge_node *ie[2];
  gpc_vertex point;
  struct it_shape *next;
} it_node;

typedef struct st_shape
{
  edge_node *edge;
  double xb;
  double xt;
  double dx;
  struct st_shape *prev;
} st_node;

typedef struct bbox_shape
{
  double xmin;
  double ymin;
  double xmax;
  double ymax;
} bbox;
# 234 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c"
const h_state next_h_state[3][6]=
{


           {BH, TH, TH, BH, NH, NH},
           {NH, NH, NH, NH, TH, TH},
           {NH, NH, NH, NH, BH, BH}
};
# 250 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c"
static void reset_it(it_node **it)
{
  it_node *itn;

  while (*it)
  {
    itn= (*it)->next;
    {if (*it) {free(*it); (*it)= __null;}};
    *it= itn;
  }
}


static void reset_lmt(lmt_node **lmt)
{
  lmt_node *lmtn;

  while (*lmt)
  {
    lmtn= (*lmt)->next;
    {if (*lmt) {free(*lmt); (*lmt)= __null;}};
    *lmt= lmtn;
  }
}


static void insert_bound(edge_node **b, edge_node *e)
{
  edge_node *existing_bound;

  if (!*b)
  {

    *b= e;
  }
  else
  {

    if (e[0].bot.x < (*b)[0].bot.x)
    {

      existing_bound= *b;
      *b= e;
      (*b)->next_bound= existing_bound;
    }
    else
    {
      if (e[0].bot.x == (*b)[0].bot.x)
      {

        if (e[0].dx < (*b)[0].dx)
        {

          existing_bound= *b;
          *b= e;
          (*b)->next_bound= existing_bound;
        }
        else
        {

          insert_bound(&((*b)->next_bound), e);
        }
      }
      else
      {

        insert_bound(&((*b)->next_bound), e);
      }
    }
  }
}


static edge_node **bound_list(lmt_node **lmt, double y)
{
  lmt_node *existing_node;

  if (!*lmt)
  {

    {if ((sizeof(lmt_node)) > 0) { *lmt= (lmt_node*)malloc(sizeof(lmt_node)); if (!(*lmt)) { fprintf(stderr, "gpc malloc failure: %s\n", "LMT insertion"); exit(0);}} else *lmt= __null;};
    (*lmt)->y= y;
    (*lmt)->first_bound= __null;
    (*lmt)->next= __null;
    return &((*lmt)->first_bound);
  }
  else
    if (y < (*lmt)->y)
    {

      existing_node= *lmt;
      {if ((sizeof(lmt_node)) > 0) { *lmt= (lmt_node*)malloc(sizeof(lmt_node)); if (!(*lmt)) { fprintf(stderr, "gpc malloc failure: %s\n", "LMT insertion"); exit(0);}} else *lmt= __null;};
      (*lmt)->y= y;
      (*lmt)->first_bound= __null;
      (*lmt)->next= existing_node;
      return &((*lmt)->first_bound);
    }
    else
      if (y > (*lmt)->y)

        return bound_list(&((*lmt)->next), y);
      else

        return &((*lmt)->first_bound);
}


static void add_to_sbtree(int *entries, sb_tree **sbtree, double y)
{
  if (!*sbtree)
  {

    {if ((sizeof(sb_tree)) > 0) { *sbtree= (sb_tree*)malloc(sizeof(sb_tree)); if (!(*sbtree)) { fprintf(stderr, "gpc malloc failure: %s\n", "scanbeam tree insertion"); exit(0);}} else *sbtree= __null;};
    (*sbtree)->y= y;
    (*sbtree)->less= __null;
    (*sbtree)->more= __null;
    (*entries)++;
  }
  else
  {
    if ((*sbtree)->y > y)
    {

      add_to_sbtree(entries, &((*sbtree)->less), y);
    }
    else
    {
      if ((*sbtree)->y < y)
      {

        add_to_sbtree(entries, &((*sbtree)->more), y);
      }
    }
  }
}


static void build_sbt(int *entries, double *sbt, sb_tree *sbtree)
{
  if (sbtree->less)
    build_sbt(entries, sbt, sbtree->less);
  sbt[*entries]= sbtree->y;
  (*entries)++;
  if (sbtree->more)
    build_sbt(entries, sbt, sbtree->more);
}


static void free_sbtree(sb_tree **sbtree)
{
  if (*sbtree)
  {
    free_sbtree(&((*sbtree)->less));
    free_sbtree(&((*sbtree)->more));
    {if (*sbtree) {free(*sbtree); (*sbtree)= __null;}};
  }
}


static int count_optimal_vertices(gpc_vertex_list c)
{
  int result= 0, i;


  if (c.num_vertices > 0)
  {
    for (i= 0; i < c.num_vertices; i++)

      if (((c.vertex[((i - 1 + c.num_vertices) % c.num_vertices)].y != c.vertex[i].y) || (c.vertex[((i + 1 ) % c.num_vertices)].y != c.vertex[i].y)))
        result++;
  }
  return result;
}


static edge_node *build_lmt(lmt_node **lmt, sb_tree **sbtree,
                            int *sbt_entries, gpc_polygon *p, int type,
                            gpc_op op)
{
  int c, i, min, max, num_edges, v, num_vertices;
  int total_vertices= 0, e_index=0;
  edge_node *e, *edge_table;

  for (c= 0; c < p->num_contours; c++)
    total_vertices+= count_optimal_vertices(p->contour[c]);


  {if ((total_vertices * sizeof(edge_node)) > 0) { edge_table= (edge_node*)malloc(total_vertices * sizeof(edge_node)); if (!(edge_table)) { fprintf(stderr, "gpc malloc failure: %s\n", "edge table creation"); exit(0);}} else edge_table= __null;}
                                          ;

  for (c= 0; c < p->num_contours; c++)
  {
    if (p->contour[c].num_vertices < 0)
    {

      p->contour[c].num_vertices= -p->contour[c].num_vertices;
    }
    else
    {

      num_vertices= 0;
      for (i= 0; i < p->contour[c].num_vertices; i++)
        if (((p->contour[c].vertex[((i - 1 + p->contour[c].num_vertices) % p->contour[c].num_vertices)].y != p->contour[c].vertex[i].y) || (p->contour[c].vertex[((i + 1 ) % p->contour[c].num_vertices)].y != p->contour[c].vertex[i].y)))
        {
          edge_table[num_vertices].vertex.x= p->contour[c].vertex[i].x;
          edge_table[num_vertices].vertex.y= p->contour[c].vertex[i].y;


          add_to_sbtree(sbt_entries, sbtree,
                        edge_table[num_vertices].vertex.y);

          num_vertices++;
        }


      for (min= 0; min < num_vertices; min++)
      {

        if (((edge_table[((min - 1 + num_vertices) % num_vertices)].vertex.y >= edge_table[min].vertex.y) && (edge_table[((min + 1 ) % num_vertices)].vertex.y > edge_table[min].vertex.y)))
        {

          num_edges= 1;
          max= ((min + 1 ) % num_vertices);
          while ((edge_table[((max + 1 ) % num_vertices)].vertex.y > edge_table[max].vertex.y))
          {
            num_edges++;
            max= ((max + 1 ) % num_vertices);
          }


          e= &edge_table[e_index];
          e_index+= num_edges;
          v= min;
          e[0].bstate[1]= UNBUNDLED;
          e[0].bundle[1][0]= 0;
          e[0].bundle[1][1]= 0;
          for (i= 0; i < num_edges; i++)
          {
            e[i].xb= edge_table[v].vertex.x;
            e[i].bot.x= edge_table[v].vertex.x;
            e[i].bot.y= edge_table[v].vertex.y;

            v= ((v + 1 ) % num_vertices);

            e[i].top.x= edge_table[v].vertex.x;
            e[i].top.y= edge_table[v].vertex.y;
            e[i].dx= (edge_table[v].vertex.x - e[i].bot.x) /
                       (e[i].top.y - e[i].bot.y);
            e[i].type= type;
            e[i].outp[0]= __null;
            e[i].outp[1]= __null;
            e[i].next= __null;
            e[i].prev= __null;
            e[i].succ= ((num_edges > 1) && (i < (num_edges - 1))) ?
                       &(e[i + 1]) : __null;
            e[i].pred= ((num_edges > 1) && (i > 0)) ? &(e[i - 1]) : __null;
            e[i].next_bound= __null;
            e[i].bside[0]= (op == GPC_DIFF) ? 1 : 0;
            e[i].bside[1]= 0;
          }
          insert_bound(bound_list(lmt, edge_table[min].vertex.y), e);
        }
      }


      for (min= 0; min < num_vertices; min++)
      {

        if (((edge_table[((min - 1 + num_vertices) % num_vertices)].vertex.y > edge_table[min].vertex.y) && (edge_table[((min + 1 ) % num_vertices)].vertex.y >= edge_table[min].vertex.y)))
        {

          num_edges= 1;
          max= ((min - 1 + num_vertices) % num_vertices);
          while ((edge_table[((max - 1 + num_vertices) % num_vertices)].vertex.y > edge_table[max].vertex.y))
          {
            num_edges++;
            max= ((max - 1 + num_vertices) % num_vertices);
          }


          e= &edge_table[e_index];
          e_index+= num_edges;
          v= min;
          e[0].bstate[1]= UNBUNDLED;
          e[0].bundle[1][0]= 0;
          e[0].bundle[1][1]= 0;
          for (i= 0; i < num_edges; i++)
          {
            e[i].xb= edge_table[v].vertex.x;
            e[i].bot.x= edge_table[v].vertex.x;
            e[i].bot.y= edge_table[v].vertex.y;

            v= ((v - 1 + num_vertices) % num_vertices);

            e[i].top.x= edge_table[v].vertex.x;
            e[i].top.y= edge_table[v].vertex.y;
            e[i].dx= (edge_table[v].vertex.x - e[i].bot.x) /
                       (e[i].top.y - e[i].bot.y);
            e[i].type= type;
            e[i].outp[0]= __null;
            e[i].outp[1]= __null;
            e[i].next= __null;
            e[i].prev= __null;
            e[i].succ= ((num_edges > 1) && (i < (num_edges - 1))) ?
                       &(e[i + 1]) : __null;
            e[i].pred= ((num_edges > 1) && (i > 0)) ? &(e[i - 1]) : __null;
            e[i].next_bound= __null;
            e[i].bside[0]= (op == GPC_DIFF) ? 1 : 0;
            e[i].bside[1]= 0;
          }
          insert_bound(bound_list(lmt, edge_table[min].vertex.y), e);
        }
      }
    }
  }
  return edge_table;
}


static void add_edge_to_aet(edge_node **aet, edge_node *edge, edge_node *prev)
{
  if (!*aet)
  {

    *aet= edge;
    edge->prev= prev;
    edge->next= __null;
  }
  else
  {

    if (edge->xb < (*aet)->xb)
    {

      edge->prev= prev;
      edge->next= *aet;
      (*aet)->prev= edge;
      *aet= edge;
    }
    else
    {
      if (edge->xb == (*aet)->xb)
      {

        if (edge->dx < (*aet)->dx)
        {

          edge->prev= prev;
          edge->next= *aet;
          (*aet)->prev= edge;
          *aet= edge;
        }
        else
        {

          add_edge_to_aet(&((*aet)->next), edge, *aet);
        }
      }
      else
      {

        add_edge_to_aet(&((*aet)->next), edge, *aet);
      }
    }
  }
}


static void add_intersection(it_node **it, edge_node *edge0, edge_node *edge1,
                             double x, double y)
{
  it_node *existing_node;

  if (!*it)
  {

    {if ((sizeof(it_node)) > 0) { *it= (it_node*)malloc(sizeof(it_node)); if (!(*it)) { fprintf(stderr, "gpc malloc failure: %s\n", "IT insertion"); exit(0);}} else *it= __null;};
    (*it)->ie[0]= edge0;
    (*it)->ie[1]= edge1;
    (*it)->point.x= x;
    (*it)->point.y= y;
    (*it)->next= __null;
  }
  else
  {
    if ((*it)->point.y > y)
    {

      existing_node= *it;
      {if ((sizeof(it_node)) > 0) { *it= (it_node*)malloc(sizeof(it_node)); if (!(*it)) { fprintf(stderr, "gpc malloc failure: %s\n", "IT insertion"); exit(0);}} else *it= __null;};
      (*it)->ie[0]= edge0;
      (*it)->ie[1]= edge1;
      (*it)->point.x= x;
      (*it)->point.y= y;
      (*it)->next= existing_node;
    }
    else

      add_intersection(&((*it)->next), edge0, edge1, x, y);
  }
}


static void add_st_edge(st_node **st, it_node **it, edge_node *edge,
                        double dy)
{
  st_node *existing_node;
  double den, r, x, y;

  if (!*st)
  {

    {if ((sizeof(st_node)) > 0) { *st= (st_node*)malloc(sizeof(st_node)); if (!(*st)) { fprintf(stderr, "gpc malloc failure: %s\n", "ST insertion"); exit(0);}} else *st= __null;};
    (*st)->edge= edge;
    (*st)->xb= edge->xb;
    (*st)->xt= edge->xt;
    (*st)->dx= edge->dx;
    (*st)->prev= __null;
  }
  else
  {
    den= ((*st)->xt - (*st)->xb) - (edge->xt - edge->xb);


    if ((edge->xt >= (*st)->xt) || (edge->dx == (*st)->dx) ||
        (fabs(den) <= double(2.22044604925031308085e-16L)))
    {

      existing_node= *st;
      {if ((sizeof(st_node)) > 0) { *st= (st_node*)malloc(sizeof(st_node)); if (!(*st)) { fprintf(stderr, "gpc malloc failure: %s\n", "ST insertion"); exit(0);}} else *st= __null;};
      (*st)->edge= edge;
      (*st)->xb= edge->xb;
      (*st)->xt= edge->xt;
      (*st)->dx= edge->dx;
      (*st)->prev= existing_node;
    }
    else
    {

      r= (edge->xb - (*st)->xb) / den;
      x= (*st)->xb + r * ((*st)->xt - (*st)->xb);
      y= r * dy;


      add_intersection(it, (*st)->edge, edge, x, y);


      add_st_edge(&((*st)->prev), it, edge, dy);
    }
  }
}


static void build_intersection_table(it_node **it, edge_node *aet, double dy)
{
  st_node *st, *stp;
  edge_node *edge;


  reset_it(it);
  st= __null;


  for (edge= aet; edge; edge= edge->next)
  {
    if ((edge->bstate[0] == BUNDLE_HEAD) ||
         edge->bundle[0][0] || edge->bundle[0][1])
      add_st_edge(&st, it, edge, dy);
  }


  while (st)
  {
    stp= st->prev;
    {if (st) {free(st); (st)= __null;}};
    st= stp;
  }
}

static int count_contours(polygon_node *polygon)
{
  int nc, nv;
  vertex_node *v, *nextv;

  for (nc= 0; polygon; polygon= polygon->next)
    if (polygon->active)
    {

      nv= 0;
      for (v= polygon->proxy->v[0]; v; v= v->next)
        nv++;


      if (nv > 2)
      {
        polygon->active= nv;
        nc++;
      }
      else
      {

        for (v= polygon->proxy->v[0]; v; v= nextv)
        {
          nextv= v->next;
          {if (v) {free(v); (v)= __null;}};
        }
        polygon->active= 0;
      }
    }
  return nc;
}


static void add_left(polygon_node *p, double x, double y)
{
  vertex_node *nv;


  {if ((sizeof(vertex_node)) > 0) { nv= (vertex_node*)malloc(sizeof(vertex_node)); if (!(nv)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex node creation"); exit(0);}} else nv= __null;};
  nv->x= x;
  nv->y= y;


  nv->next= p->proxy->v[0];


  p->proxy->v[0]= nv;
}


static void merge_left(polygon_node *p, polygon_node *q, polygon_node *list)
{
  polygon_node *target;


  q->proxy->hole= 1;

  if (p->proxy != q->proxy)
  {

    p->proxy->v[1]->next= q->proxy->v[0];
    q->proxy->v[0]= p->proxy->v[0];



    for (target= p->proxy; list; list= list->next)
    {
      if (list->proxy == target)
      {
        list->active= 0;
        list->proxy= q->proxy;
      }
    }
  }
}


static void add_right(polygon_node *p, double x, double y)
{
  vertex_node *nv;


  {if ((sizeof(vertex_node)) > 0) { nv= (vertex_node*)malloc(sizeof(vertex_node)); if (!(nv)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex node creation"); exit(0);}} else nv= __null;};
  nv->x= x;
  nv->y= y;
  nv->next= __null;


  p->proxy->v[1]->next= nv;


  p->proxy->v[1]= nv;
}


static void merge_right(polygon_node *p, polygon_node *q, polygon_node *list)
{
  polygon_node *target;


  q->proxy->hole= 0;

  if (p->proxy != q->proxy)
  {

    q->proxy->v[1]->next= p->proxy->v[0];
    q->proxy->v[1]= p->proxy->v[1];


    for (target= p->proxy; list; list= list->next)
    {
      if (list->proxy == target)
      {
        list->active= 0;
        list->proxy= q->proxy;
      }
    }
  }
}


static void add_local_min(polygon_node **p, edge_node *edge,
                          double x, double y)
{
  polygon_node *existing_min;
  vertex_node *nv;

  existing_min= *p;

  {if ((sizeof(polygon_node)) > 0) { *p= (polygon_node*)malloc(sizeof(polygon_node)); if (!(*p)) { fprintf(stderr, "gpc malloc failure: %s\n", "polygon node creation"); exit(0);}} else *p= __null;};


  {if ((sizeof(vertex_node)) > 0) { nv= (vertex_node*)malloc(sizeof(vertex_node)); if (!(nv)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex node creation"); exit(0);}} else nv= __null;};
  nv->x= x;
  nv->y= y;
  nv->next= __null;


  (*p)->proxy= (*p);
  (*p)->active= 1;
  (*p)->next= existing_min;


  (*p)->v[0]= nv;
  (*p)->v[1]= nv;


  edge->outp[0]= *p;
}


static int count_tristrips(polygon_node *tn)
{
  int total;

  for (total= 0; tn; tn= tn->next)
    if (tn->active > 2)
      total++;
  return total;
}


static void add_vertex(vertex_node **t, double x, double y)
{
  if (!(*t))
  {
    {if ((sizeof(vertex_node)) > 0) { *t= (vertex_node*)malloc(sizeof(vertex_node)); if (!(*t)) { fprintf(stderr, "gpc malloc failure: %s\n", "tristrip vertex creation"); exit(0);}} else *t= __null;};
    (*t)->x= x;
    (*t)->y= y;
    (*t)->next= __null;
  }
  else

    add_vertex(&((*t)->next), x, y);
}


static void new_tristrip(polygon_node **tn, edge_node *edge,
                         double x, double y)
{
  if (!(*tn))
  {
    {if ((sizeof(polygon_node)) > 0) { *tn= (polygon_node*)malloc(sizeof(polygon_node)); if (!(*tn)) { fprintf(stderr, "gpc malloc failure: %s\n", "tristrip node creation"); exit(0);}} else *tn= __null;};
    (*tn)->next= __null;
    (*tn)->v[0]= __null;
    (*tn)->v[1]= __null;
    (*tn)->active= 1;
    add_vertex(&((*tn)->v[0]), x, y);
    edge->outp[0]= *tn;
  }
  else

    new_tristrip(&((*tn)->next), edge, x, y);
}


static bbox *create_contour_bboxes(gpc_polygon *p)
{
  bbox *box;
  int c, v;

  {if ((p->num_contours * sizeof(bbox)) > 0) { box= (bbox*)malloc(p->num_contours * sizeof(bbox)); if (!(box)) { fprintf(stderr, "gpc malloc failure: %s\n", "Bounding box creation"); exit(0);}} else box= __null;};


  for (c= 0; c < p->num_contours; c++)
  {

    box[c].xmin= double(1.79769313486231570815e+308L);
    box[c].ymin= double(1.79769313486231570815e+308L);
    box[c].xmax= -double(1.79769313486231570815e+308L);
    box[c].ymax= -double(1.79769313486231570815e+308L);

    for (v= 0; v < p->contour[c].num_vertices; v++)
    {

      if (p->contour[c].vertex[v].x < box[c].xmin)
        box[c].xmin= p->contour[c].vertex[v].x;
      if (p->contour[c].vertex[v].y < box[c].ymin)
        box[c].ymin= p->contour[c].vertex[v].y;
      if (p->contour[c].vertex[v].x > box[c].xmax)
        box[c].xmax= p->contour[c].vertex[v].x;
      if (p->contour[c].vertex[v].y > box[c].ymax)
          box[c].ymax= p->contour[c].vertex[v].y;
    }
  }
  return box;
}


static void minimax_test(gpc_polygon *subj, gpc_polygon *clip, gpc_op op)
{
  bbox *s_bbox, *c_bbox;
  int s, c, *o_table, overlap;

  s_bbox= create_contour_bboxes(subj);
  c_bbox= create_contour_bboxes(clip);

  {if ((subj->num_contours * clip->num_contours * sizeof(int)) > 0) { o_table= (int*)malloc(subj->num_contours * clip->num_contours * sizeof(int)); if (!(o_table)) { fprintf(stderr, "gpc malloc failure: %s\n", "overlap table creation"); exit(0);}} else o_table= __null;}
                                       ;


  for (s= 0; s < subj->num_contours; s++)
    for (c= 0; c < clip->num_contours; c++)
      o_table[c * subj->num_contours + s]=
             (!((s_bbox[s].xmax < c_bbox[c].xmin) ||
                (s_bbox[s].xmin > c_bbox[c].xmax))) &&
             (!((s_bbox[s].ymax < c_bbox[c].ymin) ||
                (s_bbox[s].ymin > c_bbox[c].ymax)));


  for (c= 0; c < clip->num_contours; c++)
  {
    overlap= 0;
    for (s= 0; (!overlap) && (s < subj->num_contours); s++)
      overlap= o_table[c * subj->num_contours + s];

    if (!overlap)

      clip->contour[c].num_vertices = -clip->contour[c].num_vertices;
  }

  if (op == GPC_INT)
  {

    for (s= 0; s < subj->num_contours; s++)
    {
      overlap= 0;
      for (c= 0; (!overlap) && (c < clip->num_contours); c++)
        overlap= o_table[c * subj->num_contours + s];

      if (!overlap)

        subj->contour[s].num_vertices = -subj->contour[s].num_vertices;
    }
  }

  {if (s_bbox) {free(s_bbox); (s_bbox)= __null;}};
  {if (c_bbox) {free(c_bbox); (c_bbox)= __null;}};
  {if (o_table) {free(o_table); (o_table)= __null;}};
}
# 1018 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/gpc.c"
void gpc_free_polygon(gpc_polygon *p)
{
  int c;

  for (c= 0; c < p->num_contours; c++)
    {if (p->contour[c].vertex) {free(p->contour[c].vertex); (p->contour[c].vertex)= __null;}};
  {if (p->hole) {free(p->hole); (p->hole)= __null;}};
  {if (p->contour) {free(p->contour); (p->contour)= __null;}};
  p->num_contours= 0;
}


void gpc_read_polygon(FILE *fp, int read_hole_flags, gpc_polygon *p)
{
  int c, v;

  fscanf(fp, "%d", &(p->num_contours));
  {if ((p->num_contours * sizeof(int)) > 0) { p->hole= (int*)malloc(p->num_contours * sizeof(int)); if (!(p->hole)) { fprintf(stderr, "gpc malloc failure: %s\n", "hole flag array creation"); exit(0);}} else p->hole= __null;}
                                         ;
  {if ((p->num_contours * sizeof(gpc_vertex_list)) > 0) { p->contour= (gpc_vertex_list*)malloc(p->num_contours * sizeof(gpc_vertex_list)); if (!(p->contour)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour creation"); exit(0);}} else p->contour= __null;}
                                                                        ;
  for (c= 0; c < p->num_contours; c++)
  {
    fscanf(fp, "%d", &(p->contour[c].num_vertices));

    if (read_hole_flags)
      fscanf(fp, "%d", &(p->hole[c]));
    else
      p->hole[c]= 0;

    {if ((p->contour[c].num_vertices * sizeof(gpc_vertex)) > 0) { p->contour[c].vertex= (gpc_vertex*)malloc(p->contour[c].num_vertices * sizeof(gpc_vertex)); if (!(p->contour[c].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex creation"); exit(0);}} else p->contour[c].vertex= __null;}
                                                               ;
    for (v= 0; v < p->contour[c].num_vertices; v++)
      fscanf(fp, "%lf %lf", &(p->contour[c].vertex[v].x),
                            &(p->contour[c].vertex[v].y));
  }
}


void gpc_write_polygon(FILE *fp, int write_hole_flags, gpc_polygon *p)
{
  int c, v;

  fprintf(fp, "%d\n", p->num_contours);
  for (c= 0; c < p->num_contours; c++)
  {
    fprintf(fp, "%d\n", p->contour[c].num_vertices);

    if (write_hole_flags)
      fprintf(fp, "%d\n", p->hole[c]);

    for (v= 0; v < p->contour[c].num_vertices; v++)
      fprintf(fp, "% .*lf % .*lf\n",
              15, p->contour[c].vertex[v].x,
              15, p->contour[c].vertex[v].y);
  }
}


void gpc_add_contour(gpc_polygon *p, gpc_vertex_list *new_contour, int hole)
{
  int *extended_hole, c, v;
  gpc_vertex_list *extended_contour;


  {if (((p->num_contours + 1) * sizeof(int)) > 0) { extended_hole= (int*)malloc((p->num_contours + 1) * sizeof(int)); if (!(extended_hole)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour hole addition"); exit(0);}} else extended_hole= __null;}
                                                     ;


  {if (((p->num_contours + 1) * sizeof(gpc_vertex_list)) > 0) { extended_contour= (gpc_vertex_list*)malloc((p->num_contours + 1) * sizeof(gpc_vertex_list)); if (!(extended_contour)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour addition"); exit(0);}} else extended_contour= __null;}
                                                                        ;


  for (c= 0; c < p->num_contours; c++)
  {
    extended_hole[c]= p->hole[c];
    extended_contour[c]= p->contour[c];
  }


  c= p->num_contours;
  extended_hole[c]= hole;
  extended_contour[c].num_vertices= new_contour->num_vertices;
  {if ((new_contour->num_vertices * sizeof(gpc_vertex)) > 0) { extended_contour[c].vertex= (gpc_vertex*)malloc(new_contour->num_vertices * sizeof(gpc_vertex)); if (!(extended_contour[c].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour addition"); exit(0);}} else extended_contour[c].vertex= __null;}
                                                              ;
  for (v= 0; v < new_contour->num_vertices; v++)
    extended_contour[c].vertex[v]= new_contour->vertex[v];


  {if (p->contour) {free(p->contour); (p->contour)= __null;}};
  {if (p->hole) {free(p->hole); (p->hole)= __null;}};


  p->num_contours++;
  p->hole= extended_hole;
  p->contour= extended_contour;
}


void gpc_polygon_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,
                      gpc_polygon *result)
{
  sb_tree *sbtree= __null;
  it_node *it= __null, *intersect;
  edge_node *edge, *prev_edge, *next_edge, *succ_edge, *e0, *e1;
  edge_node *aet= __null, *c_heap= __null, *s_heap= __null;
  lmt_node *lmt= __null, *local_min;
  polygon_node *out_poly= __null, *p, *q, *poly, *npoly, *cf= __null;
  vertex_node *vtx, *nv;
  h_state horiz[2];
  int in[2], exists[2], parity[2]= {0, 0};
  int c, v, contributing, search, scanbeam= 0, sbt_entries= 0;
  int vclass, bl, br, tl, tr;
  double *sbt= __null, xb, px, yb, yt, dy, ix, iy;


  if (((subj->num_contours == 0) && (clip->num_contours == 0))
   || ((subj->num_contours == 0) && ((op == GPC_INT) || (op == GPC_DIFF)))
   || ((clip->num_contours == 0) && (op == GPC_INT)))
  {
    result->num_contours= 0;
    result->hole= __null;
    result->contour= __null;
    return;
  }


  if (((op == GPC_INT) || (op == GPC_DIFF))
   && (subj->num_contours > 0) && (clip->num_contours > 0))
    minimax_test(subj, clip, op);


  if (subj->num_contours > 0)
    s_heap= build_lmt(&lmt, &sbtree, &sbt_entries, subj, 1, op);
  if (clip->num_contours > 0)
    c_heap= build_lmt(&lmt, &sbtree, &sbt_entries, clip, 0, op);


  if (lmt == __null)
  {
    result->num_contours= 0;
    result->hole= __null;
    result->contour= __null;
    reset_lmt(&lmt);
    {if (s_heap) {free(s_heap); (s_heap)= __null;}};
    {if (c_heap) {free(c_heap); (c_heap)= __null;}};
    return;
  }


  {if ((sbt_entries * sizeof(double)) > 0) { sbt= (double*)malloc(sbt_entries * sizeof(double)); if (!(sbt)) { fprintf(stderr, "gpc malloc failure: %s\n", "sbt creation"); exit(0);}} else sbt= __null;};
  build_sbt(&scanbeam, sbt, sbtree);
  scanbeam= 0;
  free_sbtree(&sbtree);


  if (subj == result)
    gpc_free_polygon(subj);
  if (clip == result)
    gpc_free_polygon(clip);


  if (op == GPC_DIFF)
    parity[0]= 1;

  local_min= lmt;


  while (scanbeam < sbt_entries)
  {

    yb= sbt[scanbeam++];
    if (scanbeam < sbt_entries)
    {
      yt= sbt[scanbeam];
      dy= yt - yb;
    }




    if (local_min)
    {
      if (local_min->y == yb)
      {

        for (edge= local_min->first_bound; edge; edge= edge->next_bound)
          add_edge_to_aet(&aet, edge, __null);

        local_min= local_min->next;
      }
    }


    px= -double(1.79769313486231570815e+308L);


    e0= aet;
    e1= aet;


    aet->bundle[0][ aet->type]= (aet->top.y != yb);
    aet->bundle[0][!aet->type]= 0;
    aet->bstate[0]= UNBUNDLED;

    for (next_edge= aet->next; next_edge; next_edge= next_edge->next)
    {

      next_edge->bundle[0][ next_edge->type]= (next_edge->top.y != yb);
      next_edge->bundle[0][!next_edge->type]= 0;
      next_edge->bstate[0]= UNBUNDLED;


      if (next_edge->bundle[0][next_edge->type])
      {
        if ((fabs((e0->xb) - (next_edge->xb)) <= (double(2.22044604925031308085e-16L))) && (fabs((e0->dx) - (next_edge->dx)) <= (double(2.22044604925031308085e-16L)))
  && (e0->top.y != yb))
        {
          next_edge->bundle[0][ next_edge->type]^=
            e0->bundle[0][ next_edge->type];
          next_edge->bundle[0][!next_edge->type]=
            e0->bundle[0][!next_edge->type];
          next_edge->bstate[0]= BUNDLE_HEAD;
          e0->bundle[0][0]= 0;
          e0->bundle[0][1]= 0;
          e0->bstate[0]= BUNDLE_TAIL;
        }
        e0= next_edge;
      }
    }

    horiz[0]= NH;
    horiz[1]= NH;


    for (edge= aet; edge; edge= edge->next)
    {
      exists[0]= edge->bundle[0][0] +
                   (edge->bundle[1][0] << 1);
      exists[1]= edge->bundle[0][1] +
                   (edge->bundle[1][1] << 1);

      if (exists[0] || exists[1])
      {

        edge->bside[0]= parity[0];
        edge->bside[1]= parity[1];


        switch (op)
        {
        case GPC_DIFF:
        case GPC_INT:
          contributing= (exists[0] && (parity[1] || horiz[1]))
                     || (exists[1] && (parity[0] || horiz[0]))
                     || (exists[0] && exists[1]
                     && (parity[0] == parity[1]));
          br= (parity[0])
           && (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
           && (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
           && (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
           && (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        case GPC_XOR:
          contributing= exists[0] || exists[1];
          br= (parity[0])
            ^ (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
            ^ (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
            ^ (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
            ^ (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        case GPC_UNION:
          contributing= (exists[0] && (!parity[1] || horiz[1]))
                     || (exists[1] && (!parity[0] || horiz[0]))
                     || (exists[0] && exists[1]
                     && (parity[0] == parity[1]));
          br= (parity[0])
           || (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
           || (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
           || (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
           || (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        }


        parity[0]^= edge->bundle[0][0];
        parity[1]^= edge->bundle[0][1];


        if (exists[0])
          horiz[0]=
            next_h_state[horiz[0]]
                        [((exists[0] - 1) << 1) + parity[0]];
        if (exists[1])
          horiz[1]=
            next_h_state[horiz[1]]
                        [((exists[1] - 1) << 1) + parity[1]];

        vclass= tr + (tl << 1) + (br << 2) + (bl << 3);

        if (contributing)
        {
          xb= edge->xb;

          switch (vclass)
          {
          case EMN:
          case IMN:
            add_local_min(&out_poly, edge, xb, yb);
            px= xb;
            cf= edge->outp[0];
            break;
          case ERI:
            if (xb != px)
            {
              add_right(cf, xb, yb);
              px= xb;
            }
            edge->outp[0]= cf;
            cf= __null;
            break;
          case ELI:
            add_left(edge->outp[1], xb, yb);
            px= xb;
            cf= edge->outp[1];
            break;
          case EMX:
            if (xb != px)
            {
              add_left(cf, xb, yb);
              px= xb;
            }
            merge_right(cf, edge->outp[1], out_poly);
            cf= __null;
            break;
          case ILI:
            if (xb != px)
            {
              add_left(cf, xb, yb);
              px= xb;
            }
            edge->outp[0]= cf;
            cf= __null;
            break;
          case IRI:
            add_right(edge->outp[1], xb, yb);
            px= xb;
            cf= edge->outp[1];
            edge->outp[1]= __null;
            break;
          case IMX:
            if (xb != px)
            {
              add_right(cf, xb, yb);
              px= xb;
            }
            merge_left(cf, edge->outp[1], out_poly);
            cf= __null;
            edge->outp[1]= __null;
            break;
          case IMM:
            if (xb != px)
     {
              add_right(cf, xb, yb);
              px= xb;
     }
            merge_left(cf, edge->outp[1], out_poly);
            edge->outp[1]= __null;
            add_local_min(&out_poly, edge, xb, yb);
            cf= edge->outp[0];
            break;
          case EMM:
            if (xb != px)
     {
              add_left(cf, xb, yb);
              px= xb;
     }
            merge_right(cf, edge->outp[1], out_poly);
            edge->outp[1]= __null;
            add_local_min(&out_poly, edge, xb, yb);
            cf= edge->outp[0];
            break;
          case LED:
            if (edge->bot.y == yb)
              add_left(edge->outp[1], xb, yb);
            edge->outp[0]= edge->outp[1];
            px= xb;
            break;
          case RED:
            if (edge->bot.y == yb)
              add_right(edge->outp[1], xb, yb);
            edge->outp[0]= edge->outp[1];
            px= xb;
            break;
          default:
            break;
          }
        }
      }
    }


    for (edge= aet; edge; edge= edge->next)
    {
      if (edge->top.y == yb)
      {
        prev_edge= edge->prev;
        next_edge= edge->next;
        if (prev_edge)
          prev_edge->next= next_edge;
        else
          aet= next_edge;
        if (next_edge)
          next_edge->prev= prev_edge;


        if ((edge->bstate[1] == BUNDLE_HEAD) && prev_edge)
 {
          if (prev_edge->bstate[1] == BUNDLE_TAIL)
          {
            prev_edge->outp[1]= edge->outp[1];
            prev_edge->bstate[1]= UNBUNDLED;
            if (prev_edge->prev)
              if (prev_edge->prev->bstate[1] == BUNDLE_TAIL)
                prev_edge->bstate[1]= BUNDLE_HEAD;
   }
 }
      }
      else
      {
        if (edge->top.y == yt)
          edge->xt= edge->top.x;
        else
          edge->xt= edge->bot.x + edge->dx * (yt - edge->bot.y);
      }
    }

    if (scanbeam < sbt_entries)
    {


      build_intersection_table(&it, aet, dy);


      for (intersect= it; intersect; intersect= intersect->next)
      {
        e0= intersect->ie[0];
        e1= intersect->ie[1];


        if ((e0->bundle[0][0] || e0->bundle[0][1])
         && (e1->bundle[0][0] || e1->bundle[0][1]))
 {
          p= e0->outp[0];
          q= e1->outp[0];
          ix= intersect->point.x;
          iy= intersect->point.y + yb;

          in[0]= ( e0->bundle[0][0] && !e0->bside[0])
                 || ( e1->bundle[0][0] && e1->bside[0])
                 || (!e0->bundle[0][0] && !e1->bundle[0][0]
                     && e0->bside[0] && e1->bside[0]);
          in[1]= ( e0->bundle[0][1] && !e0->bside[1])
                 || ( e1->bundle[0][1] && e1->bside[1])
                 || (!e0->bundle[0][1] && !e1->bundle[0][1]
                     && e0->bside[1] && e1->bside[1]);


          switch (op)
          {
          case GPC_DIFF:
          case GPC_INT:
            tr= (in[0])
             && (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
             && (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
             && (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
             && (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          case GPC_XOR:
            tr= (in[0])
              ^ (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
              ^ (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
              ^ (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
              ^ (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          case GPC_UNION:
            tr= (in[0])
             || (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
             || (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
             || (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
             || (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          }

          vclass= tr + (tl << 1) + (br << 2) + (bl << 3);

          switch (vclass)
          {
          case EMN:
            add_local_min(&out_poly, e0, ix, iy);
            e1->outp[0]= e0->outp[0];
            break;
          case ERI:
            if (p)
            {
              add_right(p, ix, iy);
              e1->outp[0]= p;
              e0->outp[0]= __null;
            }
            break;
          case ELI:
            if (q)
            {
              add_left(q, ix, iy);
              e0->outp[0]= q;
              e1->outp[0]= __null;
            }
            break;
          case EMX:
            if (p && q)
            {
              add_left(p, ix, iy);
              merge_right(p, q, out_poly);
              e0->outp[0]= __null;
              e1->outp[0]= __null;
            }
            break;
          case IMN:
            add_local_min(&out_poly, e0, ix, iy);
            e1->outp[0]= e0->outp[0];
            break;
          case ILI:
            if (p)
            {
              add_left(p, ix, iy);
              e1->outp[0]= p;
              e0->outp[0]= __null;
            }
            break;
          case IRI:
            if (q)
            {
              add_right(q, ix, iy);
              e0->outp[0]= q;
              e1->outp[0]= __null;
            }
            break;
          case IMX:
            if (p && q)
            {
              add_right(p, ix, iy);
              merge_left(p, q, out_poly);
              e0->outp[0]= __null;
              e1->outp[0]= __null;
            }
            break;
          case IMM:
            if (p && q)
            {
              add_right(p, ix, iy);
              merge_left(p, q, out_poly);
              add_local_min(&out_poly, e0, ix, iy);
              e1->outp[0]= e0->outp[0];
            }
            break;
          case EMM:
            if (p && q)
            {
              add_left(p, ix, iy);
              merge_right(p, q, out_poly);
              add_local_min(&out_poly, e0, ix, iy);
              e1->outp[0]= e0->outp[0];
            }
            break;
          default:
            break;
          }
 }


        if (e0->bundle[0][0])
   e1->bside[0]= !e1->bside[0];
        if (e1->bundle[0][0])
   e0->bside[0]= !e0->bside[0];
        if (e0->bundle[0][1])
   e1->bside[1]= !e1->bside[1];
        if (e1->bundle[0][1])
   e0->bside[1]= !e0->bside[1];


        prev_edge= e0->prev;
        next_edge= e1->next;
        if (next_edge)
          next_edge->prev= e0;

        if (e0->bstate[0] == BUNDLE_HEAD)
        {
          search= 1;
          while (search)
          {
            prev_edge= prev_edge->prev;
            if (prev_edge)
            {
              if (prev_edge->bstate[0] != BUNDLE_TAIL)
                search= 0;
            }
            else
              search= 0;
          }
        }
        if (!prev_edge)
        {
          aet->prev= e1;
          e1->next= aet;
          aet= e0->next;
        }
        else
        {
          prev_edge->next->prev= e1;
          e1->next= prev_edge->next;
          prev_edge->next= e0->next;
        }
        e0->next->prev= prev_edge;
        e1->next->prev= e1;
        e0->next= next_edge;
      }


      for (edge= aet; edge; edge= next_edge)
      {
        next_edge= edge->next;
        succ_edge= edge->succ;

        if ((edge->top.y == yt) && succ_edge)
        {

          succ_edge->outp[1]= edge->outp[0];
          succ_edge->bstate[1]= edge->bstate[0];
          succ_edge->bundle[1][0]= edge->bundle[0][0];
          succ_edge->bundle[1][1]= edge->bundle[0][1];
          prev_edge= edge->prev;
          if (prev_edge)
            prev_edge->next= succ_edge;
          else
            aet= succ_edge;
          if (next_edge)
            next_edge->prev= succ_edge;
          succ_edge->prev= prev_edge;
          succ_edge->next= next_edge;
        }
        else
        {

          edge->outp[1]= edge->outp[0];
          edge->bstate[1]= edge->bstate[0];
          edge->bundle[1][0]= edge->bundle[0][0];
          edge->bundle[1][1]= edge->bundle[0][1];
          edge->xb= edge->xt;
       }
        edge->outp[0]= __null;
      }
    }
  }


  result->contour= __null;
  result->hole= __null;
  result->num_contours= count_contours(out_poly);
  if (result->num_contours > 0)
  {
    {if ((result->num_contours * sizeof(int)) > 0) { result->hole= (int*)malloc(result->num_contours * sizeof(int)); if (!(result->hole)) { fprintf(stderr, "gpc malloc failure: %s\n", "hole flag table creation"); exit(0);}} else result->hole= __null;}
                                                          ;
    {if ((result->num_contours * sizeof(gpc_vertex_list)) > 0) { result->contour= (gpc_vertex_list*)malloc(result->num_contours * sizeof(gpc_vertex_list)); if (!(result->contour)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour creation"); exit(0);}} else result->contour= __null;}
                                                                          ;

    c= 0;
    for (poly= out_poly; poly; poly= npoly)
    {
      npoly= poly->next;
      if (poly->active)
      {
        result->hole[c]= poly->proxy->hole;
        result->contour[c].num_vertices= poly->active;
        {if ((result->contour[c].num_vertices * sizeof(gpc_vertex)) > 0) { result->contour[c].vertex= (gpc_vertex*)malloc(result->contour[c].num_vertices * sizeof(gpc_vertex)); if (!(result->contour[c].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex creation"); exit(0);}} else result->contour[c].vertex= __null;}

                                        ;

        v= result->contour[c].num_vertices - 1;
        for (vtx= poly->proxy->v[0]; vtx; vtx= nv)
        {
          nv= vtx->next;
          result->contour[c].vertex[v].x= vtx->x;
          result->contour[c].vertex[v].y= vtx->y;
          {if (vtx) {free(vtx); (vtx)= __null;}};
          v--;
        }
        c++;
      }
      {if (poly) {free(poly); (poly)= __null;}};
    }
  }
  else
  {
    for (poly= out_poly; poly; poly= npoly)
    {
      npoly= poly->next;
      {if (poly) {free(poly); (poly)= __null;}};
    }
  }


  reset_it(&it);
  reset_lmt(&lmt);
  {if (c_heap) {free(c_heap); (c_heap)= __null;}};
  {if (s_heap) {free(s_heap); (s_heap)= __null;}};
  {if (sbt) {free(sbt); (sbt)= __null;}};
}


void gpc_free_tristrip(gpc_tristrip *t)
{
  int s;

  for (s= 0; s < t->num_strips; s++)
    {if (t->strip[s].vertex) {free(t->strip[s].vertex); (t->strip[s].vertex)= __null;}};
  {if (t->strip) {free(t->strip); (t->strip)= __null;}};
  t->num_strips= 0;
}


void gpc_polygon_to_tristrip(gpc_polygon *s, gpc_tristrip *t)
{
  gpc_polygon c;

  c.num_contours= 0;
  c.hole= __null;
  c.contour= __null;
  gpc_tristrip_clip(GPC_DIFF, s, &c, t);
}


void gpc_tristrip_clip(gpc_op op, gpc_polygon *subj, gpc_polygon *clip,
                       gpc_tristrip *result)
{
  sb_tree *sbtree= __null;
  it_node *it= __null, *intersect;
  edge_node *edge, *prev_edge, *next_edge, *succ_edge, *e0, *e1;
  edge_node *aet= __null, *c_heap= __null, *s_heap= __null, *cf;
  lmt_node *lmt= __null, *local_min;
  polygon_node *tlist= __null, *tn, *tnn, *p, *q;
  vertex_node *lt, *ltn, *rt, *rtn;
  h_state horiz[2];
  vertex_type cft;
  int in[2], exists[2], parity[2]= {0, 0};
  int s, v, contributing, search, scanbeam= 0, sbt_entries= 0;
  int vclass, bl, br, tl, tr;
  double *sbt= __null, xb, px, nx, yb, yt, dy, ix, iy;


  if (((subj->num_contours == 0) && (clip->num_contours == 0))
   || ((subj->num_contours == 0) && ((op == GPC_INT) || (op == GPC_DIFF)))
   || ((clip->num_contours == 0) && (op == GPC_INT)))
  {
    result->num_strips= 0;
    result->strip= __null;
    return;
  }


  if (((op == GPC_INT) || (op == GPC_DIFF))
   && (subj->num_contours > 0) && (clip->num_contours > 0))
    minimax_test(subj, clip, op);


  if (subj->num_contours > 0)
    s_heap= build_lmt(&lmt, &sbtree, &sbt_entries, subj, 1, op);
  if (clip->num_contours > 0)
    c_heap= build_lmt(&lmt, &sbtree, &sbt_entries, clip, 0, op);


  if (lmt == __null)
  {
    result->num_strips= 0;
    result->strip= __null;
    reset_lmt(&lmt);
    {if (s_heap) {free(s_heap); (s_heap)= __null;}};
    {if (c_heap) {free(c_heap); (c_heap)= __null;}};
    return;
  }


  {if ((sbt_entries * sizeof(double)) > 0) { sbt= (double*)malloc(sbt_entries * sizeof(double)); if (!(sbt)) { fprintf(stderr, "gpc malloc failure: %s\n", "sbt creation"); exit(0);}} else sbt= __null;};
  build_sbt(&scanbeam, sbt, sbtree);
  scanbeam= 0;
  free_sbtree(&sbtree);


  if (op == GPC_DIFF)
    parity[0]= 1;

  local_min= lmt;


  while (scanbeam < sbt_entries)
  {

    yb= sbt[scanbeam++];
    if (scanbeam < sbt_entries)
    {
      yt= sbt[scanbeam];
      dy= yt - yb;
    }




    if (local_min)
    {
      if (local_min->y == yb)
      {

        for (edge= local_min->first_bound; edge; edge= edge->next_bound)
          add_edge_to_aet(&aet, edge, __null);

        local_min= local_min->next;
      }
    }


    px= -double(1.79769313486231570815e+308L);


    e0= aet;
    e1= aet;


    aet->bundle[0][ aet->type]= (aet->top.y != yb);
    aet->bundle[0][!aet->type]= 0;
    aet->bstate[0]= UNBUNDLED;

    for (next_edge= aet->next; next_edge; next_edge= next_edge->next)
    {

      next_edge->bundle[0][ next_edge->type]= (next_edge->top.y != yb);
      next_edge->bundle[0][!next_edge->type]= 0;
      next_edge->bstate[0]= UNBUNDLED;


      if (next_edge->bundle[0][next_edge->type])
      {
        if ((fabs((e0->xb) - (next_edge->xb)) <= (double(2.22044604925031308085e-16L))) && (fabs((e0->dx) - (next_edge->dx)) <= (double(2.22044604925031308085e-16L)))
  && (e0->top.y != yb))
        {
          next_edge->bundle[0][ next_edge->type]^=
            e0->bundle[0][ next_edge->type];
          next_edge->bundle[0][!next_edge->type]=
            e0->bundle[0][!next_edge->type];
          next_edge->bstate[0]= BUNDLE_HEAD;
          e0->bundle[0][0]= 0;
          e0->bundle[0][1]= 0;
          e0->bstate[0]= BUNDLE_TAIL;
        }
        e0= next_edge;
      }
    }

    horiz[0]= NH;
    horiz[1]= NH;


    for (edge= aet; edge; edge= edge->next)
    {
      exists[0]= edge->bundle[0][0] +
                   (edge->bundle[1][0] << 1);
      exists[1]= edge->bundle[0][1] +
                   (edge->bundle[1][1] << 1);

      if (exists[0] || exists[1])
      {

        edge->bside[0]= parity[0];
        edge->bside[1]= parity[1];


        switch (op)
        {
        case GPC_DIFF:
        case GPC_INT:
          contributing= (exists[0] && (parity[1] || horiz[1]))
                     || (exists[1] && (parity[0] || horiz[0]))
                     || (exists[0] && exists[1]
                     && (parity[0] == parity[1]));
          br= (parity[0])
           && (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
           && (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
           && (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
           && (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        case GPC_XOR:
          contributing= exists[0] || exists[1];
          br= (parity[0])
            ^ (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
            ^ (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
            ^ (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
            ^ (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        case GPC_UNION:
          contributing= (exists[0] && (!parity[1] || horiz[1]))
                     || (exists[1] && (!parity[0] || horiz[0]))
                     || (exists[0] && exists[1]
                     && (parity[0] == parity[1]));
          br= (parity[0])
           || (parity[1]);
          bl= (parity[0] ^ edge->bundle[0][0])
           || (parity[1] ^ edge->bundle[0][1]);
          tr= (parity[0] ^ (horiz[0]!=NH))
           || (parity[1] ^ (horiz[1]!=NH));
          tl= (parity[0] ^ (horiz[0]!=NH) ^ edge->bundle[1][0])
           || (parity[1] ^ (horiz[1]!=NH) ^ edge->bundle[1][1]);
          break;
        }


        parity[0]^= edge->bundle[0][0];
        parity[1]^= edge->bundle[0][1];


        if (exists[0])
          horiz[0]=
            next_h_state[horiz[0]]
                        [((exists[0] - 1) << 1) + parity[0]];
        if (exists[1])
          horiz[1]=
            next_h_state[horiz[1]]
                        [((exists[1] - 1) << 1) + parity[1]];

        vclass= tr + (tl << 1) + (br << 2) + (bl << 3);

        if (contributing)
        {
          xb= edge->xb;

          switch (vclass)
          {
          case EMN:
            new_tristrip(&tlist, edge, xb, yb);
            cf= edge;
            break;
          case ERI:
            edge->outp[0]= cf->outp[0];
            if (xb != cf->xb)
              {add_vertex(&((edge)->outp[(0)]->v[(1)]), xb, yb); (edge)->outp[(0)]->active++;};
            cf= __null;
            break;
          case ELI:
            {add_vertex(&((edge)->outp[(1)]->v[(0)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= __null;
            cf= edge;
            break;
          case EMX:
            if (xb != cf->xb)
              {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= __null;
            cf= __null;
            break;
          case IMN:
            if (cft == LED)
     {
              if (cf->bot.y != yb)
                {add_vertex(&((cf)->outp[(1)]->v[(0)]), cf->xb, yb); (cf)->outp[(1)]->active++;};
              new_tristrip(&tlist, cf, cf->xb, yb);
     }
            edge->outp[0]= cf->outp[0];
            {add_vertex(&((edge)->outp[(0)]->v[(1)]), xb, yb); (edge)->outp[(0)]->active++;};
            break;
          case ILI:
            new_tristrip(&tlist, edge, xb, yb);
            cf= edge;
            cft= ILI;
            break;
          case IRI:
            if (cft == LED)
     {
              if (cf->bot.y != yb)
                {add_vertex(&((cf)->outp[(1)]->v[(0)]), cf->xb, yb); (cf)->outp[(1)]->active++;};
              new_tristrip(&tlist, cf, cf->xb, yb);
     }
            {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= __null;
            break;
          case IMX:
            {add_vertex(&((edge)->outp[(1)]->v[(0)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= __null;
            cft= IMX;
            break;
   case IMM:
            {add_vertex(&((edge)->outp[(1)]->v[(0)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= cf->outp[0];
            if (xb != cf->xb)
              {add_vertex(&((cf)->outp[(0)]->v[(1)]), xb, yb); (cf)->outp[(0)]->active++;};
            cf= edge;
            break;
          case EMM:
            {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= __null;
            new_tristrip(&tlist, edge, xb, yb);
            cf= edge;
            break;
          case LED:
            if (edge->bot.y == yb)
              {add_vertex(&((edge)->outp[(1)]->v[(0)]), xb, yb); (edge)->outp[(1)]->active++;};
            edge->outp[0]= edge->outp[1];
            cf= edge;
            cft= LED;
            break;
          case RED:
            edge->outp[0]= cf->outp[0];
            if (cft == LED)
     {
              if (cf->bot.y == yb)
       {
                {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
       }
              else
       {
                if (edge->bot.y == yb)
  {
                  {add_vertex(&((cf)->outp[(1)]->v[(0)]), cf->xb, yb); (cf)->outp[(1)]->active++;};
                  {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
  }
       }
     }
            else
     {
              {add_vertex(&((edge)->outp[(1)]->v[(1)]), xb, yb); (edge)->outp[(1)]->active++;};
              {add_vertex(&((edge)->outp[(0)]->v[(1)]), xb, yb); (edge)->outp[(0)]->active++;};
     }
            cf= __null;
            break;
          default:
            break;
          }
        }
      }
    }


    for (edge= aet; edge; edge= edge->next)
    {
      if (edge->top.y == yb)
      {
        prev_edge= edge->prev;
        next_edge= edge->next;
        if (prev_edge)
          prev_edge->next= next_edge;
        else
          aet= next_edge;
        if (next_edge)
          next_edge->prev= prev_edge;


        if ((edge->bstate[1] == BUNDLE_HEAD) && prev_edge)
 {
          if (prev_edge->bstate[1] == BUNDLE_TAIL)
          {
            prev_edge->outp[1]= edge->outp[1];
            prev_edge->bstate[1]= UNBUNDLED;
            if (prev_edge->prev)
              if (prev_edge->prev->bstate[1] == BUNDLE_TAIL)
                prev_edge->bstate[1]= BUNDLE_HEAD;
   }
 }
      }
      else
      {
        if (edge->top.y == yt)
          edge->xt= edge->top.x;
        else
          edge->xt= edge->bot.x + edge->dx * (yt - edge->bot.y);
      }
    }

    if (scanbeam < sbt_entries)
    {


      build_intersection_table(&it, aet, dy);


      for (intersect= it; intersect; intersect= intersect->next)
      {
        e0= intersect->ie[0];
        e1= intersect->ie[1];


        if ((e0->bundle[0][0] || e0->bundle[0][1])
         && (e1->bundle[0][0] || e1->bundle[0][1]))
 {
          p= e0->outp[0];
          q= e1->outp[0];
          ix= intersect->point.x;
          iy= intersect->point.y + yb;

          in[0]= ( e0->bundle[0][0] && !e0->bside[0])
                 || ( e1->bundle[0][0] && e1->bside[0])
                 || (!e0->bundle[0][0] && !e1->bundle[0][0]
                     && e0->bside[0] && e1->bside[0]);
          in[1]= ( e0->bundle[0][1] && !e0->bside[1])
                 || ( e1->bundle[0][1] && e1->bside[1])
                 || (!e0->bundle[0][1] && !e1->bundle[0][1]
                     && e0->bside[1] && e1->bside[1]);


          switch (op)
          {
          case GPC_DIFF:
          case GPC_INT:
            tr= (in[0])
             && (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
             && (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
             && (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
             && (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          case GPC_XOR:
            tr= (in[0])
              ^ (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
              ^ (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
              ^ (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
              ^ (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          case GPC_UNION:
            tr= (in[0])
             || (in[1]);
            tl= (in[0] ^ e1->bundle[0][0])
             || (in[1] ^ e1->bundle[0][1]);
            br= (in[0] ^ e0->bundle[0][0])
             || (in[1] ^ e0->bundle[0][1]);
            bl= (in[0] ^ e1->bundle[0][0] ^ e0->bundle[0][0])
             || (in[1] ^ e1->bundle[0][1] ^ e0->bundle[0][1]);
            break;
          }

          vclass= tr + (tl << 1) + (br << 2) + (bl << 3);

          switch (vclass)
          {
          case EMN:
            new_tristrip(&tlist, e1, ix, iy);
            e0->outp[0]= e1->outp[0];
            break;
          case ERI:
            if (p)
            {
              {(prev_edge)= (e0); do {(prev_edge)= (prev_edge)->prev;} while (!(prev_edge)->outp[(0)]); (px)= (prev_edge)->bot.x + (prev_edge)->dx * ((iy)-(prev_edge)->bot.y);};
              {add_vertex(&((prev_edge)->outp[(0)]->v[(0)]), px, iy); (prev_edge)->outp[(0)]->active++;};
              {add_vertex(&((e0)->outp[(0)]->v[(1)]), ix, iy); (e0)->outp[(0)]->active++;};
              e1->outp[0]= e0->outp[0];
              e0->outp[0]= __null;
            }
            break;
          case ELI:
            if (q)
            {
              {(next_edge)= (e1); do {(next_edge)= (next_edge)->next;} while (!(next_edge)->outp[(0)]); (nx)= (next_edge)->bot.x + (next_edge)->dx * ((iy)-(next_edge)->bot.y);};
              {add_vertex(&((e1)->outp[(0)]->v[(0)]), ix, iy); (e1)->outp[(0)]->active++;};
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
              e0->outp[0]= e1->outp[0];
              e1->outp[0]= __null;
            }
            break;
          case EMX:
            if (p && q)
            {
              {add_vertex(&((e0)->outp[(0)]->v[(0)]), ix, iy); (e0)->outp[(0)]->active++;};
              e0->outp[0]= __null;
              e1->outp[0]= __null;
            }
            break;
          case IMN:
            {(prev_edge)= (e0); do {(prev_edge)= (prev_edge)->prev;} while (!(prev_edge)->outp[(0)]); (px)= (prev_edge)->bot.x + (prev_edge)->dx * ((iy)-(prev_edge)->bot.y);};
            {add_vertex(&((prev_edge)->outp[(0)]->v[(0)]), px, iy); (prev_edge)->outp[(0)]->active++;};
            {(next_edge)= (e1); do {(next_edge)= (next_edge)->next;} while (!(next_edge)->outp[(0)]); (nx)= (next_edge)->bot.x + (next_edge)->dx * ((iy)-(next_edge)->bot.y);};
            {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
            new_tristrip(&tlist, prev_edge, px, iy);
            e1->outp[0]= prev_edge->outp[0];
            {add_vertex(&((e1)->outp[(0)]->v[(1)]), ix, iy); (e1)->outp[(0)]->active++;};
            new_tristrip(&tlist, e0, ix, iy);
            next_edge->outp[0]= e0->outp[0];
            {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
            break;
          case ILI:
            if (p)
            {
              {add_vertex(&((e0)->outp[(0)]->v[(0)]), ix, iy); (e0)->outp[(0)]->active++;};
              {(next_edge)= (e1); do {(next_edge)= (next_edge)->next;} while (!(next_edge)->outp[(0)]); (nx)= (next_edge)->bot.x + (next_edge)->dx * ((iy)-(next_edge)->bot.y);};
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
              e1->outp[0]= e0->outp[0];
              e0->outp[0]= __null;
            }
            break;
          case IRI:
            if (q)
            {
              {add_vertex(&((e1)->outp[(0)]->v[(1)]), ix, iy); (e1)->outp[(0)]->active++;};
              {(prev_edge)= (e0); do {(prev_edge)= (prev_edge)->prev;} while (!(prev_edge)->outp[(0)]); (px)= (prev_edge)->bot.x + (prev_edge)->dx * ((iy)-(prev_edge)->bot.y);};
              {add_vertex(&((prev_edge)->outp[(0)]->v[(0)]), px, iy); (prev_edge)->outp[(0)]->active++;};
              e0->outp[0]= e1->outp[0];
              e1->outp[0]= __null;
            }
            break;
          case IMX:
            if (p && q)
            {
              {add_vertex(&((e0)->outp[(0)]->v[(1)]), ix, iy); (e0)->outp[(0)]->active++;};
              {add_vertex(&((e1)->outp[(0)]->v[(0)]), ix, iy); (e1)->outp[(0)]->active++;};
              e0->outp[0]= __null;
              e1->outp[0]= __null;
              {(prev_edge)= (e0); do {(prev_edge)= (prev_edge)->prev;} while (!(prev_edge)->outp[(0)]); (px)= (prev_edge)->bot.x + (prev_edge)->dx * ((iy)-(prev_edge)->bot.y);};
              {add_vertex(&((prev_edge)->outp[(0)]->v[(0)]), px, iy); (prev_edge)->outp[(0)]->active++;};
              new_tristrip(&tlist, prev_edge, px, iy);
              {(next_edge)= (e1); do {(next_edge)= (next_edge)->next;} while (!(next_edge)->outp[(0)]); (nx)= (next_edge)->bot.x + (next_edge)->dx * ((iy)-(next_edge)->bot.y);};
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
              next_edge->outp[0]= prev_edge->outp[0];
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
            }
            break;
          case IMM:
            if (p && q)
            {
              {add_vertex(&((e0)->outp[(0)]->v[(1)]), ix, iy); (e0)->outp[(0)]->active++;};
              {add_vertex(&((e1)->outp[(0)]->v[(0)]), ix, iy); (e1)->outp[(0)]->active++;};
              {(prev_edge)= (e0); do {(prev_edge)= (prev_edge)->prev;} while (!(prev_edge)->outp[(0)]); (px)= (prev_edge)->bot.x + (prev_edge)->dx * ((iy)-(prev_edge)->bot.y);};
              {add_vertex(&((prev_edge)->outp[(0)]->v[(0)]), px, iy); (prev_edge)->outp[(0)]->active++;};
              new_tristrip(&tlist, prev_edge, px, iy);
              {(next_edge)= (e1); do {(next_edge)= (next_edge)->next;} while (!(next_edge)->outp[(0)]); (nx)= (next_edge)->bot.x + (next_edge)->dx * ((iy)-(next_edge)->bot.y);};
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
              e1->outp[0]= prev_edge->outp[0];
              {add_vertex(&((e1)->outp[(0)]->v[(1)]), ix, iy); (e1)->outp[(0)]->active++;};
              new_tristrip(&tlist, e0, ix, iy);
              next_edge->outp[0]= e0->outp[0];
              {add_vertex(&((next_edge)->outp[(0)]->v[(1)]), nx, iy); (next_edge)->outp[(0)]->active++;};
            }
            break;
          case EMM:
            if (p && q)
            {
              {add_vertex(&((e0)->outp[(0)]->v[(0)]), ix, iy); (e0)->outp[(0)]->active++;};
              new_tristrip(&tlist, e1, ix, iy);
              e0->outp[0]= e1->outp[0];
            }
            break;
          default:
            break;
          }
 }


        if (e0->bundle[0][0])
   e1->bside[0]= !e1->bside[0];
        if (e1->bundle[0][0])
   e0->bside[0]= !e0->bside[0];
        if (e0->bundle[0][1])
   e1->bside[1]= !e1->bside[1];
        if (e1->bundle[0][1])
   e0->bside[1]= !e0->bside[1];


        prev_edge= e0->prev;
        next_edge= e1->next;
        if (e1->next)
          e1->next->prev= e0;

        if (e0->bstate[0] == BUNDLE_HEAD)
        {
          search= 1;
          while (search)
          {
            prev_edge= prev_edge->prev;
            if (prev_edge)
            {
              if (prev_edge->bundle[0][0]
               || prev_edge->bundle[0][1]
               || (prev_edge->bstate[0] == BUNDLE_HEAD))
                search= 0;
            }
            else
              search= 0;
          }
        }
        if (!prev_edge)
        {
           e1->next= aet;
           aet= e0->next;
        }
        else
        {
          e1->next= prev_edge->next;
          prev_edge->next= e0->next;
        }
        e0->next->prev= prev_edge;
        e1->next->prev= e1;
        e0->next= next_edge;
      }


      for (edge= aet; edge; edge= next_edge)
      {
        next_edge= edge->next;
        succ_edge= edge->succ;

        if ((edge->top.y == yt) && succ_edge)
        {

          succ_edge->outp[1]= edge->outp[0];
          succ_edge->bstate[1]= edge->bstate[0];
          succ_edge->bundle[1][0]= edge->bundle[0][0];
          succ_edge->bundle[1][1]= edge->bundle[0][1];
          prev_edge= edge->prev;
          if (prev_edge)
            prev_edge->next= succ_edge;
          else
            aet= succ_edge;
          if (next_edge)
            next_edge->prev= succ_edge;
          succ_edge->prev= prev_edge;
          succ_edge->next= next_edge;
        }
        else
        {

          edge->outp[1]= edge->outp[0];
          edge->bstate[1]= edge->bstate[0];
          edge->bundle[1][0]= edge->bundle[0][0];
          edge->bundle[1][1]= edge->bundle[0][1];
          edge->xb= edge->xt;
        }
        edge->outp[0]= __null;
      }
    }
  }


  result->strip= __null;
  result->num_strips= count_tristrips(tlist);
  if (result->num_strips > 0)
  {
    {if ((result->num_strips * sizeof(gpc_vertex_list)) > 0) { result->strip= (gpc_vertex_list*)malloc(result->num_strips * sizeof(gpc_vertex_list)); if (!(result->strip)) { fprintf(stderr, "gpc malloc failure: %s\n", "tristrip list creation"); exit(0);}} else result->strip= __null;}
                                                     ;

    s= 0;
    for (tn= tlist; tn; tn= tnn)
    {
      tnn= tn->next;

      if (tn->active > 2)
      {

        result->strip[s].num_vertices= tn->active;
        {if ((tn->active * sizeof(gpc_vertex)) > 0) { result->strip[s].vertex= (gpc_vertex*)malloc(tn->active * sizeof(gpc_vertex)); if (!(result->strip[s].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "tristrip creation"); exit(0);}} else result->strip[s].vertex= __null;}
                                               ;
        v= 0;
        if (0)
        {
          lt= tn->v[1];
          rt= tn->v[0];
        }
        else
        {
          lt= tn->v[0];
          rt= tn->v[1];
        }
        while (lt || rt)
        {
          if (lt)
          {
            ltn= lt->next;
            result->strip[s].vertex[v].x= lt->x;
            result->strip[s].vertex[v].y= lt->y;
            v++;
            {if (lt) {free(lt); (lt)= __null;}};
            lt= ltn;
          }
          if (rt)
          {
            rtn= rt->next;
            result->strip[s].vertex[v].x= rt->x;
            result->strip[s].vertex[v].y= rt->y;
            v++;
            {if (rt) {free(rt); (rt)= __null;}};
            rt= rtn;
          }
        }
        s++;
      }
      else
      {

        for (lt= tn->v[0]; lt; lt= ltn)
        {
          ltn= lt->next;
          {if (lt) {free(lt); (lt)= __null;}};
        }
        for (rt= tn->v[1]; rt; rt=rtn)
        {
          rtn= rt->next;
          {if (rt) {free(rt); (rt)= __null;}};
        }
      }
      {if (tn) {free(tn); (tn)= __null;}};
    }
  }


  reset_it(&it);
  reset_lmt(&lmt);
  {if (c_heap) {free(c_heap); (c_heap)= __null;}};
  {if (s_heap) {free(s_heap); (s_heap)= __null;}};
  {if (sbt) {free(sbt); (sbt)= __null;}};
}
# 40 "IntersectMeshes_OK2.cpp" 2
# 53 "IntersectMeshes_OK2.cpp"
 extern "C" {

# 1 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/triangle.h" 1
# 251 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/triangle.h"
# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 104 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 79 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 51 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 273 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 80 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 113 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     throw ();






extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();




extern int raise (int __sig) throw ();




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, __const char *__s);




extern void psiginfo (__const siginfo_t *__pinfo, __const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 177 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 196 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 211 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (__const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, __const sigset_t *__left,
        __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, __const sigset_t *__left,
       __const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 253 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     throw ();
# 310 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 334 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) throw ();



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 2 3 4

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 109 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  unsigned long r8;
  unsigned long r9;
  unsigned long r10;
  unsigned long r11;
  unsigned long r12;
  unsigned long r13;
  unsigned long r14;
  unsigned long r15;
  unsigned long rdi;
  unsigned long rsi;
  unsigned long rbp;
  unsigned long rbx;
  unsigned long rdx;
  unsigned long rax;
  unsigned long rcx;
  unsigned long rsp;
  unsigned long rip;
  unsigned long eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  unsigned long err;
  unsigned long trapno;
  unsigned long oldmask;
  unsigned long cr2;
  struct _fpstate * fpstate;
  unsigned long __reserved1 [8];
};
# 340 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h" 1 3 4
# 350 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 357 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 33 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef long int greg_t;





typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    unsigned long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 360 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) throw ();







extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 396 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();



}
# 252 "/extra/disco1/miaTools/MESHES_VTK/triangle_libs/triangle.h" 2

typedef void (*sighandler_t)(int);


struct triangulateio {
  double *pointlist;
  double *pointattributelist;
  int *pointmarkerlist;
  int numberofpoints;
  int numberofpointattributes;

  int *trianglelist;
  double *triangleattributelist;
  double *trianglearealist;
  int *neighborlist;
  int numberoftriangles;
  int numberofcorners;
  int numberoftriangleattributes;

  int *segmentlist;
  int *segmentmarkerlist;
  int numberofsegments;

  double *holelist;
  int numberofholes;

  double *regionlist;
  int numberofregions;

  int *edgelist;
  int *edgemarkerlist;
  double *normlist;
  int numberofedges;
};


void triangulate(char *, struct triangulateio *, struct triangulateio *,
                 struct triangulateio *);
void trifree(void *memptr);
# 56 "IntersectMeshes_OK2.cpp" 2
 }
# 76 "IntersectMeshes_OK2.cpp"
int triangulateID = 0;

int planeBoxOverlap(double *, double *, double * );
int triBoxOverlap( double * , double * , double * , double * , double * );

int TriangleTriangleIntersection(double *, double *, double *,
                                 double *, double *, double *,
                                 int &, double *, double * );

vtkPolyData *PrepareCells( vtkPolyData *A, double *BOUNDS );
int FindIntersections( vtkOBBNode *, vtkOBBNode *, vtkMatrix4x4 *, void * );

void GetOrder( int * , int I, int * );
mxArray *Split2MESH( vtkPolyData *, int , mxArray * );
void setSIDE( vtkPolyData * , vtkPolyData * );
vtkPolyData *SplitMESH( vtkPolyData * , vtkPolyData * , int * , vtkIdType * );
vtkPolyData *SplitMESH( vtkPolyData * , vtkPolyData * );
void splitFACE( vtkPolyData * , vtkIdType , vtkIdType * , int );
int LinePlaneIntersection(double *, double *, double *, double *, double &, double *);
# 115 "IntersectMeshes_OK2.cpp"
struct IntersectionsFinder {
  vtkPolyData *A;
  vtkPolyData *B;
  vtkPolyData *AC;
  vtkPolyData *BC;
  vtkOBBTree *OBB_B;
  vtkPolyData *LINES;
};
int *toSORT;
int func_to_sort(const void * a, const void * b ){
   return( toSORT[ *(int *)a ] - toSORT[ *(int *)b ] );
}

bool EXIT_OK = false;
void fnExit1 (void)
{

  mexPrintf ("Exit function 1. Exiting!!!! \n\n");mexEvalString("drawnow expose;");




  if(!EXIT_OK)
  {
   EXIT_OK = true;
   throw(0);

  }

}
# 433 "IntersectMeshes_OK2.cpp"
void splitFACE( vtkPolyData *M , vtkIdType cellid , vtkIdType *LID , int I ){

  struct triangulateio Tin;
  memset( &Tin , 0 , sizeof( struct triangulateio ) );

  struct triangulateio Tout;
  memset( &Tout , 0 , sizeof( struct triangulateio ) );


  int i,j, lid1, lid2;
  int *ADDED = (int *)malloc( MAX( I , 1024 ) * sizeof(int) );
  int nADDED = 0, a, a1, a2;





  Tin.segmentlist = (int *) malloc( I * sizeof(int) );
  Tin.segmentmarkerlist = (int *) malloc( I/2 * sizeof(int) );
  memset( Tin.segmentmarkerlist , 0 , Tin.numberofsegments * sizeof(int) );

  Tin.pointlist = (double *) malloc( 2 * I * sizeof(double) );
  Tin.pointmarkerlist = (int *) malloc( I * sizeof(int ) );
  memset( Tin.pointmarkerlist , 0 , Tin.numberofpoints * sizeof(int) );


  double XYZ[3];
  double R[3], P[3], Q[3], T[3][3], Den, RP[3], RQ[3], NT[3], x, y, x1, y1, x2, y2;



  nADDED=3;
  ADDED[0]=LID[0];
  ADDED[1]=LID[2];
  ADDED[2]=LID[4];

  M->GetPoint( ADDED[0] , R );
  M->GetPoint( ADDED[1] , P );
  M->GetPoint( ADDED[2] , Q );

  for ( i = 0 ; i < 3 ; i++ )
  {
      RP[i]=P[i]-R[i];
      RQ[i]=Q[i]-R[i];
  }

  Den=(RP[0]*RP[0]*RQ[1]*RQ[1] + RP[0]*RP[0]*RQ[2]*RQ[2] - 2*RP[0]*RP[1]*RQ[0]*RQ[1] - 2*RP[0]*RP[2]*RQ[0]*RQ[2] + RP[1]*RP[1]*RQ[0]*RQ[0] + RP[1]*RP[1]*RQ[2]*RQ[2] - 2*RP[1]*RP[2]*RQ[1]*RQ[2] + RP[2]*RP[2]*RQ[0]*RQ[0] + RP[2]*RP[2]*RQ[1]*RQ[1]);


  if( Den < 1e-15 ){
    goto EXIT;
  }
  {



  Den = 1.0/Den;

  T[0][0]=-(RQ[0]*(RP[1]*RQ[1] + RP[2]*RQ[2]) - RP[0]*(RQ[1]*RQ[1] + RQ[2]*RQ[2]))*Den;
  T[0][1]=-(RQ[1]*(RP[0]*RQ[0] + RP[2]*RQ[2]) - RP[1]*(RQ[0]*RQ[0] + RQ[2]*RQ[2]))*Den;
  T[0][2]=-(RQ[2]*(RP[0]*RQ[0] + RP[1]*RQ[1]) - RP[2]*(RQ[0]*RQ[0] + RQ[1]*RQ[1]))*Den;

  T[1][0]=-(RP[0]*(RP[1]*RQ[1] + RP[2]*RQ[2]) - RQ[0]*(RP[1]*RP[1] + RP[2]*RP[2]))*Den;
  T[1][1]=-(RP[1]*(RP[0]*RQ[0] + RP[2]*RQ[2]) - RQ[1]*(RP[0]*RP[0] + RP[2]*RP[2]))*Den;
  T[1][2]=-(RP[2]*(RP[0]*RQ[0] + RP[1]*RQ[1]) - RQ[2]*(RP[0]*RP[0] + RP[1]*RP[1]))*Den;

  NT[0]=RP[1]*RQ[2]-RP[2]*RQ[1];
  NT[1]=RP[2]*RQ[0]-RP[0]*RQ[2];
  NT[2]=RP[0]*RQ[1]-RP[0]*RQ[1];


  Tin.numberofpoints = 3;
  Tin.pointlist[ 0 ] = 1.0;
  Tin.pointlist[ 1 ] = 1.0;
  Tin.pointlist[ 2 ] = 1.0 +1.0;
  Tin.pointlist[ 3 ] = 1.0;
  Tin.pointlist[ 4 ] = 1.0;
  Tin.pointlist[ 5 ] = 1.0 +1.0;

  Tin.numberofsegments = 3;
  Tin.segmentlist[ 0 ] = 0;
  Tin.segmentlist[ 1 ] = 1;
  Tin.segmentlist[ 2 ] = 1;
  Tin.segmentlist[ 3 ] = 2;
  Tin.segmentlist[ 4 ] = 0;
  Tin.segmentlist[ 5 ] = 2;




  for( int s = 6 ; s < I ; s=s+2 ){


    lid1 = LID[ s ];
    M->GetPoint( lid1 , XYZ );
    x1 = T[0][0]*(XYZ[0]-R[0])+T[0][1]*(XYZ[1]-R[1])+T[0][2]*(XYZ[2]-R[2])+1.0;
    y1 = T[1][0]*(XYZ[0]-R[0])+T[1][1]*(XYZ[1]-R[1])+T[1][2]*(XYZ[2]-R[2])+1.0;


    lid2 = LID[ s+1 ];
    M->GetPoint( lid2 , XYZ );
    x2 = T[0][0]*(XYZ[0]-R[0])+T[0][1]*(XYZ[1]-R[1])+T[0][2]*(XYZ[2]-R[2])+1.0;
    y2 = T[1][0]*(XYZ[0]-R[0])+T[1][1]*(XYZ[1]-R[1])+T[1][2]*(XYZ[2]-R[2])+1.0;

    if ((x1<1.0)&&(x2<1.0)||(y1<1.0)&&(y2<1.0)||((x1+y1)>(1.0 +1.0 +1.0))&&((x2+y2)>(1.0 +1.0 +1.0)))
    {
        continue;
    }


    if (x1<1.0) { x1=1.0;}
    if (y1<1.0) { y1=1.0;}
    if ((x1+y1)>(1.0 +1.0 +1.0)) {x1=x1-(x1+y1-1.0 -1.0 -1.0)/2.0;y1=y1-(x1+y1-1.0 -1.0 -1.0)/2.0;}


    for ( a1 = 0 ; ( (a1 < Tin.numberofpoints) && ( ((Tin.pointlist[2*a1]-x1)*(Tin.pointlist[2*a1]-x1)+(Tin.pointlist[2*a1+1]-y1)*(Tin.pointlist[2*a1+1]-y1)) > 1e-16 ) ) ; a1++ ){
    }
    if ( a1 == Tin.numberofpoints ){
          ADDED[ nADDED ] = lid1;
          nADDED++;
          Tin.numberofpoints++;
          Tin.pointlist[ 2*a1 ] = x1;
          Tin.pointlist[ 2*a1+1 ] = y1;
    }



    if (x2<1.0) { x2=1.0;}
    if (y2<1.0) { y2=1.0;}
    if ((x2+y2)>(1.0 +1.0 +1.0)) {x2=x2-(x2+y2-1.0 -1.0 -1.0)/2.0;y2=y2-(x2+y2-1.0 -1.0 -1.0)/2.0;}

    for( a2 = 0 ; ( (a2 < Tin.numberofpoints) && ( ((Tin.pointlist[2*a2]-x2)*(Tin.pointlist[2*a2]-x2)+(Tin.pointlist[2*a2+1]-y2)*(Tin.pointlist[2*a2+1]-y2)) > 1e-16 ) ) ; a2++ ){
    }
    if ( a2 == Tin.numberofpoints ){
      ADDED[ nADDED ] = lid2;
      nADDED++;
      Tin.numberofpoints++;
      Tin.pointlist[ 2*a2 ] = x2;
      Tin.pointlist[ 2*a2+1 ] = y2;
    }

    mexPrintf("\n");


    if (a1!=a2)
    {

    if (a2<a1) {a1 ^= a2; a2 ^= a1; a1 ^= a2;}

    for (a = 0 ; (a < Tin.numberofsegments) && ((a1!=Tin.segmentlist[ 2*a ]) || (a2!=Tin.segmentlist[ 2*a+1 ])); a++) {
    }
    if ( a == Tin.numberofsegments )
    {
    Tin.numberofsegments++;
    Tin.segmentlist[ 2*a ] = a1;
    Tin.segmentlist[ 2*a+1 ] = a2;
    }

    }
  }







  if (nADDED==3) {
      goto EXIT;
  }
# 625 "IntersectMeshes_OK2.cpp"
  try {
   EXIT_OK = false;

   triangulate( "pzQ" , &Tin , &Tout , (struct triangulateio *) __null );
   EXIT_OK = true;
  } catch( int k ) {
    mexPrintf("triangulate dio int error en cellid: %d \n", cellid );
    if( ADDED != __null ){ free( ADDED ); ADDED=__null; };
    if( Tout.pointlist != __null ){ free( Tout.pointlist ); Tout.pointlist=__null; }; if( Tout.pointattributelist != __null ){ free( Tout.pointattributelist ); Tout.pointattributelist=__null; }; if( Tout.pointmarkerlist != __null ){ free( Tout.pointmarkerlist ); Tout.pointmarkerlist=__null; }; if( Tout.trianglelist != __null ){ free( Tout.trianglelist ); Tout.trianglelist=__null; }; if( Tout.triangleattributelist != __null ){ free( Tout.triangleattributelist ); Tout.triangleattributelist=__null; }; if( Tout.trianglearealist != __null ){ free( Tout.trianglearealist ); Tout.trianglearealist=__null; }; if( Tout.neighborlist != __null ){ free( Tout.neighborlist ); Tout.neighborlist=__null; }; if( Tout.segmentlist != __null ){ free( Tout.segmentlist ); Tout.segmentlist=__null; }; if( Tout.segmentmarkerlist != __null ){ free( Tout.segmentmarkerlist ); Tout.segmentmarkerlist=__null; }; if( Tout.holelist != __null ){ free( Tout.holelist ); Tout.holelist=__null; }; if( Tout.regionlist != __null ){ free( Tout.regionlist ); Tout.regionlist=__null; }; if( Tout.edgelist != __null ){ free( Tout.edgelist ); Tout.edgelist=__null; }; if( Tout.edgemarkerlist != __null ){ free( Tout.edgemarkerlist ); Tout.edgemarkerlist=__null; }; if( Tout.normlist != __null ){ free( Tout.normlist ); Tout.normlist=__null; };;
    if( Tin.pointlist != __null ){ free( Tin.pointlist ); Tin.pointlist=__null; }; if( Tin.pointattributelist != __null ){ free( Tin.pointattributelist ); Tin.pointattributelist=__null; }; if( Tin.pointmarkerlist != __null ){ free( Tin.pointmarkerlist ); Tin.pointmarkerlist=__null; }; if( Tin.trianglelist != __null ){ free( Tin.trianglelist ); Tin.trianglelist=__null; }; if( Tin.triangleattributelist != __null ){ free( Tin.triangleattributelist ); Tin.triangleattributelist=__null; }; if( Tin.trianglearealist != __null ){ free( Tin.trianglearealist ); Tin.trianglearealist=__null; }; if( Tin.neighborlist != __null ){ free( Tin.neighborlist ); Tin.neighborlist=__null; }; if( Tin.segmentlist != __null ){ free( Tin.segmentlist ); Tin.segmentlist=__null; }; if( Tin.segmentmarkerlist != __null ){ free( Tin.segmentmarkerlist ); Tin.segmentmarkerlist=__null; }; if( Tin.holelist != __null ){ free( Tin.holelist ); Tin.holelist=__null; }; if( Tin.regionlist != __null ){ free( Tin.regionlist ); Tin.regionlist=__null; }; if( Tin.edgelist != __null ){ free( Tin.edgelist ); Tin.edgelist=__null; }; if( Tin.edgemarkerlist != __null ){ free( Tin.edgemarkerlist ); Tin.edgemarkerlist=__null; }; if( Tin.normlist != __null ){ free( Tin.normlist ); Tin.normlist=__null; };;
    throw(k);

  }

  catch( ... ) {
    mexPrintf("triangulate dio unknown error en cellid: %d \n", cellid );
    if( ADDED != __null ){ free( ADDED ); ADDED=__null; };
    if( Tout.pointlist != __null ){ free( Tout.pointlist ); Tout.pointlist=__null; }; if( Tout.pointattributelist != __null ){ free( Tout.pointattributelist ); Tout.pointattributelist=__null; }; if( Tout.pointmarkerlist != __null ){ free( Tout.pointmarkerlist ); Tout.pointmarkerlist=__null; }; if( Tout.trianglelist != __null ){ free( Tout.trianglelist ); Tout.trianglelist=__null; }; if( Tout.triangleattributelist != __null ){ free( Tout.triangleattributelist ); Tout.triangleattributelist=__null; }; if( Tout.trianglearealist != __null ){ free( Tout.trianglearealist ); Tout.trianglearealist=__null; }; if( Tout.neighborlist != __null ){ free( Tout.neighborlist ); Tout.neighborlist=__null; }; if( Tout.segmentlist != __null ){ free( Tout.segmentlist ); Tout.segmentlist=__null; }; if( Tout.segmentmarkerlist != __null ){ free( Tout.segmentmarkerlist ); Tout.segmentmarkerlist=__null; }; if( Tout.holelist != __null ){ free( Tout.holelist ); Tout.holelist=__null; }; if( Tout.regionlist != __null ){ free( Tout.regionlist ); Tout.regionlist=__null; }; if( Tout.edgelist != __null ){ free( Tout.edgelist ); Tout.edgelist=__null; }; if( Tout.edgemarkerlist != __null ){ free( Tout.edgemarkerlist ); Tout.edgemarkerlist=__null; }; if( Tout.normlist != __null ){ free( Tout.normlist ); Tout.normlist=__null; };;
    if( Tin.pointlist != __null ){ free( Tin.pointlist ); Tin.pointlist=__null; }; if( Tin.pointattributelist != __null ){ free( Tin.pointattributelist ); Tin.pointattributelist=__null; }; if( Tin.pointmarkerlist != __null ){ free( Tin.pointmarkerlist ); Tin.pointmarkerlist=__null; }; if( Tin.trianglelist != __null ){ free( Tin.trianglelist ); Tin.trianglelist=__null; }; if( Tin.triangleattributelist != __null ){ free( Tin.triangleattributelist ); Tin.triangleattributelist=__null; }; if( Tin.trianglearealist != __null ){ free( Tin.trianglearealist ); Tin.trianglearealist=__null; }; if( Tin.neighborlist != __null ){ free( Tin.neighborlist ); Tin.neighborlist=__null; }; if( Tin.segmentlist != __null ){ free( Tin.segmentlist ); Tin.segmentlist=__null; }; if( Tin.segmentmarkerlist != __null ){ free( Tin.segmentmarkerlist ); Tin.segmentmarkerlist=__null; }; if( Tin.holelist != __null ){ free( Tin.holelist ); Tin.holelist=__null; }; if( Tin.regionlist != __null ){ free( Tin.regionlist ); Tin.regionlist=__null; }; if( Tin.edgelist != __null ){ free( Tin.edgelist ); Tin.edgelist=__null; }; if( Tin.edgemarkerlist != __null ){ free( Tin.edgemarkerlist ); Tin.edgemarkerlist=__null; }; if( Tin.normlist != __null ){ free( Tin.normlist ); Tin.normlist=__null; };;
    throw;

  }
# 668 "IntersectMeshes_OK2.cpp"
  if( Tout.numberofpoints > MAX( I , 1024 ) ){
    ADDED = (int *) realloc( ADDED , Tout.numberofpoints );
  }

  for( a = nADDED ; a < Tout.numberofpoints ; a++ ){
    x = Tout.pointlist[ 2*a ];
    y = Tout.pointlist[ 2*a + 1 ];


    XYZ[0] = R[0]+ RP[0]*(x-1.0) + RQ[0]*(y-1.0);
    XYZ[1] = R[1]+ RP[1]*(x-1.0) + RQ[1]*(y-1.0);
    XYZ[2] = R[2]+ RP[2]*(x-1.0) + RQ[2]*(y-1.0);

    ADDED[a] = (int) M->GetPoints()->InsertNextPoint( XYZ );
  }



  vtkIdType IJK[3];



  double A_IJK,N[3];


  for( j = 0 ; j < 3 ; j++ ){ IJK[j] = ADDED[ Tout.trianglelist[j] ]; }



    M->GetPoint(IJK[0],R);
    M->GetPoint(IJK[1],P);
    M->GetPoint(IJK[2],Q);


    N[0] = ((P[1]-R[1])*(Q[2]-R[2])-(P[2]-R[2])*(Q[1]-R[1]));
    N[1] = ((P[2]-R[2])*(Q[0]-R[0])-(P[0]-R[0])*(Q[2]-R[2]));
    N[2] = ((P[0]-R[0])*(Q[1]-R[1])-(P[1]-R[1])*(Q[0]-R[0]));


    A_IJK = sqrt(N[0]*N[0] + N[1]*N[1] + N[2]*N[2]);
    M->ReplaceCell( cellid , 3 , IJK );

  for( i = 1 ; i < Tout.numberoftriangles ; i++ ) {

    for( j = 0 ; j < 3 ; j++ ){ IJK[j] = ADDED[ Tout.trianglelist[i*3+j] ]; }

    M->GetPoint(IJK[0],R);
    M->GetPoint(IJK[1],P);
    M->GetPoint(IJK[2],Q);

    N[0] = ((P[1]-R[1])*(Q[2]-R[2])-(P[2]-R[2])*(Q[1]-R[1]));
    N[1] = ((P[2]-R[2])*(Q[0]-R[0])-(P[0]-R[0])*(Q[2]-R[2]));
    N[2] = ((P[0]-R[0])*(Q[1]-R[1])-(P[1]-R[1])*(Q[0]-R[0]));

    A_IJK = sqrt(N[0]*N[0] + N[1]*N[1] + N[2]*N[2]);


     if ( N[0]*NT[0]+N[1]*NT[1]+N[2]*NT[2] < 0)
        {

        IJK[0] ^= IJK[1]; IJK[1] ^= IJK[0]; IJK[0] ^= IJK[1];}
     M->InsertNextCell( VTK_TRIANGLE , 3 , IJK );

  }
  }
  EXIT:
    if( ADDED != __null ){ free( ADDED ); ADDED=__null; };
    if( Tout.pointlist != __null ){ free( Tout.pointlist ); Tout.pointlist=__null; }; if( Tout.pointattributelist != __null ){ free( Tout.pointattributelist ); Tout.pointattributelist=__null; }; if( Tout.pointmarkerlist != __null ){ free( Tout.pointmarkerlist ); Tout.pointmarkerlist=__null; }; if( Tout.trianglelist != __null ){ free( Tout.trianglelist ); Tout.trianglelist=__null; }; if( Tout.triangleattributelist != __null ){ free( Tout.triangleattributelist ); Tout.triangleattributelist=__null; }; if( Tout.trianglearealist != __null ){ free( Tout.trianglearealist ); Tout.trianglearealist=__null; }; if( Tout.neighborlist != __null ){ free( Tout.neighborlist ); Tout.neighborlist=__null; }; if( Tout.segmentlist != __null ){ free( Tout.segmentlist ); Tout.segmentlist=__null; }; if( Tout.segmentmarkerlist != __null ){ free( Tout.segmentmarkerlist ); Tout.segmentmarkerlist=__null; }; if( Tout.holelist != __null ){ free( Tout.holelist ); Tout.holelist=__null; }; if( Tout.regionlist != __null ){ free( Tout.regionlist ); Tout.regionlist=__null; }; if( Tout.edgelist != __null ){ free( Tout.edgelist ); Tout.edgelist=__null; }; if( Tout.edgemarkerlist != __null ){ free( Tout.edgemarkerlist ); Tout.edgemarkerlist=__null; }; if( Tout.normlist != __null ){ free( Tout.normlist ); Tout.normlist=__null; };;
    if( Tin.pointlist != __null ){ free( Tin.pointlist ); Tin.pointlist=__null; }; if( Tin.pointattributelist != __null ){ free( Tin.pointattributelist ); Tin.pointattributelist=__null; }; if( Tin.pointmarkerlist != __null ){ free( Tin.pointmarkerlist ); Tin.pointmarkerlist=__null; }; if( Tin.trianglelist != __null ){ free( Tin.trianglelist ); Tin.trianglelist=__null; }; if( Tin.triangleattributelist != __null ){ free( Tin.triangleattributelist ); Tin.triangleattributelist=__null; }; if( Tin.trianglearealist != __null ){ free( Tin.trianglearealist ); Tin.trianglearealist=__null; }; if( Tin.neighborlist != __null ){ free( Tin.neighborlist ); Tin.neighborlist=__null; }; if( Tin.segmentlist != __null ){ free( Tin.segmentlist ); Tin.segmentlist=__null; }; if( Tin.segmentmarkerlist != __null ){ free( Tin.segmentmarkerlist ); Tin.segmentmarkerlist=__null; }; if( Tin.holelist != __null ){ free( Tin.holelist ); Tin.holelist=__null; }; if( Tin.regionlist != __null ){ free( Tin.regionlist ); Tin.regionlist=__null; }; if( Tin.edgelist != __null ){ free( Tin.edgelist ); Tin.edgelist=__null; }; if( Tin.edgemarkerlist != __null ){ free( Tin.edgemarkerlist ); Tin.edgemarkerlist=__null; }; if( Tin.normlist != __null ){ free( Tin.normlist ); Tin.normlist=__null; };;
  {}
}






void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{

 if(nrhs < 2)
 {
  mexErrMsgTxt("Two arguments are needed.");
 }

  myALLOCS ALLOCS = {0};

  for( int i=0 ; i < nlhs ; i++ ){ plhs[i] = __null; }
  vtkPolyData *A = __null;
  vtkPolyData *B = __null;
  vtkPolyData *AC = __null;
  vtkPolyData *BC = __null;
  vtkOBBTree *OBB_A = __null;
  vtkOBBTree *OBB_B = __null;
  vtkPolyData *LINES = __null;
  vtkPolyData *AT = __null;
  vtkPolyData *BT = __null;
  vtkIdType *LID = __null;
  int *ORDER = __null;




  A = MESH2vtkPolyData( prhs[0] );
  for( int f = 0 ; f < A->GetPointData()->GetNumberOfArrays() ; f++ ){ A->GetPointData()->RemoveArray( f ); }
  for( int f = 0 ; f < A->GetCellData()->GetNumberOfArrays() ; f++ ){ A->GetCellData()->RemoveArray( f ); }
  if( !A->GetNumberOfCells() ){ goto EXIT; }
  {
  B = MESH2vtkPolyData( prhs[1] );
  for( int f = 0 ; f < B->GetPointData()->GetNumberOfArrays() ; f++ ){ B->GetPointData()->RemoveArray( f ); }
  for( int f = 0 ; f < B->GetCellData()->GetNumberOfArrays() ; f++ ){ B->GetCellData()->RemoveArray( f ); }
  if( !B->GetNumberOfCells() ){ goto EXIT; }

  double bA[6], bB[6];
  A->GetBounds(bA);
  B->GetBounds(bB);
  if( bA[0] > bB[1] || bA[1] < bB[0] ||
      bA[2] > bB[3] || bA[3] < bB[2] ||
      bA[4] > bB[5] || bA[5] < bB[4] ){
    goto EXIT;
  }

  bA[0] -= 1e-2; bA[1] += 1e-2;
  bA[2] -= 1e-2; bA[3] += 1e-2;
  bA[4] -= 1e-2; bA[5] += 1e-2;

  bB[0] -= 1e-2; bB[1] += 1e-2;
  bB[2] -= 1e-2; bB[3] += 1e-2;
  bB[4] -= 1e-2; bB[5] += 1e-2;

  double BOUNDS[6];
  BOUNDS[0] = MAX( bA[0] , bB[0] );
  BOUNDS[1] = MIN( bA[1] , bB[1] );
  BOUNDS[2] = MAX( bA[2] , bB[2] );
  BOUNDS[3] = MIN( bA[3] , bB[3] );
  BOUNDS[4] = MAX( bA[4] , bB[4] );
  BOUNDS[5] = MIN( bA[5] , bB[5] );


  vtkSignedCharArray *SIDE = __null;

  SIDE = vtkSignedCharArray::New();
  SIDE->SetName("SIDE");
  SIDE->SetNumberOfComponents(1);
  SIDE->SetNumberOfTuples( A->GetNumberOfCells() );
  A->GetCellData()->AddArray( SIDE );
  SIDE->Delete();

  AC = PrepareCells( A , BOUNDS );
  if( !AC->GetNumberOfCells() ){ goto EXIT; }


  SIDE = vtkSignedCharArray::New();
  SIDE->SetName("SIDE");
  SIDE->SetNumberOfComponents(1);
  SIDE->SetNumberOfTuples( B->GetNumberOfCells() );
  B->GetCellData()->AddArray( SIDE );
  SIDE->Delete();

  BC = PrepareCells( B , BOUNDS );
  if( !BC->GetNumberOfCells() ){ goto EXIT; }




  OBB_A = vtkOBBTree::New();
  OBB_A->SetDataSet(AC);
  OBB_A->SetNumberOfCellsPerNode(2);
  OBB_A->SetMaxLevel(10000);
  OBB_A->SetTolerance(1e-6);
  OBB_A->AutomaticOn();
  OBB_A->BuildLocator();

  OBB_B = vtkOBBTree::New();
  OBB_B->SetDataSet(BC);
  OBB_B->SetNumberOfCellsPerNode(2);
  OBB_B->SetMaxLevel(10000);
  OBB_B->SetTolerance(1e-6);
  OBB_B->AutomaticOn();
  OBB_B->BuildLocator();




  LINES = vtkPolyData::New();

  vtkPoints *LINESxyz = vtkPoints::New();
  LINESxyz->SetDataTypeToDouble();
  LINES->SetPoints(LINESxyz);
  LINESxyz->Delete();

  vtkCellArray *LINESlin = vtkCellArray::New();
  LINES->SetLines(LINESlin);
  LINESlin->Delete();

  vtkIntArray *IDS = __null;

  IDS = vtkIntArray::New();
  IDS->SetName("IDS_A");
  IDS->SetNumberOfComponents(1);
  LINES->GetCellData()->AddArray( IDS );
  IDS->Delete();

  IDS = vtkIntArray::New();
  IDS->SetName("IDS_B");
  IDS->SetNumberOfComponents(1);
  LINES->GetCellData()->AddArray( IDS );
  IDS->Delete();


  struct IntersectionsFinder INT;
  INT.A = A;
  INT.B = B;
  INT.AC = AC;
  INT.BC = BC;
  INT.OBB_B = OBB_B;
  INT.LINES = LINES;


  OBB_A->IntersectWithOBBTree( OBB_B , 0 , FindIntersections , &INT );


  if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
  if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
  if( AC != __null ){ AC->Delete(); AC=__null; };
  if( BC != __null ){ BC->Delete(); BC=__null; };

  int nLINES = LINES->GetNumberOfCells();
  if( !nLINES )
    { goto EXIT; }



    if( nlhs > 7 ){
    vtkTriangleFilter *TRIANGLEFILTER = vtkTriangleFilter::New();
    TRIANGLEFILTER->SetInput( LINES );
    TRIANGLEFILTER->PassVertsOff();
    TRIANGLEFILTER->PassLinesOn();
    TRIANGLEFILTER->Update();

    plhs[7] = vtkPolyData2MESH( TRIANGLEFILTER->GetOutput() );
    TRIANGLEFILTER->Delete();
  }




  if( 0 ){
    vtkCleanPolyData *CLEAN = __null;
    CLEAN = vtkCleanPolyData::New();
    CLEAN->SetInput( LINES );
    CLEAN->ToleranceIsAbsoluteOn();
    CLEAN->SetTolerance( 1e-14 );
    CLEAN->SetAbsoluteTolerance( 1e-14 );
    CLEAN->ConvertLinesToPointsOff();
    CLEAN->PointMergingOn();
    CLEAN->Update();
    LINES->Delete();
    LINES = vtkPolyData::New();

    LINES->ShallowCopy( CLEAN->GetOutput() );
    CLEAN->Delete();
  }


  if( nlhs > 6 ){
    vtkTriangleFilter *TRIANGLEFILTER = vtkTriangleFilter::New();
    TRIANGLEFILTER->SetInput( LINES );
    TRIANGLEFILTER->PassVertsOff();
    TRIANGLEFILTER->PassLinesOn();
    TRIANGLEFILTER->Update();

    plhs[6] = vtkPolyData2MESH( TRIANGLEFILTER->GetOutput() );
    TRIANGLEFILTER->Delete();
  }


  ORDER = ( int * ) mxMalloc( nLINES * sizeof( int ) );
  LID = ( vtkIdType * ) mxMalloc( sizeof( vtkIdType ) * ( 2 * nLINES + 6 ) );


  triangulateID = 1000;

  LINES->GetCellData()->SetActiveScalars("IDS_A");




  try{
  AT = SplitMESH( A , LINES , ORDER , LID );

  } catch( int k ) {

    if( LID != __null ){ mxFree( LID ); LID=__null; };
    if( ORDER != __null ){ mxFree( ORDER ); ORDER=__null; };
    if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
    if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
    if( LINES != __null ){ LINES->Delete(); LINES=__null; };
    if( AC != __null ){ AC->Delete(); AC=__null; };
    if( BC != __null ){ BC->Delete(); BC=__null; };
    if( AT != __null ){ AT->Delete(); AT=__null; };
    if( A != __null ){ A->Delete(); A=__null; };
    if( B != __null ){ B->Delete(); B=__null; };
    myFreeALLOCATES_( &ALLOCS );;
    mexErrMsgIdAndTxt("Intersect:triangulate", "Intersect:triangulate error type int\n");
  }

  catch( ... ) {

    if( LID != __null ){ mxFree( LID ); LID=__null; };
    if( ORDER != __null ){ mxFree( ORDER ); ORDER=__null; };
    if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
    if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
    if( LINES != __null ){ LINES->Delete(); LINES=__null; };
    if( AC != __null ){ AC->Delete(); AC=__null; };
    if( BC != __null ){ BC->Delete(); BC=__null; };
    if( AT != __null ){ AT->Delete(); AT=__null; };
    if( A != __null ){ A->Delete(); A=__null; };
    if( B != __null ){ B->Delete(); B=__null; };

    myFreeALLOCATES_( &ALLOCS );;
    mexErrMsgIdAndTxt("Intersect:triangulate", "Intersect:triangulate error type unknown\n");

  }





  setSIDE( AT , B );

                  plhs[0] = Split2MESH( AT , 0 , (mxArray *)__null );
  if( nlhs > 1 ){ plhs[1] = Split2MESH( AT , 1 , (mxArray *)__null ); }
  if( nlhs > 4 ){ plhs[4] = vtkPolyData2MESH(AT); }

  if( AT != __null ){ AT->Delete(); AT=__null; };


  if( nlhs < 3 ){ goto EXIT; }



  triangulateID = 2000;

  LINES->GetCellData()->SetActiveScalars("IDS_B");
    try{
    BT = SplitMESH( B , LINES , ORDER , LID );
  } catch( int k ) {

    if( LID != __null ){ mxFree( LID ); LID=__null; };
    if( ORDER != __null ){ mxFree( ORDER ); ORDER=__null; };
    if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
    if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
    if( LINES != __null ){ LINES->Delete(); LINES=__null; };
    if( AC != __null ){ AC->Delete(); AC=__null; };
    if( BC != __null ){ BC->Delete(); BC=__null; };
    if( AT != __null ){ AT->Delete(); AT=__null; };
    if( BT != __null ){ BT->Delete(); BT=__null; };
    if( A != __null ){ A->Delete(); A=__null; };
    if( B != __null ){ B->Delete(); B=__null; };
    myFreeALLOCATES_( &ALLOCS );;
    mexErrMsgTxt("\n");
  }

  catch( ... ) {

    if( LID != __null ){ mxFree( LID ); LID=__null; };
    if( ORDER != __null ){ mxFree( ORDER ); ORDER=__null; };
    if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
    if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
    if( LINES != __null ){ LINES->Delete(); LINES=__null; };
    if( AC != __null ){ AC->Delete(); AC=__null; };
    if( BC != __null ){ BC->Delete(); BC=__null; };
    if( AT != __null ){ AT->Delete(); AT=__null; };
    if( BT != __null ){ BT->Delete(); BT=__null; };
    if( A != __null ){ A->Delete(); A=__null; };
    if( B != __null ){ B->Delete(); B=__null; };

    myFreeALLOCATES_( &ALLOCS );;
    mexErrMsgTxt("\n");

  }

  setSIDE( BT , A );

                  plhs[2] = Split2MESH( BT , 0 , (mxArray *)__null );
  if( nlhs > 3 ){ plhs[3] = Split2MESH( BT , 1 , (mxArray *)__null ); }
  if( nlhs > 5 ){ plhs[5] = vtkPolyData2MESH(BT); }

  if( BT != __null ){ BT->Delete(); BT=__null; };


  }

   EXIT:

      if( plhs[0] == __null ) { plhs[0]=mxDuplicateArray(prhs[0]); }
      if ( plhs[1] == __null && nlhs > 1 ) { plhs[1]=Split2MESH( (vtkPolyData *) __null , 0 , (mxArray *) __null );}
      if ( plhs[2] == __null && nlhs > 2 ) { plhs[2]=mxDuplicateArray(prhs[1]);}
      if ( plhs[3] == __null && nlhs > 3 ) { plhs[3]=Split2MESH( (vtkPolyData *) __null , 0 , (mxArray *) __null );}
      if ( plhs[4] == __null && nlhs > 4 )
          {
          plhs[4] = mxDuplicateArray(prhs[0]);
          mxAddField(plhs[4],"triSIDE");
          mxSetField_700(plhs[4],0,"triSIDE", mxCreateDoubleMatrix_700( A->GetNumberOfCells() , 1 , mxREAL ) );
          }
      if ( plhs[5] == __null && nlhs > 5 )
          {
          plhs[5] = mxDuplicateArray(prhs[1]);
          mxAddField(plhs[5],"triSIDE");
          mxSetField_700(plhs[5],0,"triSIDE", mxCreateDoubleMatrix_700( B->GetNumberOfCells() , 1 , mxREAL ) );
          }
      if( plhs[6] == __null && nlhs > 6 )
          {
          plhs[6]=Split2MESH( (vtkPolyData *) __null , 0 , (mxArray *) __null );
          mxAddField(plhs[6],"triIDS_A");
          mxAddField(plhs[6],"triIDS_B");
          }


    if( LID != __null ){ mxFree( LID ); LID=__null; };
    if( ORDER != __null ){ mxFree( ORDER ); ORDER=__null; };
    if( OBB_B != __null ){ OBB_B->Delete(); OBB_B=__null; };
    if( OBB_A != __null ){ OBB_A->Delete(); OBB_A=__null; };
    if( LINES != __null ){ LINES->Delete(); LINES=__null; };
    if( AC != __null ){ AC->Delete(); AC=__null; };
    if( BC != __null ){ BC->Delete(); BC=__null; };
    if( AT != __null ){ AT->Delete(); AT=__null; };
    if( BT != __null ){ BT->Delete(); BT=__null; };
    if( A != __null ){ A->Delete(); A=__null; };
    if( B != __null ){ B->Delete(); B=__null; };

    myFreeALLOCATES_( &ALLOCS );;

    }


vtkPolyData *SplitMESH( vtkPolyData *A , vtkPolyData *LINES ){
  int nLINES = LINES->GetNumberOfCells();

  int *ORDER;
  ORDER = ( int * ) malloc( nLINES * sizeof( int ) );
  vtkIdType *LID;
  LID = ( vtkIdType * ) malloc( sizeof( vtkIdType ) * ( 2 * nLINES + 6 ) );
  vtkPolyData *AT=__null;
  try{
  AT = SplitMESH( A , LINES , ORDER , LID );
  }catch( int k ) {

  free( LID );
  free( ORDER );
  if( AT != __null ){ AT->Delete(); AT=__null; };
  throw(k);
  }

  catch( ... ) {

    free( LID );
    free( ORDER );
    if( AT != __null ){ AT->Delete(); AT=__null; };
    throw;

  }

  free( LID );
  free( ORDER );

  return( AT );
}

vtkPolyData *SplitMESH( vtkPolyData *A , vtkPolyData *LINES , int *ORDER , vtkIdType *LID ){

  int OriginalNumberOfPoints = A->GetNumberOfPoints();
  int OriginalNumberOfCells = A->GetNumberOfCells();

  vtkPolyData *AT = vtkPolyData::New();

  vtkPoints *POINTS = vtkPoints::New();
  POINTS->SetDataTypeToDouble();
  POINTS->SetNumberOfPoints( OriginalNumberOfPoints + LINES->GetNumberOfPoints() );
  memcpy( (double *) POINTS->GetVoidPointer(0) , (double *) A->GetPoints()->GetVoidPointer(0) , OriginalNumberOfPoints * sizeof( double ) * 3 );
  memcpy( ( (double *) POINTS->GetVoidPointer(0) + OriginalNumberOfPoints * 3 ) , (double *) LINES->GetPoints()->GetVoidPointer(0) , LINES->GetNumberOfPoints() * sizeof( double ) * 3 );

  AT->SetPoints( POINTS );
  POINTS->Delete();

 vtkCellArray *FACES = vtkCellArray::New();
  FACES->DeepCopy( A->GetPolys() );
  AT->SetPolys( FACES );
  FACES->Delete();


  int nLINES = LINES->GetNumberOfCells();
  int *LIDS = (int *) LINES->GetCellData()->GetScalars()->GetVoidPointer(0);
  GetOrder( LIDS , nLINES , ORDER );



  int L, i;
  vtkIdType cellid;
  vtkCell *CELL = __null;

  L = 0;
  do{
    i = 0;
    cellid = LIDS[ ORDER[L] ];

    CELL = AT->GetCell(cellid);
    LID[ i++ ] = CELL->GetPointId(0);
    LID[ i++ ] = CELL->GetPointId(1);
    LID[ i++ ] = CELL->GetPointId(1);
    LID[ i++ ] = CELL->GetPointId(2);
    LID[ i++ ] = CELL->GetPointId(2);
    LID[ i++ ] = CELL->GetPointId(0);

    while( L < nLINES && LIDS[ ORDER[L] ] == cellid ){
      CELL = LINES->GetCell( ORDER[ L ] );
      LID[ i++ ] = CELL->GetPointId(0) + OriginalNumberOfPoints;
      LID[ i++ ] = CELL->GetPointId(1) + OriginalNumberOfPoints;
      L++;
    }


  try{


    splitFACE( AT , cellid , LID , i );
  }catch( int k ) {

    throw(k);
  }
  catch( ... ) {

    throw;
 }


  } while( L < nLINES );

  vtkSignedCharArray *SIDE = __null;

  SIDE = vtkSignedCharArray::New();
  SIDE->SetName("SIDE");
  SIDE->SetNumberOfComponents(1);
  SIDE->SetNumberOfTuples( AT->GetNumberOfCells() );


  memcpy( (signed char *) SIDE->GetVoidPointer(0) ,
          A->GetCellData()->GetArray(0)->GetVoidPointer(0) ,
          OriginalNumberOfCells );

  memset( (signed char *) SIDE->GetVoidPointer(0) + OriginalNumberOfCells ,
          1 ,
          AT->GetNumberOfCells() - OriginalNumberOfCells );

  AT->GetCellData()->AddArray( SIDE );
  SIDE->Delete();

  return( AT );
}






vtkPolyData *PrepareCells( vtkPolyData *A, double *BOUNDS ){
  double boxcenter[3];
  boxcenter[0] = ( BOUNDS[0] + BOUNDS[1] )/2.0;
  boxcenter[1] = ( BOUNDS[2] + BOUNDS[3] )/2.0;
  boxcenter[2] = ( BOUNDS[4] + BOUNDS[5] )/2.0;

  double boxhalfsize[3];
  boxhalfsize[0] = ( BOUNDS[1] - BOUNDS[0] )/2.0;
  boxhalfsize[1] = ( BOUNDS[3] - BOUNDS[2] )/2.0;
  boxhalfsize[2] = ( BOUNDS[5] - BOUNDS[4] )/2.0;

  vtkPolyData *S = vtkPolyData::New();

  S->SetPoints( A->GetPoints() );

  vtkCell *CELL;

  int nF = 0;
  char *TS;
  TS = (char *) mxMalloc( sizeof(char) * A->GetNumberOfCells() );
  memset( TS , 0 , A->GetNumberOfCells() );


  signed char *SIDE = (signed char *) A->GetCellData()->GetArray(0)->GetVoidPointer(0);
  memset( SIDE , 0 , A->GetNumberOfCells() );

  double RA[3], PA[3], QA[3];
  for( int t = 0 ; t < A->GetNumberOfCells() ; t++ ){
    CELL = A->GetCell(t);
    A->GetPoint( CELL->GetPointId(0) , RA );
    A->GetPoint( CELL->GetPointId(1) , PA );
    A->GetPoint( CELL->GetPointId(2) , QA );

    if( triBoxOverlap( boxcenter , boxhalfsize , RA , PA , QA ) ){
      SIDE[t] = 1;
      TS[t] = 1;
      nF++;
    }
  }

  vtkCellArray *FACES = vtkCellArray::New();

 vtkIdTypeArray *FACESptr = vtkIdTypeArray::New();
  FACESptr->SetNumberOfValues( 4*nF );

  vtkIntArray *IDS = vtkIntArray::New();
  IDS->SetName("IDS");
  IDS->SetNumberOfComponents(1);
  IDS->SetNumberOfTuples( nF );
  int *IDSptr = (int *)IDS->GetVoidPointer(0);

  nF = 0;
  for( int t = 0 ; t < A->GetNumberOfCells() ; t++ ){
    if( !TS[t] ){ continue; }

    CELL = A->GetCell(t);

    FACESptr->SetValue( nF*4 , 3 );
    FACESptr->SetValue( nF*4+1 , CELL->GetPointId(0) );
    FACESptr->SetValue( nF*4+2 , CELL->GetPointId(1) );
    FACESptr->SetValue( nF*4+3 , CELL->GetPointId(2) );
    IDSptr[nF] = t;

    nF++;
  }

  FACES->SetCells( nF , FACESptr );
  S->SetPolys( FACES );
  S->GetCellData()->AddArray( IDS );

  mxFree( TS );
  FACES->Delete();
  FACESptr->Delete();
  IDS->Delete();

  return(S);
}


int FindIntersections( vtkOBBNode *NODE_A , vtkOBBNode *NODE_B , vtkMatrix4x4 *transform , void *arg ){

  struct IntersectionsFinder *INT = (struct IntersectionsFinder *)arg;

  double RA[3] , PA[3] , QA[3];
  double RB[3] , PB[3] , QB[3];
  double T[3][3], Den, RP[3], RQ[3];
  int coplanar = 0 , intersects = 0;
  double X[3] , Y[3], x ,y;
  vtkCell *CELL;
  vtkIdType cA , cB, i, j, k;
  int BAalreadycomputed = 0;
  double BA[6], boxcenterA[3], boxhalfsizeA[3];

  int *IDSA = (int *) INT->AC->GetCellData()->GetArray(0)->GetVoidPointer(0);
  int *IDSB = (int *) INT->BC->GetCellData()->GetArray(0)->GetVoidPointer(0);

  vtkPoints *POINTSA = INT->A->GetPoints();
  vtkPoints *POINTSB = INT->B->GetPoints();

  vtkPoints *LINESxyz = INT->LINES->GetPoints();
  vtkCellArray *LINESlin = INT->LINES->GetLines();

  vtkDataArray *LidsA = INT->LINES->GetCellData()->GetArray(0);
  vtkDataArray *LidsB = INT->LINES->GetCellData()->GetArray(1);

  int nXYZ = 0;

  int nA = NODE_A->Cells->GetNumberOfIds();
  for( i = 0 ; i < nA ; i++ ){
    cA = IDSA[ NODE_A->Cells->GetId(i) ];

    CELL = INT->A->GetCell( cA );
    POINTSA->GetPoint( CELL->GetPointId(0) , RA );
    POINTSA->GetPoint( CELL->GetPointId(1) , PA );
    POINTSA->GetPoint( CELL->GetPointId(2) , QA );

    if( !INT->OBB_B->TriangleIntersectsNode( NODE_B , RA , PA , QA , transform ) ){
      continue;
    }

    BAalreadycomputed = 0;
    int nB = NODE_B->Cells->GetNumberOfIds();
    for( j = 0 ; j < nB ; j++ ){
      cB = IDSB[ NODE_B->Cells->GetId(j) ];

      CELL = INT->B->GetCell( cB );
      POINTSB->GetPoint( CELL->GetPointId(0) , RB );
      POINTSB->GetPoint( CELL->GetPointId(1) , PB );
      POINTSB->GetPoint( CELL->GetPointId(2) , QB );


      if( !BAalreadycomputed ){
        BA[0] = MIN3( RA[0] , PA[0] , QA[0] );
        BA[1] = MAX3( RA[0] , PA[0] , QA[0] );
        BA[2] = MIN3( RA[1] , PA[1] , QA[1] );
        BA[3] = MAX3( RA[1] , PA[1] , QA[1] );
        BA[4] = MIN3( RA[2] , PA[2] , QA[2] );
        BA[5] = MAX3( RA[2] , PA[2] , QA[2] );
        boxcenterA[0] = ( BA[0] + BA[1] )/2.0;
        boxcenterA[1] = ( BA[2] + BA[3] )/2.0;
        boxcenterA[2] = ( BA[4] + BA[5] )/2.0;
        boxhalfsizeA[0] = ( BA[1] - BA[0] )/2.0; boxhalfsizeA[0] += 1e-2/2;
        boxhalfsizeA[1] = ( BA[3] - BA[2] )/2.0; boxhalfsizeA[1] += 1e-2/2;
        boxhalfsizeA[2] = ( BA[5] - BA[4] )/2.0; boxhalfsizeA[2] += 1e-2/2;
        BAalreadycomputed = 1;
      }

      if( !triBoxOverlap( boxcenterA , boxhalfsizeA , RB , PB , QB ) ){
        continue;
      }

      intersects = TriangleTriangleIntersection( RA , PA , QA , RB , PB , QB , coplanar , X , Y );

      if( intersects && (X[0] != Y[0] || X[1] != Y[1] || X[2] != Y[2] ) ){
          nXYZ = LINESxyz->GetNumberOfPoints();
          LINESxyz->InsertNextPoint( X );
          LINESxyz->InsertNextPoint( Y );

          LINESlin->InsertNextCell( 2 );
          LINESlin->InsertCellPoint( nXYZ );
          LINESlin->InsertCellPoint( nXYZ+1 );

          LidsA->InsertNextTuple1( cA );
          LidsB->InsertNextTuple1( cB );
      }

      else

      {

      if (coplanar)

      {
      mexPrintf("Son coplanares las caras %i y %i\n",cA,cB); mexEvalString("drawnow expose;");
      for ( k = 0 ; k < 3 ; k++ )

      {
      RP[i]=PA[i]-RA[i];
      RQ[i]=QA[i]-RA[i];
      }

      Den=(RP[0]*RP[0]*RQ[1]*RQ[1] + RP[0]*RP[0]*RQ[2]*RQ[2] - 2*RP[0]*RP[1]*RQ[0]*RQ[1] - 2*RP[0]*RP[2]*RQ[0]*RQ[2] + RP[1]*RP[1]*RQ[0]*RQ[0] + RP[1]*RP[1]*RQ[2]*RQ[2] - 2*RP[1]*RP[2]*RQ[1]*RQ[2] + RP[2]*RP[2]*RQ[0]*RQ[0] + RP[2]*RP[2]*RQ[1]*RQ[1]);

      if( Den < 1e-15 ){
        continue;
      }



      Den = 1.0/Den;

      T[0][0]=-(RQ[0]*(RP[1]*RQ[1] + RP[2]*RQ[2]) - RP[0]*(RQ[1]*RQ[1] + RQ[2]*RQ[2]))*Den;
      T[0][1]=-(RQ[1]*(RP[0]*RQ[0] + RP[2]*RQ[2]) - RP[1]*(RQ[0]*RQ[0] + RQ[2]*RQ[2]))*Den;
      T[0][2]=-(RQ[2]*(RP[0]*RQ[0] + RP[1]*RQ[1]) - RP[2]*(RQ[0]*RQ[0] + RQ[1]*RQ[1]))*Den;

      T[1][0]=-(RP[0]*(RP[1]*RQ[1] + RP[2]*RQ[2]) - RQ[0]*(RP[1]*RP[1] + RP[2]*RP[2]))*Den;
      T[1][1]=-(RP[1]*(RP[0]*RQ[0] + RP[2]*RQ[2]) - RQ[1]*(RP[0]*RP[0] + RP[2]*RP[2]))*Den;
      T[1][2]=-(RP[2]*(RP[0]*RQ[0] + RP[1]*RQ[1]) - RQ[2]*(RP[0]*RP[0] + RP[1]*RP[1]))*Den;


      gpc_polygon *TRI1;
      gpc_polygon *TRI2;
      gpc_polygon *TRIO;


      TRI1->num_contours = 1;






      TRI1->hole=__null;
      TRI1->hole = (int*)malloc(sizeof(int));
      free(TRI1->hole);







    if( (sizeof(gpc_vertex_list)) > 0 ){
        mexPrintf("Hasta aqui3\n");

        TRI1->contour = (gpc_vertex_list *) malloc( sizeof(gpc_vertex_list) );
        mexPrintf("Hasta aqui4\n");

        if( ( TRI1->contour) == __null ){
            Den = Den * 100;


            printf("Den es: %d\n\n" , (int) Den );

            return( (int) Den );
        }
    } else {
        TRI1->contour = __null;
        mexPrintf("tamano para malloc == 0\n");
        return(1);
    }

      mexPrintf("ya esta TRI1.contour\n");
      free(TRI1->contour);
      return(1);






      TRI1->hole[0] = 0;
      TRI1->contour[0].num_vertices = 3;



      {if ((3 * sizeof(gpc_vertex)) > 0) { TRI1->contour[0].vertex= (gpc_vertex*)malloc(3 * sizeof(gpc_vertex)); if (!(TRI1->contour[0].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex creation"); exit(0);}} else TRI1->contour[0].vertex= __null;};
      TRI1->contour[0].vertex[0].x = 1.0;
      TRI1->contour[0].vertex[0].y = 1.0;
      TRI1->contour[0].vertex[1].x = 1.0 +1.0;
      TRI1->contour[0].vertex[1].y = 1.0;
      TRI1->contour[0].vertex[2].x = 1.0;
      TRI1->contour[0].vertex[2].y = 1.0 +1.0;


      TRI2->num_contours = 1;
      {if ((sizeof(int)) > 0) { TRI2->hole= (int*)malloc(sizeof(int)); if (!(TRI2->hole)) { fprintf(stderr, "gpc malloc failure: %s\n", "hole flag array creation"); exit(0);}} else TRI2->hole= __null;};
      {if ((sizeof(gpc_vertex_list)) > 0) { TRI2->contour= (gpc_vertex_list*)malloc(sizeof(gpc_vertex_list)); if (!(TRI2->contour)) { fprintf(stderr, "gpc malloc failure: %s\n", "contour creation"); exit(0);}} else TRI2->contour= __null;};
      TRI2->hole[0] = 0;
      TRI2->contour[0].num_vertices = 3;
      {if ((3 * sizeof(gpc_vertex)) > 0) { TRI2->contour[0].vertex= (gpc_vertex*)malloc(3 * sizeof(gpc_vertex)); if (!(TRI2->contour[0].vertex)) { fprintf(stderr, "gpc malloc failure: %s\n", "vertex creation"); exit(0);}} else TRI2->contour[0].vertex= __null;};
      TRI2->contour[0].vertex[0].x = T[0][0]*(RB[0]-RA[0])+T[0][1]*(RB[1]-RA[1])+T[0][2]*(RB[2]-RA[2])+1.0;
      TRI2->contour[0].vertex[0].y = T[1][0]*(RB[0]-RA[0])+T[1][1]*(RB[1]-RA[1])+T[1][2]*(RB[2]-RA[2])+1.0;
      TRI2->contour[0].vertex[1].x = T[0][0]*(PB[0]-RA[0])+T[0][1]*(PB[1]-RA[1])+T[0][2]*(PB[2]-RA[2])+1.0;
      TRI2->contour[0].vertex[1].y = T[1][0]*(PB[0]-RA[0])+T[1][1]*(PB[1]-RA[1])+T[1][2]*(PB[2]-RA[2])+1.0;
      TRI2->contour[0].vertex[2].x = T[0][0]*(QB[0]-RA[0])+T[0][1]*(QB[1]-RA[1])+T[0][2]*(QB[2]-RA[2])+1.0;
      TRI2->contour[0].vertex[2].y = T[1][0]*(QB[0]-RA[0])+T[1][1]*(QB[1]-RA[1])+T[1][2]*(QB[2]-RA[2])+1.0;


      gpc_polygon_clip( GPC_INT , TRI1 , TRI2 , TRIO );



      gpc_free_polygon(TRI1);
      gpc_free_polygon(TRI2);

      if ((TRIO->num_contours>0)&&(TRIO->contour[0].num_vertices))

      {

      int nV = TRIO->contour[0].num_vertices;

      for (k=0; k<nV; k++)
          {
          x = TRIO->contour[0].vertex[k].x;
          y = TRIO->contour[0].vertex[k].y;
          X[0] = RA[0]+ RP[0]*(x-1.0) + RQ[0]*(y-1.0);
          X[1] = RA[1]+ RP[1]*(x-1.0) + RQ[1]*(y-1.0);
          X[2] = RA[2]+ RP[2]*(x-1.0) + RQ[2]*(y-1.0);

          x = TRIO->contour[0].vertex[(k+1)%nV].x;
          y = TRIO->contour[0].vertex[(k+1)%nV].y;
          Y[0] = RA[0]+ RP[0]*(x-1.0) + RQ[0]*(y-1.0);
          Y[1] = RA[1]+ RP[1]*(x-1.0) + RQ[1]*(y-1.0);
          Y[2] = RA[2]+ RP[2]*(x-1.0) + RQ[2]*(y-1.0);

          nXYZ = LINESxyz->GetNumberOfPoints();
          LINESxyz->InsertNextPoint( X );
          LINESxyz->InsertNextPoint( Y );

          LINESlin->InsertNextCell( 2 );
          LINESlin->InsertCellPoint( nXYZ );
          LINESlin->InsertCellPoint( nXYZ+1 );

          LidsA->InsertNextTuple1( cA );
          LidsB->InsertNextTuple1( cB );
          }

      }

      gpc_free_polygon(TRIO);

      }

      else {
        continue;
      }

      }

    }
  }

  return( 1 );
}

void GetOrder( int *X , int I , int *ORDER ){
  toSORT = X;
  for( int t = 0 ; t < I ; t++ ){
    ORDER[t] = t;
  }
  qsort( ORDER , I , sizeof( int ) , func_to_sort );
}


mxArray *Split2MESH( vtkPolyData *POLY , int side , mxArray *copyFrom ){




  const char *names[] = {""};
  const int dims[1] = {1};
  mxArray *DATA;
  double *data, xyz[3];
  int nP, c, p, nC, val;
  signed char *SIDE;
  vtkPoints *POINTS;
  vtkCell *CELL;

  mxArray *M;

  M = mxCreateStructArray_700(1, (const mwSize*)(dims), 0, names );

  if( POLY == __null ){
    mxAddField( M , "xyz" );
    mxAddField( M , "tri" );

    return( M );
  }




  if( copyFrom == __null ){

    nP = POLY->GetNumberOfPoints();
    POINTS = POLY->GetPoints();

    DATA = mxCreateDoubleMatrix_700( nP , 3 , mxREAL );
    data = mxGetPr( DATA );

    for( int p = 0 ; p < nP ; p++ ){
      POINTS->GetPoint( p , xyz );
      data[ p ] = xyz[0];
      data[ p + nP ] = xyz[1];
      data[ p + 2*nP ] = xyz[2];
    }

    mxAddField( M , "xyz" );
    mxSetField_700( M , 0 , "xyz" , DATA );

  } else {




  }

  nP = POLY->GetNumberOfCells();
  SIDE = (signed char *) POLY->GetCellData()->GetArray(0)->GetVoidPointer(0);

  nC = 0;
  for( int p = 0 ; p < nP ; p++ ){
    val = SIDE[ p ];
    if( val == -2 ||
        ( side == 0 && val > 0 ) ||
        ( side == 1 && val < 1 )
      ){
      continue;
    }
    nC++;
  }


  DATA = mxCreateDoubleMatrix_700( nC , 3 , mxREAL );
  data = mxGetPr( DATA );

  c = 0;
  for( int p = 0 ; p < nP ; p++ ){
    val = SIDE[ p ];
    if( val == -2 ||
        ( side == 0 && val > 0 ) ||
        ( side == 1 && val < 1 )
      ){
      continue;
    }

    CELL = POLY->GetCell( p );
    data[ c ] = CELL->GetPointId(0) + 1;
    data[ c + nC ] = CELL->GetPointId(1) + 1;
    data[ c + 2*nC ] = CELL->GetPointId(2) + 1;
    c++;
  }

  mxAddField( M , "tri" );
  mxSetField_700( M , 0 , "tri" , DATA );


  return( M );
}




void setSIDE( vtkPolyData *A , vtkPolyData *B ){

  vtkPolyDataNormals *NORMALS = __null;
  NORMALS = vtkPolyDataNormals::New();
    NORMALS->SetInput( B );
    NORMALS->ComputeCellNormalsOn();
    NORMALS->ComputePointNormalsOn();
    NORMALS->ConsistencyOff();
    NORMALS->AutoOrientNormalsOff();
    NORMALS->SplittingOff();


    NORMALS->Update();


  vtkPolyData *SURF;
  SURF = NORMALS->GetOutput();

  vtkCellLocator *LOC = __null;
  LOC= vtkCellLocator::New();
    LOC->SetDataSet( SURF );
    LOC->CacheCellBoundsOn();
    LOC->SetNumberOfCellsPerBucket( 2 );
    LOC->BuildLocator();



  signed char *SIDE = (signed char *)A->GetCellData()->GetArray( 0 )->GetVoidPointer(0);


  double R[3], P[3], Q[3], C[3];
  int t, c;
  double closestPoint[3], distance, pcoords[3], N[3], *NN, weigths[3], side;
  vtkGenericCell *Gcell = vtkGenericCell::New();
  vtkIdType cellid;
  int sub;
  vtkIdList *NODES = vtkIdList::New();
  vtkCell *CELL = __null;


  vtkPoints *POINTS;
  POINTS = A->GetPoints();

  for( t = 0 ; t < A->GetNumberOfCells() ; t++ ){
    if( !SIDE[ t ] ){ continue; }
    CELL = A->GetCell(t);

    POINTS->GetPoint( CELL->GetPointId(0) , R );
    POINTS->GetPoint( CELL->GetPointId(1) , P );
    POINTS->GetPoint( CELL->GetPointId(2) , Q );

    N[0] = ((P[1]-R[1])*(Q[2]-R[2])-(P[2]-R[2])*(Q[1]-R[1]));
    N[1] = ((P[2]-R[2])*(Q[0]-R[0])-(P[0]-R[0])*(Q[2]-R[2]));
    N[2] = ((P[0]-R[0])*(Q[1]-R[1])-(P[1]-R[1])*(Q[0]-R[0]));

    if( ( N[0]*N[0] + N[1]*N[1] + N[2]*N[2] ) < 1e-6*1e-6 ){ SIDE[ t ] = -2; continue; }

    for( c = 0 ; c < 3 ; c++ ){
      C[c] = ( R[c] + P[c] + Q[c] )/3.0;
    }

    LOC->FindClosestPoint( C , closestPoint , Gcell , cellid , sub , distance );

    SURF->GetCell( cellid )->EvaluatePosition( closestPoint, __null, sub, pcoords, distance, weigths );

    if( weigths[0]<1e-3 || weigths[1]<1e-3 || weigths[2]<1e-3 ){

      SURF->GetCellPoints( cellid , NODES );

      NN = SURF->GetPointData()->GetNormals()->GetTuple3( NODES->GetId(0) );
      for( c=0 ; c<3; c++ ){ N[c] = NN[c]*weigths[0]; }
      NN = SURF->GetPointData()->GetNormals()->GetTuple3( NODES->GetId(1) );
      for( c=0 ; c<3; c++ ){ N[c] += NN[c]*weigths[1]; }
      NN = SURF->GetPointData()->GetNormals()->GetTuple3( NODES->GetId(2) );
      for( c=0 ; c<3; c++ ){ N[c] += NN[c]*weigths[2]; }

    } else {

      NN = SURF->GetCellData()->GetNormals()->GetTuple3(cellid);
      N[0] = NN[0];
      N[1] = NN[1];
      N[2] = NN[2];

    }

    side= 0;
    for( c=0; c<3; c++ ){ side += (closestPoint[c]-C[c])*N[c]; }


    if( side > 0 ){
      SIDE[ t ] = 1;
    } else {
      SIDE[ t ] = -1;
    }

  }

  if( NODES != __null ){ NODES->Delete(); NODES=__null; };
  if( Gcell != __null ){ Gcell->Delete(); Gcell=__null; };
  if( LOC != __null ){ LOC->Delete(); LOC=__null; };
  if( NORMALS != __null ){ NORMALS->Delete(); NORMALS=__null; };
}
# 1796 "IntersectMeshes_OK2.cpp"
int TriangleTriangleIntersection(double p1[3], double q1[3], double r1[3],
                                 double p2[3], double q2[3], double r2[3],
                                 int &coplanar, double pt1[3], double pt2[3]){

  double n1[3], n2[3];


  vtkTriangle::ComputeNormal(p1, q1, r1, n1);
  vtkTriangle::ComputeNormal(p2, q2, r2, n2);
  double s1 = -vtkMath::Dot(n1, p1);
  double s2 = -vtkMath::Dot(n2, p2);



  double dist1[3];
  dist1[0] = vtkMath::Dot(n2, p1) + s2;
  dist1[1] = vtkMath::Dot(n2, q1) + s2;
  dist1[2] = vtkMath::Dot(n2, r1) + s2;



  if ((dist1[0]*dist1[1] > 0.0) && (dist1[0]*dist1[2] > 0.0))
    {
    return 0;
    }


  double dist2[3];
  dist2[0] = vtkMath::Dot(n1, p2) + s1;
  dist2[1] = vtkMath::Dot(n1, q2) + s1;
  dist2[2] = vtkMath::Dot(n1, r2) + s1;



  if ((dist2[0]*dist2[1] > 0.0) && (dist2[0]*dist2[2] > 0.0))
    {
    return 0;
    }

  if ( fabs( n1[0] - n2[0] ) < 1e-9 &&
       fabs( n1[1] - n2[1] ) < 1e-9 &&
       fabs( n1[2] - n2[2] ) < 1e-9 &&
       fabs( s1 - s2 ) < 1e-9 )
    {
    coplanar = 1;
    return 0;
    }

  coplanar = 0;



  double *pts1[3] = {p1, q1, r1}, *pts2[3] = {p2, q2, r2};


  double n1n2 = vtkMath::Dot(n1, n2);
  double a = (s1 - s2*n1n2) / (n1n2*n1n2 - 1.0);
  double b = (s2 - s1*n1n2) / (n1n2*n1n2 - 1.0);
  double p[3], v[3];
  p[0] = a*n1[0] + b*n2[0];
  p[1] = a*n1[1] + b*n2[1];
  p[2] = a*n1[2] + b*n2[2];
  vtkMath::Cross(n1, n2, v);
  vtkMath::Normalize( v );




  int index1 = 0, index2 = 0;
  double t1[1024], t2[1024];
  for (int i = 0; i < 3; i++)
    {
    double t, x[3];
    int j = i, id2 = (i+1) % 3;




    if (vtkPlane::IntersectWithLine( pts1[j], pts1[id2], n2, p2, t, x ))

      {


      t1[index1++] = (x[0]*v[0]+x[1]*v[1]+x[2]*v[2]) - (p[0]*v[0]+p[1]*v[1]+p[2]*v[2]);

      }
     else{

     }

    if (vtkPlane::IntersectWithLine( pts2[j], pts2[id2], n1, p1, t, x ))
      {


      t2[index2++] = (x[0]*v[0]+x[1]*v[1]+x[2]*v[2]) - (p[0]*v[0]+p[1]*v[1]+p[2]*v[2]);

      }
     else{

     }
    }







  if (( index1 > 3 ) || (index2 > 3 ) || ( index1 < 2 )||( index2 < 2 ))
    {

      return 0;
    }
  else
  {
# 1921 "IntersectMeshes_OK2.cpp"
      if (index1==3)
      {
          if (t1[0]==t1[1]){t1[1]=t1[2];}
      }
      if (index2==3)
      {
          if (t2[0]==t2[1]){t2[1]=t2[2];}
      }

  }




      if ((t1[0]==t1[1]) || (t2[0]==t2[1]))
      {

          return 0;
      }







  if ( vtkMath::IsNan( t1[0] ) || vtkMath::IsNan( t1[1] ) ||
       vtkMath::IsNan( t2[0] ) || vtkMath::IsNan( t2[1] ) )
    {
    return 0;
    }

  if ( t1[0] > t1[1] )
    {
    std::swap( t1[0], t1[1] );
    }
  if ( t2[0] > t2[1] )
    {
    std::swap( t2[0], t2[1] );
    }

  double tt1, tt2;

  if ( t1[1] < t2[0] || t2[1] < t1[0] )
    {

    return 0;
    }
  else if ( t1[0] < t2[0] )
    {
    if ( t1[1] < t2[1] )
      {
      tt1 = t2[0] ;
      tt2 = t1[1] ;
      }
    else
      {
      tt1 = t2[0] ;
      tt2 = t2[1] ;
      }
    }
  else
    {
    if ( t1[1] < t2[1] )
      {
      tt1 = t1[0] ;
      tt2 = t1[1] ;
      }
    else
      {
      tt1 = t1[0] ;
      tt2 = t2[1] ;
      }
    }
# 2004 "IntersectMeshes_OK2.cpp"
  pt1[0] = p[0] + tt1*v[0];
  pt1[1] = p[1] + tt1*v[1];
  pt1[2] = p[2] + tt1*v[2];

  pt2[0] = p[0] + tt2*v[0];
  pt2[1] = p[1] + tt2*v[1];
  pt2[2] = p[2] + tt2*v[2];



  return 1;
}


int LinePlaneIntersection(double p1[3], double p2[3], double n[3], double p0[3], double & t, double x[3]){

    double vR[3];

    vR[0]=p2[0]-p1[0];
    vR[1]=p2[1]-p1[1];
    vR[2]=p2[2]-p1[2];
    double Vd=(n[0]*vR[0]+n[1]*vR[1]+n[2]*vR[2]);
    if (Vd==0)
    {

        return 0;

    }

    double Vo = - (n[0]*p1[0]+n[1]*p1[1]+n[2]*p1[2]) + (n[0]*p0[0]+n[1]*p0[1]+n[2]*p0[2]);
    t = Vo / Vd;
# 2046 "IntersectMeshes_OK2.cpp"
    if ((t>=0)&&(t<=1))
        {
        x[0]= p1[0]+t*vR[0];
        x[1]= p1[1]+t*vR[1];
        x[2]= p1[2]+t*vR[2];

        return 1;}
    else
    {

        return 0;
    }
}
# 2131 "IntersectMeshes_OK2.cpp"
int planeBoxOverlap(double normal[3], double vert[3], double maxbox[3]){
  int q;
  double vmin[3],vmax[3],v;
  for(q=0;q<=2;q++){
    v=vert[q];
    if(normal[q]>0.0f){
      vmin[q]=-maxbox[q] - v;
      vmax[q]= maxbox[q] - v;
    } else {
      vmin[q]= maxbox[q] - v;
      vmax[q]=-maxbox[q] - v;
    }
  }
  if( (normal[0]*vmin[0]+normal[1]*vmin[1]+normal[2]*vmin[2]) > 0.0f ){ return(0); }
  if( (normal[0]*vmax[0]+normal[1]*vmax[1]+normal[2]*vmax[2]) >= 0.0f ){ return(1); }

  return(0);
}
int triBoxOverlap( double boxcenter[3] , double boxhalfsize[3] , double R[3] , double P[3] , double Q[3] ){
# 2158 "IntersectMeshes_OK2.cpp"
   double v0[3],v1[3],v2[3];
   double min,max,p0,p1,p2,rad,fex,fey,fez;
   double normal[3],e0[3],e1[3],e2[3];




   v0[0]=R[0]-boxcenter[0]; v0[1]=R[1]-boxcenter[1]; v0[2]=R[2]-boxcenter[2];;
   v1[0]=P[0]-boxcenter[0]; v1[1]=P[1]-boxcenter[1]; v1[2]=P[2]-boxcenter[2];;
   v2[0]=Q[0]-boxcenter[0]; v2[1]=Q[1]-boxcenter[1]; v2[2]=Q[2]-boxcenter[2];;


   e0[0]=v1[0]-v0[0]; e0[1]=v1[1]-v0[1]; e0[2]=v1[2]-v0[2];;
   e1[0]=v2[0]-v1[0]; e1[1]=v2[1]-v1[1]; e1[2]=v2[2]-v1[2];;
   e2[0]=v0[0]-v2[0]; e2[1]=v0[1]-v2[1]; e2[2]=v0[2]-v2[2];;



   fex = fabsf(e0[0]);
   fey = fabsf(e0[1]);
   fez = fabsf(e0[2]);

   p0 = e0[2]*v0[1] - e0[1]*v0[2]; p2 = e0[2]*v2[1] - e0[1]*v2[2]; if( p0<p2 ){ min=p0; max=p2; }else{ min=p2; max=p0; } rad = fez * boxhalfsize[1] + fey * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };;
   p0 = -e0[2]*v0[0] + e0[0]*v0[2]; p2 = -e0[2]*v2[0] + e0[0]*v2[2]; if( p0<p2 ){ min=p0; max=p2; }else{ min=p2; max=p0; } rad = fez * boxhalfsize[0] + fex * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };;
   p1 = e0[1]*v1[0] - e0[0]*v1[1]; p2 = e0[1]*v2[0] - e0[0]*v2[1]; if( p2<p1 ){ min=p2; max=p1; }else{ min=p1; max=p2; } rad = fey * boxhalfsize[0] + fex * boxhalfsize[1]; if( min>rad || max<-rad ){ return(0); };

   fex = fabsf(e1[0]);
   fey = fabsf(e1[1]);
   fez = fabsf(e1[2]);

   p0 = e1[2]*v0[1] - e1[1]*v0[2]; p2 = e1[2]*v2[1] - e1[1]*v2[2]; if( p0<p2 ){ min=p0; max=p2; }else{ min=p2; max=p0; } rad = fez * boxhalfsize[1] + fey * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };;
   p0 = -e1[2]*v0[0] + e1[0]*v0[2]; p2 = -e1[2]*v2[0] + e1[0]*v2[2]; if( p0<p2 ){ min=p0; max=p2; }else{ min=p2; max=p0; } rad = fez * boxhalfsize[0] + fex * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };;
   p0 = e1[1]*v0[0] - e1[0]*v0[1]; p1 = e1[1]*v1[0] - e1[0]*v1[1]; if( p0<p1 ){ min=p0; max=p1; }else{ min=p1; max=p0; } rad = fey * boxhalfsize[0] + fex * boxhalfsize[1]; if( min>rad || max<-rad ){ return(0); };;

   fex = fabsf(e2[0]);
   fey = fabsf(e2[1]);
   fez = fabsf(e2[2]);

   p0 = e2[2]*v0[1] - e2[1]*v0[2]; p1 = e2[2]*v1[1] - e2[1]*v1[2]; if( p0<p1 ){ min=p0; max=p1; }else{ min=p1; max=p0; } rad = fez * boxhalfsize[1] + fey * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };
   p0 = -e2[2]*v0[0] + e2[0]*v0[2]; p1 = -e2[2]*v1[0] + e2[0]*v1[2]; if( p0<p1 ){ min=p0; max=p1; }else{ min=p1; max=p0; } rad = fez * boxhalfsize[0] + fex * boxhalfsize[2]; if( min>rad || max<-rad ){ return(0); };;
   p1 = e2[1]*v1[0] - e2[0]*v1[1]; p2 = e2[1]*v2[0] - e2[0]*v2[1]; if( p2<p1 ){ min=p2; max=p1; }else{ min=p1; max=p2; } rad = fey * boxhalfsize[0] + fex * boxhalfsize[1]; if( min>rad || max<-rad ){ return(0); };
# 2207 "IntersectMeshes_OK2.cpp"
   min = max = v0[0]; if(v1[0]<min) min=v1[0]; if(v1[0]>max) max=v1[0]; if(v2[0]<min) min=v2[0]; if(v2[0]>max) max=v2[0];;
   if( min>boxhalfsize[0] || max<-boxhalfsize[0] ){ return(0); };


   min = max = v0[1]; if(v1[1]<min) min=v1[1]; if(v1[1]>max) max=v1[1]; if(v2[1]<min) min=v2[1]; if(v2[1]>max) max=v2[1];;
   if( min>boxhalfsize[1] || max<-boxhalfsize[1]){ return(0); };


   min = max = v0[2]; if(v1[2]<min) min=v1[2]; if(v1[2]>max) max=v1[2]; if(v2[2]<min) min=v2[2]; if(v2[2]>max) max=v2[2];;
   if( min>boxhalfsize[2] || max<-boxhalfsize[2] ){ return(0); };




   normal[0]=e0[1]*e1[2]-e0[2]*e1[1]; normal[1]=e0[2]*e1[0]-e0[0]*e1[2]; normal[2]=e0[0]*e1[1]-e0[1]*e1[0];;
   if( !planeBoxOverlap(normal,v0,boxhalfsize) ){ return(0); };

   return(1);
}
